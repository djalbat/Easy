'use strict';

var Element = require('./element'),
    TextElement = require('./textElement');

function createElement(firstArgument, properties) {
  var element = null;

  if (firstArgument !== undefined) {
    for (var _len = arguments.length, childArguments = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      childArguments[_key - 2] = arguments[_key];
    }

    var childElements = childElementsFromChildArguments(childArguments);

    properties = Object.assign({
      childElements: childElements
    }, properties);

    if (false) {} else if (isSubclassOf(firstArgument, Element)) {
      var Class = firstArgument; ///

      element = Class.fromProperties(properties);
    } else if (typeof firstArgument === 'string') {
      var tagName = firstArgument; ///

      element = Element.fromTagName(tagName, properties);
    } else if (typeof firstArgument === 'function') {
      var elementFunction = firstArgument; ///

      element = elementFunction(properties);
    }
  }

  return element;
}

var React = {
  createElement: createElement
};

module.exports = React;

function childElementsFromChildArguments(childArguments) {
  childArguments = childArguments.reduce(function (childArguments, childArgument) {
    childArguments = childArguments.concat(childArgument);

    return childArguments;
  }, []);

  var childElements = childArguments.map(function (childArgument) {
    var childElement = void 0;

    if (typeof childArgument === 'string') {
      var text = childArgument,
          ///
      textElement = new TextElement(text);

      childElement = textElement;
    } else {
      childElement = childArgument; ///
    }

    return childElement;
  });

  return childElements;
}

function isSubclassOf(argument, Class) {
  var typeOf = false;

  if (argument.name === Class.name) {
    ///
    typeOf = true;
  } else {
    argument = Object.getPrototypeOf(argument); ///

    if (argument) {
      typeOf = isSubclassOf(argument, Class);
    }
  }

  return typeOf;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9yZWFjdC5qcyJdLCJuYW1lcyI6WyJFbGVtZW50IiwicmVxdWlyZSIsIlRleHRFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImZpcnN0QXJndW1lbnQiLCJwcm9wZXJ0aWVzIiwiZWxlbWVudCIsInVuZGVmaW5lZCIsImNoaWxkQXJndW1lbnRzIiwiY2hpbGRFbGVtZW50cyIsImNoaWxkRWxlbWVudHNGcm9tQ2hpbGRBcmd1bWVudHMiLCJPYmplY3QiLCJhc3NpZ24iLCJpc1N1YmNsYXNzT2YiLCJDbGFzcyIsImZyb21Qcm9wZXJ0aWVzIiwidGFnTmFtZSIsImZyb21UYWdOYW1lIiwiZWxlbWVudEZ1bmN0aW9uIiwiUmVhY3QiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVkdWNlIiwiY2hpbGRBcmd1bWVudCIsImNvbmNhdCIsIm1hcCIsImNoaWxkRWxlbWVudCIsInRleHQiLCJ0ZXh0RWxlbWVudCIsImFyZ3VtZW50IiwidHlwZU9mIiwibmFtZSIsImdldFByb3RvdHlwZU9mIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxVQUFVQyxRQUFRLFdBQVIsQ0FBaEI7QUFBQSxJQUNNQyxjQUFjRCxRQUFRLGVBQVIsQ0FEcEI7O0FBR0EsU0FBU0UsYUFBVCxDQUF1QkMsYUFBdkIsRUFBc0NDLFVBQXRDLEVBQXFFO0FBQ25FLE1BQUlDLFVBQVUsSUFBZDs7QUFFQSxNQUFJRixrQkFBa0JHLFNBQXRCLEVBQWlDO0FBQUEsc0NBSGtCQyxjQUdsQjtBQUhrQkEsb0JBR2xCO0FBQUE7O0FBQy9CLFFBQU1DLGdCQUFnQkMsZ0NBQWdDRixjQUFoQyxDQUF0Qjs7QUFFQUgsaUJBQWFNLE9BQU9DLE1BQVAsQ0FBYztBQUN6Qkg7QUFEeUIsS0FBZCxFQUVWSixVQUZVLENBQWI7O0FBSUEsUUFBSSxLQUFKLEVBQVcsQ0FFVixDQUZELE1BRU8sSUFBSVEsYUFBYVQsYUFBYixFQUE0QkosT0FBNUIsQ0FBSixFQUEwQztBQUMvQyxVQUFNYyxRQUFRVixhQUFkLENBRCtDLENBQ2pCOztBQUU5QkUsZ0JBQVVRLE1BQU1DLGNBQU4sQ0FBcUJWLFVBQXJCLENBQVY7QUFDRCxLQUpNLE1BSUEsSUFBSSxPQUFPRCxhQUFQLEtBQXlCLFFBQTdCLEVBQXVDO0FBQzVDLFVBQU1ZLFVBQVVaLGFBQWhCLENBRDRDLENBQ2I7O0FBRS9CRSxnQkFBVU4sUUFBUWlCLFdBQVIsQ0FBb0JELE9BQXBCLEVBQTZCWCxVQUE3QixDQUFWO0FBQ0QsS0FKTSxNQUlBLElBQUksT0FBT0QsYUFBUCxLQUF5QixVQUE3QixFQUF5QztBQUM5QyxVQUFNYyxrQkFBa0JkLGFBQXhCLENBRDhDLENBQ047O0FBRXhDRSxnQkFBVVksZ0JBQWdCYixVQUFoQixDQUFWO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPQyxPQUFQO0FBQ0Q7O0FBRUQsSUFBTWEsUUFBUTtBQUNaaEIsaUJBQWVBO0FBREgsQ0FBZDs7QUFJQWlCLE9BQU9DLE9BQVAsR0FBaUJGLEtBQWpCOztBQUVBLFNBQVNULCtCQUFULENBQXlDRixjQUF6QyxFQUF5RDtBQUN2REEsbUJBQWlCQSxlQUFlYyxNQUFmLENBQXNCLFVBQVNkLGNBQVQsRUFBeUJlLGFBQXpCLEVBQXdDO0FBQzdFZixxQkFBaUJBLGVBQWVnQixNQUFmLENBQXNCRCxhQUF0QixDQUFqQjs7QUFFQSxXQUFPZixjQUFQO0FBQ0QsR0FKZ0IsRUFJZCxFQUpjLENBQWpCOztBQU1BLE1BQU1DLGdCQUFnQkQsZUFBZWlCLEdBQWYsQ0FBbUIsVUFBU0YsYUFBVCxFQUF3QjtBQUMvRCxRQUFJRyxxQkFBSjs7QUFFQSxRQUFJLE9BQU9ILGFBQVAsS0FBeUIsUUFBN0IsRUFBdUM7QUFDckMsVUFBTUksT0FBT0osYUFBYjtBQUFBLFVBQTRCO0FBQ3RCSyxvQkFBYyxJQUFJMUIsV0FBSixDQUFnQnlCLElBQWhCLENBRHBCOztBQUdBRCxxQkFBZUUsV0FBZjtBQUNELEtBTEQsTUFLTztBQUNMRixxQkFBZUgsYUFBZixDQURLLENBQzBCO0FBQ2hDOztBQUVELFdBQU9HLFlBQVA7QUFDRCxHQWJxQixDQUF0Qjs7QUFlQSxTQUFPakIsYUFBUDtBQUNEOztBQUVELFNBQVNJLFlBQVQsQ0FBc0JnQixRQUF0QixFQUFnQ2YsS0FBaEMsRUFBdUM7QUFDckMsTUFBSWdCLFNBQVMsS0FBYjs7QUFFQSxNQUFJRCxTQUFTRSxJQUFULEtBQWtCakIsTUFBTWlCLElBQTVCLEVBQWtDO0FBQUU7QUFDbENELGFBQVMsSUFBVDtBQUNELEdBRkQsTUFFTztBQUNMRCxlQUFXbEIsT0FBT3FCLGNBQVAsQ0FBc0JILFFBQXRCLENBQVgsQ0FESyxDQUN1Qzs7QUFFNUMsUUFBSUEsUUFBSixFQUFjO0FBQ1pDLGVBQVNqQixhQUFhZ0IsUUFBYixFQUF1QmYsS0FBdkIsQ0FBVDtBQUNEO0FBQ0Y7O0FBRUQsU0FBT2dCLE1BQVA7QUFDRCIsImZpbGUiOiJyZWFjdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRWxlbWVudCA9IHJlcXVpcmUoJy4vZWxlbWVudCcpLFxuICAgICAgVGV4dEVsZW1lbnQgPSByZXF1aXJlKCcuL3RleHRFbGVtZW50Jyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQoZmlyc3RBcmd1bWVudCwgcHJvcGVydGllcywgLi4uY2hpbGRBcmd1bWVudHMpIHtcbiAgbGV0IGVsZW1lbnQgPSBudWxsO1xuXG4gIGlmIChmaXJzdEFyZ3VtZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBjaGlsZEVsZW1lbnRzID0gY2hpbGRFbGVtZW50c0Zyb21DaGlsZEFyZ3VtZW50cyhjaGlsZEFyZ3VtZW50cyk7XG5cbiAgICBwcm9wZXJ0aWVzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICBjaGlsZEVsZW1lbnRzXG4gICAgfSwgcHJvcGVydGllcyk7XG5cbiAgICBpZiAoZmFsc2UpIHtcblxuICAgIH0gZWxzZSBpZiAoaXNTdWJjbGFzc09mKGZpcnN0QXJndW1lbnQsIEVsZW1lbnQpKSB7XG4gICAgICBjb25zdCBDbGFzcyA9IGZpcnN0QXJndW1lbnQ7ICAvLy9cblxuICAgICAgZWxlbWVudCA9IENsYXNzLmZyb21Qcm9wZXJ0aWVzKHByb3BlcnRpZXMpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGZpcnN0QXJndW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCB0YWdOYW1lID0gZmlyc3RBcmd1bWVudDsgLy8vXG5cbiAgICAgIGVsZW1lbnQgPSBFbGVtZW50LmZyb21UYWdOYW1lKHRhZ05hbWUsIHByb3BlcnRpZXMpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGZpcnN0QXJndW1lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnRGdW5jdGlvbiA9IGZpcnN0QXJndW1lbnQ7ICAvLy9cblxuICAgICAgZWxlbWVudCA9IGVsZW1lbnRGdW5jdGlvbihwcm9wZXJ0aWVzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZWxlbWVudDtcbn1cblxuY29uc3QgUmVhY3QgPSB7XG4gIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnRcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3Q7XG5cbmZ1bmN0aW9uIGNoaWxkRWxlbWVudHNGcm9tQ2hpbGRBcmd1bWVudHMoY2hpbGRBcmd1bWVudHMpIHtcbiAgY2hpbGRBcmd1bWVudHMgPSBjaGlsZEFyZ3VtZW50cy5yZWR1Y2UoZnVuY3Rpb24oY2hpbGRBcmd1bWVudHMsIGNoaWxkQXJndW1lbnQpIHtcbiAgICBjaGlsZEFyZ3VtZW50cyA9IGNoaWxkQXJndW1lbnRzLmNvbmNhdChjaGlsZEFyZ3VtZW50KTtcblxuICAgIHJldHVybiBjaGlsZEFyZ3VtZW50cztcbiAgfSwgW10pO1xuXG4gIGNvbnN0IGNoaWxkRWxlbWVudHMgPSBjaGlsZEFyZ3VtZW50cy5tYXAoZnVuY3Rpb24oY2hpbGRBcmd1bWVudCkge1xuICAgIGxldCBjaGlsZEVsZW1lbnQ7XG4gICAgXG4gICAgaWYgKHR5cGVvZiBjaGlsZEFyZ3VtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgdGV4dCA9IGNoaWxkQXJndW1lbnQsIC8vL1xuICAgICAgICAgICAgdGV4dEVsZW1lbnQgPSBuZXcgVGV4dEVsZW1lbnQodGV4dCk7XG5cbiAgICAgIGNoaWxkRWxlbWVudCA9IHRleHRFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGlsZEVsZW1lbnQgPSBjaGlsZEFyZ3VtZW50OyAgLy8vXG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkRWxlbWVudDtcbiAgfSk7XG5cbiAgcmV0dXJuIGNoaWxkRWxlbWVudHM7XG59XG5cbmZ1bmN0aW9uIGlzU3ViY2xhc3NPZihhcmd1bWVudCwgQ2xhc3MpIHtcbiAgbGV0IHR5cGVPZiA9IGZhbHNlO1xuXG4gIGlmIChhcmd1bWVudC5uYW1lID09PSBDbGFzcy5uYW1lKSB7IC8vL1xuICAgIHR5cGVPZiA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgYXJndW1lbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYXJndW1lbnQpOyAvLy9cblxuICAgIGlmIChhcmd1bWVudCkge1xuICAgICAgdHlwZU9mID0gaXNTdWJjbGFzc09mKGFyZ3VtZW50LCBDbGFzcyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHR5cGVPZjtcbn1cbiJdfQ==