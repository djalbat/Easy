'use strict';

var Element = require('./element'),
    TextElement = require('./textElement');

function createElement(firstArgument, properties) {
  var element = null;

  if (firstArgument !== undefined) {
    for (var _len = arguments.length, childArguments = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      childArguments[_key - 2] = arguments[_key];
    }

    var childElements = childElementsFromChildArguments(childArguments);

    properties = Object.assign({
      childElements: childElements
    }, properties);

    if (false) {} else if (isSubclassOf(firstArgument, Element)) {
      var Class = firstArgument; ///

      element = Class.fromProperties(properties);
    } else if (typeof firstArgument === 'function') {
      var elementFunction = firstArgument; ///

      element = elementFunction(properties);
    } else if (typeof firstArgument === 'string') {
      var tagName = firstArgument,
          ///
      html = '<' + tagName + ' />',
          defaultProperties = {},
          ///
      ignoredProperties = []; ///

      element = Element.fromHTML(Element, html);

      element.applyProperties(properties, defaultProperties, ignoredProperties);
    }
  }

  return element;
}

var React = {
  createElement: createElement
};

module.exports = React;

function childElementsFromChildArguments(childArguments) {
  childArguments = childArguments.reduce(function (childArguments, childArgument) {
    childArguments = childArguments.concat(childArgument);

    return childArguments;
  }, []);

  var childElements = childArguments.map(function (childArgument) {
    var childElement = void 0;

    if (typeof childArgument === 'string') {
      var text = childArgument,
          ///
      textElement = new TextElement(text);

      childElement = textElement;
    } else {
      childElement = childArgument; ///
    }

    return childElement;
  });

  return childElements;
}

function isSubclassOf(argument, Class) {
  var typeOf = false;

  if (argument.name === Class.name) {
    ///
    typeOf = true;
  } else {
    argument = Object.getPrototypeOf(argument); ///

    if (argument) {
      typeOf = isSubclassOf(argument, Class);
    }
  }

  return typeOf;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9yZWFjdC5qcyJdLCJuYW1lcyI6WyJFbGVtZW50IiwicmVxdWlyZSIsIlRleHRFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImZpcnN0QXJndW1lbnQiLCJwcm9wZXJ0aWVzIiwiZWxlbWVudCIsInVuZGVmaW5lZCIsImNoaWxkQXJndW1lbnRzIiwiY2hpbGRFbGVtZW50cyIsImNoaWxkRWxlbWVudHNGcm9tQ2hpbGRBcmd1bWVudHMiLCJPYmplY3QiLCJhc3NpZ24iLCJpc1N1YmNsYXNzT2YiLCJDbGFzcyIsImZyb21Qcm9wZXJ0aWVzIiwiZWxlbWVudEZ1bmN0aW9uIiwidGFnTmFtZSIsImh0bWwiLCJkZWZhdWx0UHJvcGVydGllcyIsImlnbm9yZWRQcm9wZXJ0aWVzIiwiZnJvbUhUTUwiLCJhcHBseVByb3BlcnRpZXMiLCJSZWFjdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZWR1Y2UiLCJjaGlsZEFyZ3VtZW50IiwiY29uY2F0IiwibWFwIiwiY2hpbGRFbGVtZW50IiwidGV4dCIsInRleHRFbGVtZW50IiwiYXJndW1lbnQiLCJ0eXBlT2YiLCJuYW1lIiwiZ2V0UHJvdG90eXBlT2YiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFVBQVVDLFFBQVEsV0FBUixDQUFoQjtBQUFBLElBQ01DLGNBQWNELFFBQVEsZUFBUixDQURwQjs7QUFHQSxTQUFTRSxhQUFULENBQXVCQyxhQUF2QixFQUFzQ0MsVUFBdEMsRUFBcUU7QUFDbkUsTUFBSUMsVUFBVSxJQUFkOztBQUVBLE1BQUlGLGtCQUFrQkcsU0FBdEIsRUFBaUM7QUFBQSxzQ0FIa0JDLGNBR2xCO0FBSGtCQSxvQkFHbEI7QUFBQTs7QUFDL0IsUUFBTUMsZ0JBQWdCQyxnQ0FBZ0NGLGNBQWhDLENBQXRCOztBQUVBSCxpQkFBYU0sT0FBT0MsTUFBUCxDQUFjO0FBQ3pCSCxxQkFBZUE7QUFEVSxLQUFkLEVBRVZKLFVBRlUsQ0FBYjs7QUFJQSxRQUFJLEtBQUosRUFBVyxDQUVWLENBRkQsTUFFTyxJQUFJUSxhQUFhVCxhQUFiLEVBQTRCSixPQUE1QixDQUFKLEVBQTBDO0FBQy9DLFVBQU1jLFFBQVFWLGFBQWQsQ0FEK0MsQ0FDakI7O0FBRTlCRSxnQkFBVVEsTUFBTUMsY0FBTixDQUFxQlYsVUFBckIsQ0FBVjtBQUNELEtBSk0sTUFJQSxJQUFJLE9BQU9ELGFBQVAsS0FBeUIsVUFBN0IsRUFBeUM7QUFDOUMsVUFBTVksa0JBQWtCWixhQUF4QixDQUQ4QyxDQUNOOztBQUV4Q0UsZ0JBQVVVLGdCQUFnQlgsVUFBaEIsQ0FBVjtBQUNELEtBSk0sTUFJQSxJQUFJLE9BQU9ELGFBQVAsS0FBeUIsUUFBN0IsRUFBdUM7QUFDNUMsVUFBTWEsVUFBVWIsYUFBaEI7QUFBQSxVQUFnQztBQUMxQmMsbUJBQVdELE9BQVgsUUFETjtBQUFBLFVBRU1FLG9CQUFvQixFQUYxQjtBQUFBLFVBRThCO0FBQ3hCQywwQkFBb0IsRUFIMUIsQ0FENEMsQ0FJZDs7QUFFOUJkLGdCQUFVTixRQUFRcUIsUUFBUixDQUFpQnJCLE9BQWpCLEVBQTBCa0IsSUFBMUIsQ0FBVjs7QUFFQVosY0FBUWdCLGVBQVIsQ0FBd0JqQixVQUF4QixFQUFvQ2MsaUJBQXBDLEVBQXVEQyxpQkFBdkQ7QUFDRDtBQUNGOztBQUVELFNBQU9kLE9BQVA7QUFDRDs7QUFFRCxJQUFNaUIsUUFBUTtBQUNacEIsaUJBQWVBO0FBREgsQ0FBZDs7QUFJQXFCLE9BQU9DLE9BQVAsR0FBaUJGLEtBQWpCOztBQUVBLFNBQVNiLCtCQUFULENBQXlDRixjQUF6QyxFQUF5RDtBQUN2REEsbUJBQWlCQSxlQUFla0IsTUFBZixDQUFzQixVQUFTbEIsY0FBVCxFQUF5Qm1CLGFBQXpCLEVBQXdDO0FBQzdFbkIscUJBQWlCQSxlQUFlb0IsTUFBZixDQUFzQkQsYUFBdEIsQ0FBakI7O0FBRUEsV0FBT25CLGNBQVA7QUFDRCxHQUpnQixFQUlkLEVBSmMsQ0FBakI7O0FBTUEsTUFBTUMsZ0JBQWdCRCxlQUFlcUIsR0FBZixDQUFtQixVQUFTRixhQUFULEVBQXdCO0FBQy9ELFFBQUlHLHFCQUFKOztBQUVBLFFBQUksT0FBT0gsYUFBUCxLQUF5QixRQUE3QixFQUF1QztBQUNyQyxVQUFNSSxPQUFPSixhQUFiO0FBQUEsVUFBNEI7QUFDdEJLLG9CQUFjLElBQUk5QixXQUFKLENBQWdCNkIsSUFBaEIsQ0FEcEI7O0FBR0FELHFCQUFlRSxXQUFmO0FBQ0QsS0FMRCxNQUtPO0FBQ0xGLHFCQUFlSCxhQUFmLENBREssQ0FDMEI7QUFDaEM7O0FBRUQsV0FBT0csWUFBUDtBQUNELEdBYnFCLENBQXRCOztBQWVBLFNBQU9yQixhQUFQO0FBQ0Q7O0FBRUQsU0FBU0ksWUFBVCxDQUFzQm9CLFFBQXRCLEVBQWdDbkIsS0FBaEMsRUFBdUM7QUFDckMsTUFBSW9CLFNBQVMsS0FBYjs7QUFFQSxNQUFJRCxTQUFTRSxJQUFULEtBQWtCckIsTUFBTXFCLElBQTVCLEVBQWtDO0FBQUU7QUFDbENELGFBQVMsSUFBVDtBQUNELEdBRkQsTUFFTztBQUNMRCxlQUFXdEIsT0FBT3lCLGNBQVAsQ0FBc0JILFFBQXRCLENBQVgsQ0FESyxDQUN1Qzs7QUFFNUMsUUFBSUEsUUFBSixFQUFjO0FBQ1pDLGVBQVNyQixhQUFhb0IsUUFBYixFQUF1Qm5CLEtBQXZCLENBQVQ7QUFDRDtBQUNGOztBQUVELFNBQU9vQixNQUFQO0FBQ0QiLCJmaWxlIjoicmVhY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEVsZW1lbnQgPSByZXF1aXJlKCcuL2VsZW1lbnQnKSxcbiAgICAgIFRleHRFbGVtZW50ID0gcmVxdWlyZSgnLi90ZXh0RWxlbWVudCcpO1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50KGZpcnN0QXJndW1lbnQsIHByb3BlcnRpZXMsIC4uLmNoaWxkQXJndW1lbnRzKSB7XG4gIGxldCBlbGVtZW50ID0gbnVsbDtcblxuICBpZiAoZmlyc3RBcmd1bWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgY2hpbGRFbGVtZW50cyA9IGNoaWxkRWxlbWVudHNGcm9tQ2hpbGRBcmd1bWVudHMoY2hpbGRBcmd1bWVudHMpO1xuXG4gICAgcHJvcGVydGllcyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgY2hpbGRFbGVtZW50czogY2hpbGRFbGVtZW50c1xuICAgIH0sIHByb3BlcnRpZXMpO1xuXG4gICAgaWYgKGZhbHNlKSB7XG5cbiAgICB9IGVsc2UgaWYgKGlzU3ViY2xhc3NPZihmaXJzdEFyZ3VtZW50LCBFbGVtZW50KSkge1xuICAgICAgY29uc3QgQ2xhc3MgPSBmaXJzdEFyZ3VtZW50OyAgLy8vXG5cbiAgICAgIGVsZW1lbnQgPSBDbGFzcy5mcm9tUHJvcGVydGllcyhwcm9wZXJ0aWVzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBmaXJzdEFyZ3VtZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zdCBlbGVtZW50RnVuY3Rpb24gPSBmaXJzdEFyZ3VtZW50OyAgLy8vXG5cbiAgICAgIGVsZW1lbnQgPSBlbGVtZW50RnVuY3Rpb24ocHJvcGVydGllcyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZmlyc3RBcmd1bWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IHRhZ05hbWUgPSBmaXJzdEFyZ3VtZW50LCAgLy8vXG4gICAgICAgICAgICBodG1sID0gYDwke3RhZ05hbWV9IC8+YCxcbiAgICAgICAgICAgIGRlZmF1bHRQcm9wZXJ0aWVzID0ge30sIC8vL1xuICAgICAgICAgICAgaWdub3JlZFByb3BlcnRpZXMgPSBbXTsgLy8vXG5cbiAgICAgIGVsZW1lbnQgPSBFbGVtZW50LmZyb21IVE1MKEVsZW1lbnQsIGh0bWwpO1xuXG4gICAgICBlbGVtZW50LmFwcGx5UHJvcGVydGllcyhwcm9wZXJ0aWVzLCBkZWZhdWx0UHJvcGVydGllcywgaWdub3JlZFByb3BlcnRpZXMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5jb25zdCBSZWFjdCA9IHtcbiAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdDtcblxuZnVuY3Rpb24gY2hpbGRFbGVtZW50c0Zyb21DaGlsZEFyZ3VtZW50cyhjaGlsZEFyZ3VtZW50cykge1xuICBjaGlsZEFyZ3VtZW50cyA9IGNoaWxkQXJndW1lbnRzLnJlZHVjZShmdW5jdGlvbihjaGlsZEFyZ3VtZW50cywgY2hpbGRBcmd1bWVudCkge1xuICAgIGNoaWxkQXJndW1lbnRzID0gY2hpbGRBcmd1bWVudHMuY29uY2F0KGNoaWxkQXJndW1lbnQpO1xuXG4gICAgcmV0dXJuIGNoaWxkQXJndW1lbnRzO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgY2hpbGRFbGVtZW50cyA9IGNoaWxkQXJndW1lbnRzLm1hcChmdW5jdGlvbihjaGlsZEFyZ3VtZW50KSB7XG4gICAgbGV0IGNoaWxkRWxlbWVudDtcbiAgICBcbiAgICBpZiAodHlwZW9mIGNoaWxkQXJndW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gY2hpbGRBcmd1bWVudCwgLy8vXG4gICAgICAgICAgICB0ZXh0RWxlbWVudCA9IG5ldyBUZXh0RWxlbWVudCh0ZXh0KTtcblxuICAgICAgY2hpbGRFbGVtZW50ID0gdGV4dEVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoaWxkRWxlbWVudCA9IGNoaWxkQXJndW1lbnQ7ICAvLy9cbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGRFbGVtZW50O1xuICB9KTtcblxuICByZXR1cm4gY2hpbGRFbGVtZW50cztcbn1cblxuZnVuY3Rpb24gaXNTdWJjbGFzc09mKGFyZ3VtZW50LCBDbGFzcykge1xuICBsZXQgdHlwZU9mID0gZmFsc2U7XG5cbiAgaWYgKGFyZ3VtZW50Lm5hbWUgPT09IENsYXNzLm5hbWUpIHsgLy8vXG4gICAgdHlwZU9mID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBhcmd1bWVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihhcmd1bWVudCk7IC8vL1xuXG4gICAgaWYgKGFyZ3VtZW50KSB7XG4gICAgICB0eXBlT2YgPSBpc1N1YmNsYXNzT2YoYXJndW1lbnQsIENsYXNzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHlwZU9mO1xufVxuIl19