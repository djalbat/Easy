'use strict';

var Element = require('./element'),
    TextElement = require('./textElement');

function createElement(firstArgument, properties) {
  var element = null;

  if (firstArgument !== undefined) {
    for (var _len = arguments.length, childArguments = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      childArguments[_key - 2] = arguments[_key];
    }

    var childElements = childElementsFromChildArguments(childArguments);

    properties = Object.assign({
      childElements: childElements
    }, properties);

    if (false) {} else if (isTypeOf(firstArgument, Element)) {
      var Class = firstArgument; ///

      element = Class.fromProperties(properties);
    } else if (typeof firstArgument === 'function') {
      var elementFunction = firstArgument; ///

      element = elementFunction(properties);
    } else if (typeof firstArgument === 'string') {
      var tagName = firstArgument,
          ///
      html = '<' + tagName + ' />';

      element = Element.fromHTML(Element, html);

      element.applyProperties(properties);
    }
  }

  return element;
}

var React = {
  createElement: createElement
};

module.exports = React;

function childElementsFromChildArguments(childArguments) {
  childArguments = childArguments.reduce(function (childArguments, childArgument) {
    childArguments = childArguments.concat(childArgument);

    return childArguments;
  }, []);

  var childElements = childArguments.map(function (childArgument) {
    var childElement = void 0;

    if (typeof childArgument === 'string') {
      var text = childArgument,
          ///
      textElement = new TextElement(text);

      childElement = textElement;
    } else {
      childElement = childArgument; ///
    }

    return childElement;
  });

  return childElements;
}

function isTypeOf(argument, Class) {
  var typeOf = false;

  if (argument.name === Class.name) {
    ///
    typeOf = true;
  } else {
    argument = Object.getPrototypeOf(argument); ///

    if (argument) {
      typeOf = isTypeOf(argument, Class);
    }
  }

  return typeOf;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9yZWFjdC5qcyJdLCJuYW1lcyI6WyJFbGVtZW50IiwicmVxdWlyZSIsIlRleHRFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImZpcnN0QXJndW1lbnQiLCJwcm9wZXJ0aWVzIiwiZWxlbWVudCIsInVuZGVmaW5lZCIsImNoaWxkQXJndW1lbnRzIiwiY2hpbGRFbGVtZW50cyIsImNoaWxkRWxlbWVudHNGcm9tQ2hpbGRBcmd1bWVudHMiLCJPYmplY3QiLCJhc3NpZ24iLCJpc1R5cGVPZiIsIkNsYXNzIiwiZnJvbVByb3BlcnRpZXMiLCJlbGVtZW50RnVuY3Rpb24iLCJ0YWdOYW1lIiwiaHRtbCIsImZyb21IVE1MIiwiYXBwbHlQcm9wZXJ0aWVzIiwiUmVhY3QiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVkdWNlIiwiY2hpbGRBcmd1bWVudCIsImNvbmNhdCIsIm1hcCIsImNoaWxkRWxlbWVudCIsInRleHQiLCJ0ZXh0RWxlbWVudCIsImFyZ3VtZW50IiwidHlwZU9mIiwibmFtZSIsImdldFByb3RvdHlwZU9mIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxVQUFVQyxRQUFRLFdBQVIsQ0FBaEI7QUFBQSxJQUNNQyxjQUFjRCxRQUFRLGVBQVIsQ0FEcEI7O0FBR0EsU0FBU0UsYUFBVCxDQUF1QkMsYUFBdkIsRUFBc0NDLFVBQXRDLEVBQXFFO0FBQ25FLE1BQUlDLFVBQVUsSUFBZDs7QUFFQSxNQUFJRixrQkFBa0JHLFNBQXRCLEVBQWlDO0FBQUEsc0NBSGtCQyxjQUdsQjtBQUhrQkEsb0JBR2xCO0FBQUE7O0FBQy9CLFFBQU1DLGdCQUFnQkMsZ0NBQWdDRixjQUFoQyxDQUF0Qjs7QUFFQUgsaUJBQWFNLE9BQU9DLE1BQVAsQ0FBYztBQUN6QkgscUJBQWVBO0FBRFUsS0FBZCxFQUVWSixVQUZVLENBQWI7O0FBSUEsUUFBSSxLQUFKLEVBQVcsQ0FFVixDQUZELE1BRU8sSUFBSVEsU0FBU1QsYUFBVCxFQUF3QkosT0FBeEIsQ0FBSixFQUFzQztBQUMzQyxVQUFNYyxRQUFRVixhQUFkLENBRDJDLENBQ2I7O0FBRTlCRSxnQkFBVVEsTUFBTUMsY0FBTixDQUFxQlYsVUFBckIsQ0FBVjtBQUNELEtBSk0sTUFJQSxJQUFJLE9BQU9ELGFBQVAsS0FBeUIsVUFBN0IsRUFBeUM7QUFDOUMsVUFBTVksa0JBQWtCWixhQUF4QixDQUQ4QyxDQUNOOztBQUV4Q0UsZ0JBQVVVLGdCQUFnQlgsVUFBaEIsQ0FBVjtBQUNELEtBSk0sTUFJQSxJQUFJLE9BQU9ELGFBQVAsS0FBeUIsUUFBN0IsRUFBdUM7QUFDNUMsVUFBTWEsVUFBVWIsYUFBaEI7QUFBQSxVQUFnQztBQUMxQmMsbUJBQVdELE9BQVgsUUFETjs7QUFHQVgsZ0JBQVVOLFFBQVFtQixRQUFSLENBQWlCbkIsT0FBakIsRUFBMEJrQixJQUExQixDQUFWOztBQUVBWixjQUFRYyxlQUFSLENBQXdCZixVQUF4QjtBQUNEO0FBQ0Y7O0FBRUQsU0FBT0MsT0FBUDtBQUNEOztBQUVELElBQU1lLFFBQVE7QUFDWmxCLGlCQUFlQTtBQURILENBQWQ7O0FBSUFtQixPQUFPQyxPQUFQLEdBQWlCRixLQUFqQjs7QUFFQSxTQUFTWCwrQkFBVCxDQUF5Q0YsY0FBekMsRUFBeUQ7QUFDdkRBLG1CQUFpQkEsZUFBZWdCLE1BQWYsQ0FBc0IsVUFBU2hCLGNBQVQsRUFBeUJpQixhQUF6QixFQUF3QztBQUM3RWpCLHFCQUFpQkEsZUFBZWtCLE1BQWYsQ0FBc0JELGFBQXRCLENBQWpCOztBQUVBLFdBQU9qQixjQUFQO0FBQ0QsR0FKZ0IsRUFJZCxFQUpjLENBQWpCOztBQU1BLE1BQU1DLGdCQUFnQkQsZUFBZW1CLEdBQWYsQ0FBbUIsVUFBU0YsYUFBVCxFQUF3QjtBQUMvRCxRQUFJRyxxQkFBSjs7QUFFQSxRQUFJLE9BQU9ILGFBQVAsS0FBeUIsUUFBN0IsRUFBdUM7QUFDckMsVUFBTUksT0FBT0osYUFBYjtBQUFBLFVBQTRCO0FBQ3RCSyxvQkFBYyxJQUFJNUIsV0FBSixDQUFnQjJCLElBQWhCLENBRHBCOztBQUdBRCxxQkFBZUUsV0FBZjtBQUNELEtBTEQsTUFLTztBQUNMRixxQkFBZUgsYUFBZixDQURLLENBQzBCO0FBQ2hDOztBQUVELFdBQU9HLFlBQVA7QUFDRCxHQWJxQixDQUF0Qjs7QUFlQSxTQUFPbkIsYUFBUDtBQUNEOztBQUVELFNBQVNJLFFBQVQsQ0FBa0JrQixRQUFsQixFQUE0QmpCLEtBQTVCLEVBQW1DO0FBQ2pDLE1BQUlrQixTQUFTLEtBQWI7O0FBRUEsTUFBSUQsU0FBU0UsSUFBVCxLQUFrQm5CLE1BQU1tQixJQUE1QixFQUFrQztBQUFFO0FBQ2xDRCxhQUFTLElBQVQ7QUFDRCxHQUZELE1BRU87QUFDTEQsZUFBV3BCLE9BQU91QixjQUFQLENBQXNCSCxRQUF0QixDQUFYLENBREssQ0FDdUM7O0FBRTVDLFFBQUlBLFFBQUosRUFBYztBQUNaQyxlQUFTbkIsU0FBU2tCLFFBQVQsRUFBbUJqQixLQUFuQixDQUFUO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPa0IsTUFBUDtBQUNEIiwiZmlsZSI6InJlYWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBFbGVtZW50ID0gcmVxdWlyZSgnLi9lbGVtZW50JyksXG4gICAgICBUZXh0RWxlbWVudCA9IHJlcXVpcmUoJy4vdGV4dEVsZW1lbnQnKTtcblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudChmaXJzdEFyZ3VtZW50LCBwcm9wZXJ0aWVzLCAuLi5jaGlsZEFyZ3VtZW50cykge1xuICBsZXQgZWxlbWVudCA9IG51bGw7XG5cbiAgaWYgKGZpcnN0QXJndW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGNoaWxkRWxlbWVudHMgPSBjaGlsZEVsZW1lbnRzRnJvbUNoaWxkQXJndW1lbnRzKGNoaWxkQXJndW1lbnRzKTtcblxuICAgIHByb3BlcnRpZXMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIGNoaWxkRWxlbWVudHM6IGNoaWxkRWxlbWVudHNcbiAgICB9LCBwcm9wZXJ0aWVzKTtcblxuICAgIGlmIChmYWxzZSkge1xuXG4gICAgfSBlbHNlIGlmIChpc1R5cGVPZihmaXJzdEFyZ3VtZW50LCBFbGVtZW50KSkge1xuICAgICAgY29uc3QgQ2xhc3MgPSBmaXJzdEFyZ3VtZW50OyAgLy8vXG5cbiAgICAgIGVsZW1lbnQgPSBDbGFzcy5mcm9tUHJvcGVydGllcyhwcm9wZXJ0aWVzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBmaXJzdEFyZ3VtZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zdCBlbGVtZW50RnVuY3Rpb24gPSBmaXJzdEFyZ3VtZW50OyAgLy8vXG5cbiAgICAgIGVsZW1lbnQgPSBlbGVtZW50RnVuY3Rpb24ocHJvcGVydGllcyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZmlyc3RBcmd1bWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IHRhZ05hbWUgPSBmaXJzdEFyZ3VtZW50LCAgLy8vXG4gICAgICAgICAgICBodG1sID0gYDwke3RhZ05hbWV9IC8+YDtcblxuICAgICAgZWxlbWVudCA9IEVsZW1lbnQuZnJvbUhUTUwoRWxlbWVudCwgaHRtbCk7XG5cbiAgICAgIGVsZW1lbnQuYXBwbHlQcm9wZXJ0aWVzKHByb3BlcnRpZXMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5jb25zdCBSZWFjdCA9IHtcbiAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdDtcblxuZnVuY3Rpb24gY2hpbGRFbGVtZW50c0Zyb21DaGlsZEFyZ3VtZW50cyhjaGlsZEFyZ3VtZW50cykge1xuICBjaGlsZEFyZ3VtZW50cyA9IGNoaWxkQXJndW1lbnRzLnJlZHVjZShmdW5jdGlvbihjaGlsZEFyZ3VtZW50cywgY2hpbGRBcmd1bWVudCkge1xuICAgIGNoaWxkQXJndW1lbnRzID0gY2hpbGRBcmd1bWVudHMuY29uY2F0KGNoaWxkQXJndW1lbnQpO1xuXG4gICAgcmV0dXJuIGNoaWxkQXJndW1lbnRzO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgY2hpbGRFbGVtZW50cyA9IGNoaWxkQXJndW1lbnRzLm1hcChmdW5jdGlvbihjaGlsZEFyZ3VtZW50KSB7XG4gICAgbGV0IGNoaWxkRWxlbWVudDtcbiAgICBcbiAgICBpZiAodHlwZW9mIGNoaWxkQXJndW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gY2hpbGRBcmd1bWVudCwgLy8vXG4gICAgICAgICAgICB0ZXh0RWxlbWVudCA9IG5ldyBUZXh0RWxlbWVudCh0ZXh0KTtcblxuICAgICAgY2hpbGRFbGVtZW50ID0gdGV4dEVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoaWxkRWxlbWVudCA9IGNoaWxkQXJndW1lbnQ7ICAvLy9cbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGRFbGVtZW50O1xuICB9KTtcblxuICByZXR1cm4gY2hpbGRFbGVtZW50cztcbn1cblxuZnVuY3Rpb24gaXNUeXBlT2YoYXJndW1lbnQsIENsYXNzKSB7XG4gIGxldCB0eXBlT2YgPSBmYWxzZTtcblxuICBpZiAoYXJndW1lbnQubmFtZSA9PT0gQ2xhc3MubmFtZSkgeyAvLy9cbiAgICB0eXBlT2YgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGFyZ3VtZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGFyZ3VtZW50KTsgLy8vXG5cbiAgICBpZiAoYXJndW1lbnQpIHtcbiAgICAgIHR5cGVPZiA9IGlzVHlwZU9mKGFyZ3VtZW50LCBDbGFzcyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHR5cGVPZjtcbn1cbiJdfQ==