"use strict";

var Element = require("./element"),
    arrayUtilities = require("./utilities/array"),
    elementsUtilities = require("./utilities/elements");

var flatten = arrayUtilities.flatten,
    removeFalseyElements = elementsUtilities.removeFalseyElements,
    replaceStringsWithTextElements = elementsUtilities.replaceStringsWithTextElements;

function createElement(firstArgument, properties) {
  var element = null;

  if (firstArgument !== undefined) {
    for (var _len = arguments.length, childArguments = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      childArguments[_key - 2] = arguments[_key];
    }

    var childElements = childElementsFromChildArguments(childArguments);
    properties = Object.assign({
      childElements: childElements
    }, properties);

    if (false) {///
    } else if (isSubclassOf(firstArgument, Element)) {
      var Class = firstArgument; ///

      element = Class.fromProperties(properties);
    } else if (typeof firstArgument === "string") {
      var tagName = firstArgument; ///

      element = Element.fromTagName(tagName, properties);
    } else if (typeof firstArgument === "function") {
      var elementFunction = firstArgument; ///

      element = elementFunction(properties);
    }
  }

  return element;
}

var React = {
  createElement: createElement
};
module.exports = React;

function childElementsFromChildArguments(childArguments) {
  childArguments = flatten(childArguments); ///

  var childElements = childArguments; ///

  childElements = removeFalseyElements(childElements);
  childElements = replaceStringsWithTextElements(childElements);
  return childElements;
}

function isSubclassOf(argument, Class) {
  var typeOf = false;

  if (argument.name === Class.name) {
    ///
    typeOf = true;
  } else {
    argument = Object.getPrototypeOf(argument); ///

    if (argument) {
      typeOf = isSubclassOf(argument, Class);
    }
  }

  return typeOf;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlYWN0LmpzIl0sIm5hbWVzIjpbIkVsZW1lbnQiLCJyZXF1aXJlIiwiYXJyYXlVdGlsaXRpZXMiLCJlbGVtZW50c1V0aWxpdGllcyIsImZsYXR0ZW4iLCJyZW1vdmVGYWxzZXlFbGVtZW50cyIsInJlcGxhY2VTdHJpbmdzV2l0aFRleHRFbGVtZW50cyIsImNyZWF0ZUVsZW1lbnQiLCJmaXJzdEFyZ3VtZW50IiwicHJvcGVydGllcyIsImVsZW1lbnQiLCJ1bmRlZmluZWQiLCJjaGlsZEFyZ3VtZW50cyIsImNoaWxkRWxlbWVudHMiLCJjaGlsZEVsZW1lbnRzRnJvbUNoaWxkQXJndW1lbnRzIiwiT2JqZWN0IiwiYXNzaWduIiwiaXNTdWJjbGFzc09mIiwiQ2xhc3MiLCJmcm9tUHJvcGVydGllcyIsInRhZ05hbWUiLCJmcm9tVGFnTmFtZSIsImVsZW1lbnRGdW5jdGlvbiIsIlJlYWN0IiwibW9kdWxlIiwiZXhwb3J0cyIsImFyZ3VtZW50IiwidHlwZU9mIiwibmFtZSIsImdldFByb3RvdHlwZU9mIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQXZCO0FBQUEsSUFDTUMsY0FBYyxHQUFHRCxPQUFPLENBQUMsbUJBQUQsQ0FEOUI7QUFBQSxJQUVNRSxpQkFBaUIsR0FBR0YsT0FBTyxDQUFDLHNCQUFELENBRmpDOztBQUlNLElBQUVHLE9BQUYsR0FBY0YsY0FBZCxDQUFFRSxPQUFGO0FBQUEsSUFDRUMsb0JBREYsR0FDMkRGLGlCQUQzRCxDQUNFRSxvQkFERjtBQUFBLElBQ3dCQyw4QkFEeEIsR0FDMkRILGlCQUQzRCxDQUN3QkcsOEJBRHhCOztBQUdOLFNBQVNDLGFBQVQsQ0FBdUJDLGFBQXZCLEVBQXNDQyxVQUF0QyxFQUFxRTtBQUNuRSxNQUFJQyxPQUFPLEdBQUcsSUFBZDs7QUFFQSxNQUFJRixhQUFhLEtBQUtHLFNBQXRCLEVBQWlDO0FBQUEsc0NBSGtCQyxjQUdsQjtBQUhrQkEsTUFBQUEsY0FHbEI7QUFBQTs7QUFDL0IsUUFBTUMsYUFBYSxHQUFHQywrQkFBK0IsQ0FBQ0YsY0FBRCxDQUFyRDtBQUVBSCxJQUFBQSxVQUFVLEdBQUdNLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjO0FBQ3pCSCxNQUFBQSxhQUFhLEVBQWJBO0FBRHlCLEtBQWQsRUFFVkosVUFGVSxDQUFiOztBQUlBLFFBQUksS0FBSixFQUFXLENBQ1Q7QUFDRCxLQUZELE1BRU8sSUFBSVEsWUFBWSxDQUFDVCxhQUFELEVBQWdCUixPQUFoQixDQUFoQixFQUEwQztBQUMvQyxVQUFNa0IsS0FBSyxHQUFHVixhQUFkLENBRCtDLENBQ2pCOztBQUU5QkUsTUFBQUEsT0FBTyxHQUFHUSxLQUFLLENBQUNDLGNBQU4sQ0FBcUJWLFVBQXJCLENBQVY7QUFDRCxLQUpNLE1BSUEsSUFBSSxPQUFPRCxhQUFQLEtBQXlCLFFBQTdCLEVBQXVDO0FBQzVDLFVBQU1ZLE9BQU8sR0FBR1osYUFBaEIsQ0FENEMsQ0FDYjs7QUFFL0JFLE1BQUFBLE9BQU8sR0FBR1YsT0FBTyxDQUFDcUIsV0FBUixDQUFvQkQsT0FBcEIsRUFBNkJYLFVBQTdCLENBQVY7QUFDRCxLQUpNLE1BSUEsSUFBSSxPQUFPRCxhQUFQLEtBQXlCLFVBQTdCLEVBQXlDO0FBQzlDLFVBQU1jLGVBQWUsR0FBR2QsYUFBeEIsQ0FEOEMsQ0FDTjs7QUFFeENFLE1BQUFBLE9BQU8sR0FBR1ksZUFBZSxDQUFDYixVQUFELENBQXpCO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPQyxPQUFQO0FBQ0Q7O0FBRUQsSUFBTWEsS0FBSyxHQUFHO0FBQ1poQixFQUFBQSxhQUFhLEVBQUVBO0FBREgsQ0FBZDtBQUlBaUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCRixLQUFqQjs7QUFFQSxTQUFTVCwrQkFBVCxDQUF5Q0YsY0FBekMsRUFBeUQ7QUFDdkRBLEVBQUFBLGNBQWMsR0FBR1IsT0FBTyxDQUFDUSxjQUFELENBQXhCLENBRHVELENBQ2I7O0FBRTFDLE1BQUlDLGFBQWEsR0FBR0QsY0FBcEIsQ0FIdUQsQ0FHbkI7O0FBRXBDQyxFQUFBQSxhQUFhLEdBQUdSLG9CQUFvQixDQUFDUSxhQUFELENBQXBDO0FBRUFBLEVBQUFBLGFBQWEsR0FBR1AsOEJBQThCLENBQUNPLGFBQUQsQ0FBOUM7QUFFQSxTQUFPQSxhQUFQO0FBQ0Q7O0FBRUQsU0FBU0ksWUFBVCxDQUFzQlMsUUFBdEIsRUFBZ0NSLEtBQWhDLEVBQXVDO0FBQ3JDLE1BQUlTLE1BQU0sR0FBRyxLQUFiOztBQUVBLE1BQUlELFFBQVEsQ0FBQ0UsSUFBVCxLQUFrQlYsS0FBSyxDQUFDVSxJQUE1QixFQUFrQztBQUFFO0FBQ2xDRCxJQUFBQSxNQUFNLEdBQUcsSUFBVDtBQUNELEdBRkQsTUFFTztBQUNMRCxJQUFBQSxRQUFRLEdBQUdYLE1BQU0sQ0FBQ2MsY0FBUCxDQUFzQkgsUUFBdEIsQ0FBWCxDQURLLENBQ3VDOztBQUU1QyxRQUFJQSxRQUFKLEVBQWM7QUFDWkMsTUFBQUEsTUFBTSxHQUFHVixZQUFZLENBQUNTLFFBQUQsRUFBV1IsS0FBWCxDQUFyQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBT1MsTUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IEVsZW1lbnQgPSByZXF1aXJlKFwiLi9lbGVtZW50XCIpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKFwiLi91dGlsaXRpZXMvYXJyYXlcIiksXG4gICAgICBlbGVtZW50c1V0aWxpdGllcyA9IHJlcXVpcmUoXCIuL3V0aWxpdGllcy9lbGVtZW50c1wiKTtcblxuY29uc3QgeyBmbGF0dGVuIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgcmVtb3ZlRmFsc2V5RWxlbWVudHMsIHJlcGxhY2VTdHJpbmdzV2l0aFRleHRFbGVtZW50cyB9ID0gZWxlbWVudHNVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQoZmlyc3RBcmd1bWVudCwgcHJvcGVydGllcywgLi4uY2hpbGRBcmd1bWVudHMpIHtcbiAgbGV0IGVsZW1lbnQgPSBudWxsO1xuXG4gIGlmIChmaXJzdEFyZ3VtZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBjaGlsZEVsZW1lbnRzID0gY2hpbGRFbGVtZW50c0Zyb21DaGlsZEFyZ3VtZW50cyhjaGlsZEFyZ3VtZW50cyk7XG5cbiAgICBwcm9wZXJ0aWVzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICBjaGlsZEVsZW1lbnRzXG4gICAgfSwgcHJvcGVydGllcyk7XG5cbiAgICBpZiAoZmFsc2UpIHtcbiAgICAgIC8vL1xuICAgIH0gZWxzZSBpZiAoaXNTdWJjbGFzc09mKGZpcnN0QXJndW1lbnQsIEVsZW1lbnQpKSB7XG4gICAgICBjb25zdCBDbGFzcyA9IGZpcnN0QXJndW1lbnQ7ICAvLy9cblxuICAgICAgZWxlbWVudCA9IENsYXNzLmZyb21Qcm9wZXJ0aWVzKHByb3BlcnRpZXMpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGZpcnN0QXJndW1lbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbnN0IHRhZ05hbWUgPSBmaXJzdEFyZ3VtZW50OyAvLy9cblxuICAgICAgZWxlbWVudCA9IEVsZW1lbnQuZnJvbVRhZ05hbWUodGFnTmFtZSwgcHJvcGVydGllcyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZmlyc3RBcmd1bWVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjb25zdCBlbGVtZW50RnVuY3Rpb24gPSBmaXJzdEFyZ3VtZW50OyAgLy8vXG5cbiAgICAgIGVsZW1lbnQgPSBlbGVtZW50RnVuY3Rpb24ocHJvcGVydGllcyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbmNvbnN0IFJlYWN0ID0ge1xuICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0O1xuXG5mdW5jdGlvbiBjaGlsZEVsZW1lbnRzRnJvbUNoaWxkQXJndW1lbnRzKGNoaWxkQXJndW1lbnRzKSB7XG4gIGNoaWxkQXJndW1lbnRzID0gZmxhdHRlbihjaGlsZEFyZ3VtZW50cyk7IC8vL1xuXG4gIGxldCBjaGlsZEVsZW1lbnRzID0gY2hpbGRBcmd1bWVudHM7IC8vL1xuXG4gIGNoaWxkRWxlbWVudHMgPSByZW1vdmVGYWxzZXlFbGVtZW50cyhjaGlsZEVsZW1lbnRzKTtcblxuICBjaGlsZEVsZW1lbnRzID0gcmVwbGFjZVN0cmluZ3NXaXRoVGV4dEVsZW1lbnRzKGNoaWxkRWxlbWVudHMpO1xuXG4gIHJldHVybiBjaGlsZEVsZW1lbnRzO1xufVxuXG5mdW5jdGlvbiBpc1N1YmNsYXNzT2YoYXJndW1lbnQsIENsYXNzKSB7XG4gIGxldCB0eXBlT2YgPSBmYWxzZTtcblxuICBpZiAoYXJndW1lbnQubmFtZSA9PT0gQ2xhc3MubmFtZSkgeyAvLy9cbiAgICB0eXBlT2YgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGFyZ3VtZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGFyZ3VtZW50KTsgLy8vXG5cbiAgICBpZiAoYXJndW1lbnQpIHtcbiAgICAgIHR5cGVPZiA9IGlzU3ViY2xhc3NPZihhcmd1bWVudCwgQ2xhc3MpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0eXBlT2Y7XG59XG4iXX0=