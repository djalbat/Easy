"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _element = _interopRequireDefault(require("./element"));

var _array = require("./utilities/array");

var _elements = require("./utilities/elements");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function createElement(firstArgument, properties) {
  var element = null;

  if (firstArgument !== undefined) {
    for (var _len = arguments.length, remainingArguments = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      remainingArguments[_key - 2] = arguments[_key];
    }

    var childElements = childElementsFromRemainingArguments(remainingArguments);
    properties = Object.assign({
      childElements: childElements
    }, properties);

    if (false) {///
    } else if (isSubclassOf(firstArgument, _element["default"])) {
      var Class = firstArgument; ///

      element = Class.fromClass(Class, properties);
    } else if (typeof firstArgument === "string") {
      var tagName = firstArgument; ///

      element = _element["default"].fromTagName(tagName, properties);
    } else if (typeof firstArgument === "function") {
      var elementFunction = firstArgument; ///

      element = elementFunction(properties);
    }
  }

  return element;
}

var React = {
  createElement: createElement
};
var _default = React;
exports["default"] = _default;

function childElementsFromRemainingArguments(remainingArguments) {
  remainingArguments = (0, _array.flatten)(remainingArguments); ///

  var childElements = remainingArguments; ///

  childElements = (0, _elements.removeFalseyElements)(childElements);
  childElements = (0, _elements.replaceStringsWithTextElements)(childElements);
  return childElements;
}

function isSubclassOf(argument, Class) {
  var typeOf = false;

  if (argument.name === Class.name) {
    ///
    typeOf = true;
  } else {
    argument = Object.getPrototypeOf(argument); ///

    if (argument) {
      typeOf = isSubclassOf(argument, Class);
    }
  }

  return typeOf;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlYWN0LmpzIl0sIm5hbWVzIjpbImNyZWF0ZUVsZW1lbnQiLCJmaXJzdEFyZ3VtZW50IiwicHJvcGVydGllcyIsImVsZW1lbnQiLCJ1bmRlZmluZWQiLCJyZW1haW5pbmdBcmd1bWVudHMiLCJjaGlsZEVsZW1lbnRzIiwiY2hpbGRFbGVtZW50c0Zyb21SZW1haW5pbmdBcmd1bWVudHMiLCJPYmplY3QiLCJhc3NpZ24iLCJpc1N1YmNsYXNzT2YiLCJFbGVtZW50IiwiQ2xhc3MiLCJmcm9tQ2xhc3MiLCJ0YWdOYW1lIiwiZnJvbVRhZ05hbWUiLCJlbGVtZW50RnVuY3Rpb24iLCJSZWFjdCIsImFyZ3VtZW50IiwidHlwZU9mIiwibmFtZSIsImdldFByb3RvdHlwZU9mIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQUVBOztBQUVBOztBQUNBOzs7O0FBRUEsU0FBU0EsYUFBVCxDQUF1QkMsYUFBdkIsRUFBc0NDLFVBQXRDLEVBQXlFO0FBQ3ZFLE1BQUlDLE9BQU8sR0FBRyxJQUFkOztBQUVBLE1BQUlGLGFBQWEsS0FBS0csU0FBdEIsRUFBaUM7QUFBQSxzQ0FIa0JDLGtCQUdsQjtBQUhrQkEsTUFBQUEsa0JBR2xCO0FBQUE7O0FBQy9CLFFBQU1DLGFBQWEsR0FBR0MsbUNBQW1DLENBQUNGLGtCQUFELENBQXpEO0FBRUFILElBQUFBLFVBQVUsR0FBR00sTUFBTSxDQUFDQyxNQUFQLENBQWM7QUFDekJILE1BQUFBLGFBQWEsRUFBYkE7QUFEeUIsS0FBZCxFQUVWSixVQUZVLENBQWI7O0FBSUEsUUFBSSxLQUFKLEVBQVcsQ0FDVDtBQUNELEtBRkQsTUFFTyxJQUFJUSxZQUFZLENBQUNULGFBQUQsRUFBZ0JVLG1CQUFoQixDQUFoQixFQUEwQztBQUMvQyxVQUFNQyxLQUFLLEdBQUdYLGFBQWQsQ0FEK0MsQ0FDakI7O0FBRTlCRSxNQUFBQSxPQUFPLEdBQUdTLEtBQUssQ0FBQ0MsU0FBTixDQUFnQkQsS0FBaEIsRUFBdUJWLFVBQXZCLENBQVY7QUFDRCxLQUpNLE1BSUEsSUFBSSxPQUFPRCxhQUFQLEtBQXlCLFFBQTdCLEVBQXVDO0FBQzVDLFVBQU1hLE9BQU8sR0FBR2IsYUFBaEIsQ0FENEMsQ0FDYjs7QUFFL0JFLE1BQUFBLE9BQU8sR0FBR1Esb0JBQVFJLFdBQVIsQ0FBb0JELE9BQXBCLEVBQTZCWixVQUE3QixDQUFWO0FBQ0QsS0FKTSxNQUlBLElBQUksT0FBT0QsYUFBUCxLQUF5QixVQUE3QixFQUF5QztBQUM5QyxVQUFNZSxlQUFlLEdBQUdmLGFBQXhCLENBRDhDLENBQ047O0FBRXhDRSxNQUFBQSxPQUFPLEdBQUdhLGVBQWUsQ0FBQ2QsVUFBRCxDQUF6QjtBQUNEO0FBQ0Y7O0FBRUQsU0FBT0MsT0FBUDtBQUNEOztBQUVELElBQU1jLEtBQUssR0FBRztBQUNaakIsRUFBQUEsYUFBYSxFQUFiQTtBQURZLENBQWQ7ZUFJZWlCLEs7OztBQUVmLFNBQVNWLG1DQUFULENBQTZDRixrQkFBN0MsRUFBaUU7QUFDL0RBLEVBQUFBLGtCQUFrQixHQUFHLG9CQUFRQSxrQkFBUixDQUFyQixDQUQrRCxDQUNiOztBQUVsRCxNQUFJQyxhQUFhLEdBQUdELGtCQUFwQixDQUgrRCxDQUd2Qjs7QUFFeENDLEVBQUFBLGFBQWEsR0FBRyxvQ0FBcUJBLGFBQXJCLENBQWhCO0FBRUFBLEVBQUFBLGFBQWEsR0FBRyw4Q0FBK0JBLGFBQS9CLENBQWhCO0FBRUEsU0FBT0EsYUFBUDtBQUNEOztBQUVELFNBQVNJLFlBQVQsQ0FBc0JRLFFBQXRCLEVBQWdDTixLQUFoQyxFQUF1QztBQUNyQyxNQUFJTyxNQUFNLEdBQUcsS0FBYjs7QUFFQSxNQUFJRCxRQUFRLENBQUNFLElBQVQsS0FBa0JSLEtBQUssQ0FBQ1EsSUFBNUIsRUFBa0M7QUFBRTtBQUNsQ0QsSUFBQUEsTUFBTSxHQUFHLElBQVQ7QUFDRCxHQUZELE1BRU87QUFDTEQsSUFBQUEsUUFBUSxHQUFHVixNQUFNLENBQUNhLGNBQVAsQ0FBc0JILFFBQXRCLENBQVgsQ0FESyxDQUN1Qzs7QUFFNUMsUUFBSUEsUUFBSixFQUFjO0FBQ1pDLE1BQUFBLE1BQU0sR0FBR1QsWUFBWSxDQUFDUSxRQUFELEVBQVdOLEtBQVgsQ0FBckI7QUFDRDtBQUNGOztBQUVELFNBQU9PLE1BQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgRWxlbWVudCBmcm9tIFwiLi9lbGVtZW50XCI7XG5cbmltcG9ydCB7IGZsYXR0ZW4gfSBmcm9tIFwiLi91dGlsaXRpZXMvYXJyYXlcIjtcbmltcG9ydCB7IHJlbW92ZUZhbHNleUVsZW1lbnRzLCByZXBsYWNlU3RyaW5nc1dpdGhUZXh0RWxlbWVudHMgfSBmcm9tIFwiLi91dGlsaXRpZXMvZWxlbWVudHNcIjtcblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudChmaXJzdEFyZ3VtZW50LCBwcm9wZXJ0aWVzLCAuLi5yZW1haW5pbmdBcmd1bWVudHMpIHtcbiAgbGV0IGVsZW1lbnQgPSBudWxsO1xuXG4gIGlmIChmaXJzdEFyZ3VtZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBjaGlsZEVsZW1lbnRzID0gY2hpbGRFbGVtZW50c0Zyb21SZW1haW5pbmdBcmd1bWVudHMocmVtYWluaW5nQXJndW1lbnRzKTtcblxuICAgIHByb3BlcnRpZXMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIGNoaWxkRWxlbWVudHNcbiAgICB9LCBwcm9wZXJ0aWVzKTtcblxuICAgIGlmIChmYWxzZSkge1xuICAgICAgLy8vXG4gICAgfSBlbHNlIGlmIChpc1N1YmNsYXNzT2YoZmlyc3RBcmd1bWVudCwgRWxlbWVudCkpIHtcbiAgICAgIGNvbnN0IENsYXNzID0gZmlyc3RBcmd1bWVudDsgIC8vL1xuXG4gICAgICBlbGVtZW50ID0gQ2xhc3MuZnJvbUNsYXNzKENsYXNzLCBwcm9wZXJ0aWVzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBmaXJzdEFyZ3VtZW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBjb25zdCB0YWdOYW1lID0gZmlyc3RBcmd1bWVudDsgLy8vXG5cbiAgICAgIGVsZW1lbnQgPSBFbGVtZW50LmZyb21UYWdOYW1lKHRhZ05hbWUsIHByb3BlcnRpZXMpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGZpcnN0QXJndW1lbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY29uc3QgZWxlbWVudEZ1bmN0aW9uID0gZmlyc3RBcmd1bWVudDsgIC8vL1xuXG4gICAgICBlbGVtZW50ID0gZWxlbWVudEZ1bmN0aW9uKHByb3BlcnRpZXMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5jb25zdCBSZWFjdCA9IHtcbiAgY3JlYXRlRWxlbWVudFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUmVhY3Q7XG5cbmZ1bmN0aW9uIGNoaWxkRWxlbWVudHNGcm9tUmVtYWluaW5nQXJndW1lbnRzKHJlbWFpbmluZ0FyZ3VtZW50cykge1xuICByZW1haW5pbmdBcmd1bWVudHMgPSBmbGF0dGVuKHJlbWFpbmluZ0FyZ3VtZW50cyk7IC8vL1xuXG4gIGxldCBjaGlsZEVsZW1lbnRzID0gcmVtYWluaW5nQXJndW1lbnRzOyAvLy9cblxuICBjaGlsZEVsZW1lbnRzID0gcmVtb3ZlRmFsc2V5RWxlbWVudHMoY2hpbGRFbGVtZW50cyk7XG5cbiAgY2hpbGRFbGVtZW50cyA9IHJlcGxhY2VTdHJpbmdzV2l0aFRleHRFbGVtZW50cyhjaGlsZEVsZW1lbnRzKTtcblxuICByZXR1cm4gY2hpbGRFbGVtZW50cztcbn1cblxuZnVuY3Rpb24gaXNTdWJjbGFzc09mKGFyZ3VtZW50LCBDbGFzcykge1xuICBsZXQgdHlwZU9mID0gZmFsc2U7XG5cbiAgaWYgKGFyZ3VtZW50Lm5hbWUgPT09IENsYXNzLm5hbWUpIHsgLy8vXG4gICAgdHlwZU9mID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBhcmd1bWVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihhcmd1bWVudCk7IC8vL1xuXG4gICAgaWYgKGFyZ3VtZW50KSB7XG4gICAgICB0eXBlT2YgPSBpc1N1YmNsYXNzT2YoYXJndW1lbnQsIENsYXNzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHlwZU9mO1xufVxuIl19