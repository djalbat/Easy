'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var TextElement = require('../textElement');

function appendTo(parentElement) {
  var parentContext = this.parentContext ? this.parentContext() : this.context;

  if (parentContext !== undefined) {
    if (!parentElement.hasOwnProperty('context')) {
      var context = {};

      Object.assign(parentElement, {
        context: context
      });
    }

    parentElement.context = Object.assign(parentElement.context, parentContext);
  }

  parentElement.append(this);

  var prototype = Object.getPrototypeOf(this),
      prototypeConstructor = prototype.constructor,
      ///
  prototypeConstructorName = prototypeConstructor.name; ///

  if (prototypeConstructorName === 'Element') {
    delete this.context;
  }
}

function removeFrom(parentElement) {
  parentElement.remove(this);
}

function assignContext() {
  var names = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object.keys(this.context);
  var thenDelete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  names.forEach(function (name) {
    var value = this.context[name],
        descriptor = {
      value: value
    };

    Object.defineProperty(this, name, descriptor);

    if (thenDelete) {
      delete this.context[name];
    }
  }.bind(this));

  if (thenDelete) {
    var _names = Object.keys(this.context),
        namesLength = _names.length; ///

    if (namesLength === 0) {
      delete this.context;
    }
  }
}

function applyProperties() {
  var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var defaultProperties = arguments[1];
  var ignoredProperties = arguments[2];

  assign(properties, defaultProperties);

  var childElements = childElementsFromElementAndProperties(this, properties);

  unassign(properties, ignoredProperties);

  var names = Object.keys(properties);

  names.forEach(function (name) {
    var value = properties[name];

    if (false) {} else if (isHandlerName(name)) {
      addHandler(this, name, value);
    } else if (isAttributeName(name)) {
      addAttribute(this, name, value);
    } else {
      if (!this.hasOwnProperty('properties')) {
        var _properties = {};

        Object.assign(this, {
          properties: _properties
        });
      }

      this.properties[name] = value;
    }
  }.bind(this));

  var parentElement = this; ///

  childElements.forEach(function (childElement) {
    childElement.appendTo(parentElement);
  }.bind(this));
}

function getProperties() {
  return this.properties;
}

function getContext() {
  return this.context;
}

function getState() {
  return this.state;
}

function setState(state) {
  this.state = state;
}

var jsxMixin = {
  appendTo: appendTo,
  removeFrom: removeFrom,
  assignContext: assignContext,
  applyProperties: applyProperties,
  getProperties: getProperties,
  getContext: getContext,
  getState: getState,
  setState: setState
};

module.exports = jsxMixin;

function childElementsFromElementAndProperties(element, properties) {
  var childElements = element.childElements ? element.childElements(properties) : properties.childElements;

  childElements = childElements !== undefined ? childElements instanceof Array ? childElements : [childElements] : [];

  childElements = childElements.map(function (childElement) {
    if (typeof childElement === 'string') {
      var text = childElement,
          ///
      textElement = new TextElement(text);

      childElement = textElement; ///
    }

    return childElement;
  });

  return childElements;
}

function unassign(properties) {
  var ignoredProperties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var ignoredPropertyNames = ignoredProperties; ///

  ignoredPropertyNames.forEach(function (ignoredPropertyName) {
    if (properties.hasOwnProperty(ignoredPropertyName)) {
      delete properties[ignoredPropertyName];
    }
  });
}

function assign(properties) {
  var defaultProperties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var defaultPropertyNames = Object.keys(defaultProperties);

  defaultPropertyNames.forEach(function (defaultPropertyName) {
    if (!properties.hasOwnProperty(defaultPropertyName)) {
      var defaultPropertyValue = defaultProperties[defaultPropertyName];

      properties[defaultPropertyName] = defaultPropertyValue;
    }
  });
}

function addHandler(element, name, value) {
  var eventType = name.substr(2).toLowerCase(),
      ///
  handler = value; ///

  element.on(eventType, handler);
}

function addAttribute(element, name, value) {
  if (name === 'className') {
    name = 'class';
  }

  if (name === 'htmlFor') {
    name = 'for';
  }

  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
    var keys = Object.keys(value);

    keys.forEach(function (key) {
      element.domElement[name][key] = value[key];
    }.bind(this));
  } else if (typeof value === 'boolean') {
    if (value) {
      value = name; ///

      element.addAttribute(name, value);
    }
  } else {
    element.addAttribute(name, value);
  }
}

function isHandlerName(name) {
  return name.match(/^on/);
}

function isAttributeName(name) {
  return attributeNames.includes(name);
}

var attributeNames = ['accept', 'acceptCharset', 'accessKey', 'action', 'allowFullScreen', 'allowTransparency', 'alt', 'async', 'autoComplete', 'autoFocus', 'autoPlay', 'capture', 'cellPadding', 'cellSpacing', 'challenge', 'charSet', 'checked', 'cite', 'classID', 'className', 'colSpan', 'cols', 'content', 'contentEditable', 'contextMenu', 'controls', 'coords', 'crossOrigin', 'data', 'dateTime', 'default', 'defer', 'dir', 'disabled', 'download', 'draggable', 'encType', 'form', 'formAction', 'formEncType', 'formMethod', 'formNoValidate', 'formTarget', 'frameBorder', 'headers', 'height', 'hidden', 'high', 'href', 'hrefLang', 'htmlFor', 'httpEquiv', 'icon', 'id', 'inputMode', 'integrity', 'is', 'keyParams', 'keyType', 'kind', 'label', 'lang', 'list', 'loop', 'low', 'manifest', 'marginHeight', 'marginWidth', 'max', 'maxLength', 'media', 'mediaGroup', 'method', 'min', 'minLength', 'multiple', 'muted', 'name', 'noValidate', 'nonce', 'open', 'optimum', 'pattern', 'placeholder', 'poster', 'preload', 'profile', 'radioGroup', 'readOnly', 'rel', 'required', 'reversed', 'role', 'rowSpan', 'rows', 'sandbox', 'scope', 'scoped', 'scrolling', 'seamless', 'selected', 'shape', 'size', 'sizes', 'span', 'spellCheck', 'src', 'srcDoc', 'srcLang', 'srcSet', 'start', 'step', 'style', 'summary', 'tabIndex', 'target', 'title', 'type', 'useMap', 'value', 'width', 'wmode', 'wrap'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9qc3guanMiXSwibmFtZXMiOlsiVGV4dEVsZW1lbnQiLCJyZXF1aXJlIiwiYXBwZW5kVG8iLCJwYXJlbnRFbGVtZW50IiwicGFyZW50Q29udGV4dCIsImNvbnRleHQiLCJ1bmRlZmluZWQiLCJoYXNPd25Qcm9wZXJ0eSIsIk9iamVjdCIsImFzc2lnbiIsImFwcGVuZCIsInByb3RvdHlwZSIsImdldFByb3RvdHlwZU9mIiwicHJvdG90eXBlQ29uc3RydWN0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZUNvbnN0cnVjdG9yTmFtZSIsIm5hbWUiLCJyZW1vdmVGcm9tIiwicmVtb3ZlIiwiYXNzaWduQ29udGV4dCIsIm5hbWVzIiwia2V5cyIsInRoZW5EZWxldGUiLCJmb3JFYWNoIiwidmFsdWUiLCJkZXNjcmlwdG9yIiwiZGVmaW5lUHJvcGVydHkiLCJiaW5kIiwibmFtZXNMZW5ndGgiLCJsZW5ndGgiLCJhcHBseVByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwiZGVmYXVsdFByb3BlcnRpZXMiLCJpZ25vcmVkUHJvcGVydGllcyIsImNoaWxkRWxlbWVudHMiLCJjaGlsZEVsZW1lbnRzRnJvbUVsZW1lbnRBbmRQcm9wZXJ0aWVzIiwidW5hc3NpZ24iLCJpc0hhbmRsZXJOYW1lIiwiYWRkSGFuZGxlciIsImlzQXR0cmlidXRlTmFtZSIsImFkZEF0dHJpYnV0ZSIsImNoaWxkRWxlbWVudCIsImdldFByb3BlcnRpZXMiLCJnZXRDb250ZXh0IiwiZ2V0U3RhdGUiLCJzdGF0ZSIsInNldFN0YXRlIiwianN4TWl4aW4iLCJtb2R1bGUiLCJleHBvcnRzIiwiZWxlbWVudCIsIkFycmF5IiwibWFwIiwidGV4dCIsInRleHRFbGVtZW50IiwiaWdub3JlZFByb3BlcnR5TmFtZXMiLCJpZ25vcmVkUHJvcGVydHlOYW1lIiwiZGVmYXVsdFByb3BlcnR5TmFtZXMiLCJkZWZhdWx0UHJvcGVydHlOYW1lIiwiZGVmYXVsdFByb3BlcnR5VmFsdWUiLCJldmVudFR5cGUiLCJzdWJzdHIiLCJ0b0xvd2VyQ2FzZSIsImhhbmRsZXIiLCJvbiIsImtleSIsImRvbUVsZW1lbnQiLCJtYXRjaCIsImF0dHJpYnV0ZU5hbWVzIiwiaW5jbHVkZXMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsSUFBTUEsY0FBY0MsUUFBUSxnQkFBUixDQUFwQjs7QUFFQSxTQUFTQyxRQUFULENBQWtCQyxhQUFsQixFQUFpQztBQUMvQixNQUFNQyxnQkFBZ0IsS0FBS0EsYUFBTCxHQUNFLEtBQUtBLGFBQUwsRUFERixHQUVJLEtBQUtDLE9BRi9COztBQUlBLE1BQUlELGtCQUFrQkUsU0FBdEIsRUFBaUM7QUFDL0IsUUFBSSxDQUFDSCxjQUFjSSxjQUFkLENBQTZCLFNBQTdCLENBQUwsRUFBOEM7QUFDNUMsVUFBTUYsVUFBVSxFQUFoQjs7QUFFQUcsYUFBT0MsTUFBUCxDQUFjTixhQUFkLEVBQTZCO0FBQzNCRSxpQkFBU0E7QUFEa0IsT0FBN0I7QUFHRDs7QUFFREYsa0JBQWNFLE9BQWQsR0FBd0JHLE9BQU9DLE1BQVAsQ0FBY04sY0FBY0UsT0FBNUIsRUFBcUNELGFBQXJDLENBQXhCO0FBQ0Q7O0FBRURELGdCQUFjTyxNQUFkLENBQXFCLElBQXJCOztBQUVBLE1BQU1DLFlBQVlILE9BQU9JLGNBQVAsQ0FBc0IsSUFBdEIsQ0FBbEI7QUFBQSxNQUNNQyx1QkFBdUJGLFVBQVVHLFdBRHZDO0FBQUEsTUFDb0Q7QUFDOUNDLDZCQUEyQkYscUJBQXFCRyxJQUZ0RCxDQW5CK0IsQ0FxQjZCOztBQUU1RCxNQUFJRCw2QkFBNkIsU0FBakMsRUFBNEM7QUFDMUMsV0FBTyxLQUFLVixPQUFaO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTWSxVQUFULENBQW9CZCxhQUFwQixFQUFtQztBQUNqQ0EsZ0JBQWNlLE1BQWQsQ0FBcUIsSUFBckI7QUFDRDs7QUFFRCxTQUFTQyxhQUFULEdBQTZFO0FBQUEsTUFBdERDLEtBQXNELHVFQUE5Q1osT0FBT2EsSUFBUCxDQUFZLEtBQUtoQixPQUFqQixDQUE4QztBQUFB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anN4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBUZXh0RWxlbWVudCA9IHJlcXVpcmUoJy4uL3RleHRFbGVtZW50Jyk7XG5cbmZ1bmN0aW9uIGFwcGVuZFRvKHBhcmVudEVsZW1lbnQpIHtcbiAgY29uc3QgcGFyZW50Q29udGV4dCA9IHRoaXMucGFyZW50Q29udGV4dCA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50Q29udGV4dCgpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQ7XG5cbiAgaWYgKHBhcmVudENvbnRleHQgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICghcGFyZW50RWxlbWVudC5oYXNPd25Qcm9wZXJ0eSgnY29udGV4dCcpKSB7XG4gICAgICBjb25zdCBjb250ZXh0ID0ge307XG5cbiAgICAgIE9iamVjdC5hc3NpZ24ocGFyZW50RWxlbWVudCwge1xuICAgICAgICBjb250ZXh0OiBjb250ZXh0XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBwYXJlbnRFbGVtZW50LmNvbnRleHQgPSBPYmplY3QuYXNzaWduKHBhcmVudEVsZW1lbnQuY29udGV4dCwgcGFyZW50Q29udGV4dCk7XG4gIH1cblxuICBwYXJlbnRFbGVtZW50LmFwcGVuZCh0aGlzKTtcblxuICBjb25zdCBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyksXG4gICAgICAgIHByb3RvdHlwZUNvbnN0cnVjdG9yID0gcHJvdG90eXBlLmNvbnN0cnVjdG9yLCAvLy9cbiAgICAgICAgcHJvdG90eXBlQ29uc3RydWN0b3JOYW1lID0gcHJvdG90eXBlQ29uc3RydWN0b3IubmFtZTsgLy8vXG4gIFxuICBpZiAocHJvdG90eXBlQ29uc3RydWN0b3JOYW1lID09PSAnRWxlbWVudCcpIHtcbiAgICBkZWxldGUgdGhpcy5jb250ZXh0O1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZyb20ocGFyZW50RWxlbWVudCkge1xuICBwYXJlbnRFbGVtZW50LnJlbW92ZSh0aGlzKTtcbn1cblxuZnVuY3Rpb24gYXNzaWduQ29udGV4dChuYW1lcyA9IE9iamVjdC5rZXlzKHRoaXMuY29udGV4dCksIHRoZW5EZWxldGUgPSB0cnVlKSB7XG4gIG5hbWVzLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5jb250ZXh0W25hbWVdLFxuICAgICAgICAgIGRlc2NyaXB0b3IgPSB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICB9O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIG5hbWUsIGRlc2NyaXB0b3IpO1xuXG4gICAgaWYgKHRoZW5EZWxldGUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmNvbnRleHRbbmFtZV07XG4gICAgfVxuICB9LmJpbmQodGhpcykpO1xuICBcbiAgaWYgKHRoZW5EZWxldGUpIHtcbiAgICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKHRoaXMuY29udGV4dCksXG4gICAgICAgICAgbmFtZXNMZW5ndGggPSBuYW1lcy5sZW5ndGg7IC8vL1xuICAgIFxuICAgIGlmIChuYW1lc0xlbmd0aCA9PT0gMCkge1xuICAgICAgZGVsZXRlIHRoaXMuY29udGV4dDtcbiAgICB9IFxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5UHJvcGVydGllcyhwcm9wZXJ0aWVzID0ge30sIGRlZmF1bHRQcm9wZXJ0aWVzLCBpZ25vcmVkUHJvcGVydGllcykge1xuICBhc3NpZ24ocHJvcGVydGllcywgZGVmYXVsdFByb3BlcnRpZXMpO1xuXG4gIGNvbnN0IGNoaWxkRWxlbWVudHMgPSBjaGlsZEVsZW1lbnRzRnJvbUVsZW1lbnRBbmRQcm9wZXJ0aWVzKHRoaXMsIHByb3BlcnRpZXMpO1xuXG4gIHVuYXNzaWduKHByb3BlcnRpZXMsIGlnbm9yZWRQcm9wZXJ0aWVzKTtcblxuICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpO1xuXG4gIG5hbWVzLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgIGNvbnN0IHZhbHVlID0gcHJvcGVydGllc1tuYW1lXTtcblxuICAgIGlmIChmYWxzZSkge1xuXG4gICAgfSBlbHNlIGlmIChpc0hhbmRsZXJOYW1lKG5hbWUpKSB7XG4gICAgICBhZGRIYW5kbGVyKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGlzQXR0cmlidXRlTmFtZShuYW1lKSkge1xuICAgICAgYWRkQXR0cmlidXRlKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KCdwcm9wZXJ0aWVzJykpIHtcbiAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHt9O1xuXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywge1xuICAgICAgICAgIHByb3BlcnRpZXM6IHByb3BlcnRpZXNcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJvcGVydGllc1tuYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgfS5iaW5kKHRoaXMpKTtcblxuICBjb25zdCBwYXJlbnRFbGVtZW50ID0gdGhpczsgLy8vXG5cbiAgY2hpbGRFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkRWxlbWVudCkge1xuICAgIGNoaWxkRWxlbWVudC5hcHBlbmRUbyhwYXJlbnRFbGVtZW50KTtcbiAgfS5iaW5kKHRoaXMpKTtcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcGVydGllcygpIHtcbiAgcmV0dXJuIHRoaXMucHJvcGVydGllcztcbn1cblxuZnVuY3Rpb24gZ2V0Q29udGV4dCgpIHtcbiAgcmV0dXJuIHRoaXMuY29udGV4dDtcbn1cblxuZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gIHJldHVybiB0aGlzLnN0YXRlO1xufVxuXG5mdW5jdGlvbiBzZXRTdGF0ZShzdGF0ZSkge1xuICB0aGlzLnN0YXRlID0gc3RhdGU7XG59XG5cbmNvbnN0IGpzeE1peGluID0ge1xuICBhcHBlbmRUbzogYXBwZW5kVG8sXG4gIHJlbW92ZUZyb206IHJlbW92ZUZyb20sXG4gIGFzc2lnbkNvbnRleHQ6IGFzc2lnbkNvbnRleHQsXG4gIGFwcGx5UHJvcGVydGllczogYXBwbHlQcm9wZXJ0aWVzLFxuICBnZXRQcm9wZXJ0aWVzOiBnZXRQcm9wZXJ0aWVzLFxuICBnZXRDb250ZXh0OiBnZXRDb250ZXh0LFxuICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gIHNldFN0YXRlOiBzZXRTdGF0ZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBqc3hNaXhpbjtcblxuZnVuY3Rpb24gY2hpbGRFbGVtZW50c0Zyb21FbGVtZW50QW5kUHJvcGVydGllcyhlbGVtZW50LCBwcm9wZXJ0aWVzKSB7XG4gIGxldCBjaGlsZEVsZW1lbnRzID0gZWxlbWVudC5jaGlsZEVsZW1lbnRzID9cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRFbGVtZW50cyhwcm9wZXJ0aWVzKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXMuY2hpbGRFbGVtZW50cztcblxuICBjaGlsZEVsZW1lbnRzID0gKGNoaWxkRWxlbWVudHMgIT09IHVuZGVmaW5lZCkgP1xuICAgICAgICAgICAgICAgICAgICgoY2hpbGRFbGVtZW50cyBpbnN0YW5jZW9mIEFycmF5KSA/XG4gICAgICAgICAgICAgICAgICAgICAgIGNoaWxkRWxlbWVudHMgOlxuICAgICAgICAgICAgICAgICAgICAgICAgW2NoaWxkRWxlbWVudHNdKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtdO1xuXG4gIGNoaWxkRWxlbWVudHMgPSBjaGlsZEVsZW1lbnRzLm1hcChmdW5jdGlvbihjaGlsZEVsZW1lbnQpIHtcbiAgICBpZiAodHlwZW9mIGNoaWxkRWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IHRleHQgPSBjaGlsZEVsZW1lbnQsICAvLy9cbiAgICAgICAgICAgIHRleHRFbGVtZW50ID0gbmV3IFRleHRFbGVtZW50KHRleHQpO1xuXG4gICAgICBjaGlsZEVsZW1lbnQgPSB0ZXh0RWxlbWVudDsgLy8vXG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkRWxlbWVudDtcbiAgfSk7XG5cbiAgcmV0dXJuIGNoaWxkRWxlbWVudHM7XG59XG5cbmZ1bmN0aW9uIHVuYXNzaWduKHByb3BlcnRpZXMsIGlnbm9yZWRQcm9wZXJ0aWVzID0gW10pIHtcbiAgY29uc3QgaWdub3JlZFByb3BlcnR5TmFtZXMgPSBpZ25vcmVkUHJvcGVydGllczsgLy8vXG5cbiAgaWdub3JlZFByb3BlcnR5TmFtZXMuZm9yRWFjaChmdW5jdGlvbihpZ25vcmVkUHJvcGVydHlOYW1lKSB7XG4gICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkoaWdub3JlZFByb3BlcnR5TmFtZSkpIHtcbiAgICAgIGRlbGV0ZSBwcm9wZXJ0aWVzW2lnbm9yZWRQcm9wZXJ0eU5hbWVdO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFzc2lnbihwcm9wZXJ0aWVzLCBkZWZhdWx0UHJvcGVydGllcyA9IHt9KSB7XG4gIGNvbnN0IGRlZmF1bHRQcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmtleXMoZGVmYXVsdFByb3BlcnRpZXMpO1xuXG4gIGRlZmF1bHRQcm9wZXJ0eU5hbWVzLmZvckVhY2goZnVuY3Rpb24oZGVmYXVsdFByb3BlcnR5TmFtZSkge1xuICAgIGlmICghcHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShkZWZhdWx0UHJvcGVydHlOYW1lKSkge1xuICAgICAgY29uc3QgZGVmYXVsdFByb3BlcnR5VmFsdWUgPSBkZWZhdWx0UHJvcGVydGllc1tkZWZhdWx0UHJvcGVydHlOYW1lXTtcblxuICAgICAgcHJvcGVydGllc1tkZWZhdWx0UHJvcGVydHlOYW1lXSA9IGRlZmF1bHRQcm9wZXJ0eVZhbHVlO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZEhhbmRsZXIoZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgY29uc3QgZXZlbnRUeXBlID0gbmFtZS5zdWJzdHIoMikudG9Mb3dlckNhc2UoKSwgLy8vXG4gICAgICAgIGhhbmRsZXIgPSB2YWx1ZTsgIC8vL1xuXG4gIGVsZW1lbnQub24oZXZlbnRUeXBlLCBoYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gYWRkQXR0cmlidXRlKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gIGlmIChuYW1lID09PSAnY2xhc3NOYW1lJykge1xuICAgIG5hbWUgPSAnY2xhc3MnO1xuICB9XG5cbiAgaWYgKG5hbWUgPT09ICdodG1sRm9yJykge1xuICAgIG5hbWUgPSAnZm9yJztcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcblxuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBlbGVtZW50LmRvbUVsZW1lbnRbbmFtZV1ba2V5XSA9IHZhbHVlW2tleV07XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdmFsdWUgPSBuYW1lOyAvLy9cblxuICAgICAgZWxlbWVudC5hZGRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBlbGVtZW50LmFkZEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNIYW5kbGVyTmFtZShuYW1lKSB7XG4gIHJldHVybiBuYW1lLm1hdGNoKC9eb24vKTtcbn1cblxuZnVuY3Rpb24gaXNBdHRyaWJ1dGVOYW1lKG5hbWUpIHtcbiAgcmV0dXJuIGF0dHJpYnV0ZU5hbWVzLmluY2x1ZGVzKG5hbWUpO1xufVxuXG5jb25zdCBhdHRyaWJ1dGVOYW1lcyA9IFtcbiAgJ2FjY2VwdCcsICdhY2NlcHRDaGFyc2V0JywgJ2FjY2Vzc0tleScsICdhY3Rpb24nLCAnYWxsb3dGdWxsU2NyZWVuJywgJ2FsbG93VHJhbnNwYXJlbmN5JywgJ2FsdCcsICdhc3luYycsICdhdXRvQ29tcGxldGUnLCAnYXV0b0ZvY3VzJywgJ2F1dG9QbGF5JyxcbiAgJ2NhcHR1cmUnLCAnY2VsbFBhZGRpbmcnLCAnY2VsbFNwYWNpbmcnLCAnY2hhbGxlbmdlJywgJ2NoYXJTZXQnLCAnY2hlY2tlZCcsICdjaXRlJywgJ2NsYXNzSUQnLCAnY2xhc3NOYW1lJywgJ2NvbFNwYW4nLCAnY29scycsICdjb250ZW50JywgJ2NvbnRlbnRFZGl0YWJsZScsICdjb250ZXh0TWVudScsICdjb250cm9scycsICdjb29yZHMnLCAnY3Jvc3NPcmlnaW4nLFxuICAnZGF0YScsICdkYXRlVGltZScsICdkZWZhdWx0JywgJ2RlZmVyJywgJ2RpcicsICdkaXNhYmxlZCcsICdkb3dubG9hZCcsICdkcmFnZ2FibGUnLFxuICAnZW5jVHlwZScsXG4gICdmb3JtJywgJ2Zvcm1BY3Rpb24nLCAnZm9ybUVuY1R5cGUnLCAnZm9ybU1ldGhvZCcsICdmb3JtTm9WYWxpZGF0ZScsICdmb3JtVGFyZ2V0JywgJ2ZyYW1lQm9yZGVyJyxcbiAgJ2hlYWRlcnMnLCAnaGVpZ2h0JywgJ2hpZGRlbicsICdoaWdoJywgJ2hyZWYnLCAnaHJlZkxhbmcnLCAnaHRtbEZvcicsICdodHRwRXF1aXYnLFxuICAnaWNvbicsICdpZCcsICdpbnB1dE1vZGUnLCAnaW50ZWdyaXR5JywgJ2lzJyxcbiAgJ2tleVBhcmFtcycsICdrZXlUeXBlJywgJ2tpbmQnLFxuICAnbGFiZWwnLCAnbGFuZycsICdsaXN0JywgJ2xvb3AnLCAnbG93JyxcbiAgJ21hbmlmZXN0JywgJ21hcmdpbkhlaWdodCcsICdtYXJnaW5XaWR0aCcsICdtYXgnLCAnbWF4TGVuZ3RoJywgJ21lZGlhJywgJ21lZGlhR3JvdXAnLCAnbWV0aG9kJywgJ21pbicsICdtaW5MZW5ndGgnLCAnbXVsdGlwbGUnLCAnbXV0ZWQnLFxuICAnbmFtZScsICdub1ZhbGlkYXRlJywgJ25vbmNlJyxcbiAgJ29wZW4nLCAnb3B0aW11bScsXG4gICdwYXR0ZXJuJywgJ3BsYWNlaG9sZGVyJywgJ3Bvc3RlcicsICdwcmVsb2FkJywgJ3Byb2ZpbGUnLFxuICAncmFkaW9Hcm91cCcsICdyZWFkT25seScsICdyZWwnLCAncmVxdWlyZWQnLCAncmV2ZXJzZWQnLCAncm9sZScsICdyb3dTcGFuJywgJ3Jvd3MnLFxuICAnc2FuZGJveCcsICdzY29wZScsICdzY29wZWQnLCAnc2Nyb2xsaW5nJywgJ3NlYW1sZXNzJywgJ3NlbGVjdGVkJywgJ3NoYXBlJywgJ3NpemUnLCAnc2l6ZXMnLCAnc3BhbicsICdzcGVsbENoZWNrJywgJ3NyYycsICdzcmNEb2MnLCAnc3JjTGFuZycsICdzcmNTZXQnLCAnc3RhcnQnLCAnc3RlcCcsICdzdHlsZScsICdzdW1tYXJ5JyxcbiAgJ3RhYkluZGV4JywgJ3RhcmdldCcsICd0aXRsZScsICd0eXBlJyxcbiAgJ3VzZU1hcCcsXG4gICd2YWx1ZScsXG4gICd3aWR0aCcsXG4gICd3bW9kZScsXG4gICd3cmFwJ1xuXTtcbiJdfQ==