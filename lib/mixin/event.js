'use strict';

function on(eventTypes, handler) {
  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var addEventListener = this.addHandler(eventType, handler);

    if (addEventListener) {
      this.domElement.addEventListener(eventType, eventListener.bind(this));
    }
  }.bind(this));
}

function off(eventTypes, handler) {
  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var removeEventListener = this.removeHandler(eventType, handler);

    if (removeEventListener) {
      this.domElement.removeEventListener(eventType, eventListener.bind(this));
    }
  }.bind(this));
}

function addHandler(eventType, handler) {
  var addEventListener = false,
      handlers = this.handlersMap[eventType];

  if (handlers === undefined) {
    handlers = [];

    this.handlersMap[eventType] = handlers;

    addEventListener = true;
  }

  handlers.push(handler);

  return addEventListener;
}

function removeHandler(eventType) {
  var handler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  var removeEventListener = false;

  var handlers = this.handlersMap[eventType];

  if (handler === null) {
    handlers.splice(0);
  } else {
    var index = handlers.indexOf(handler);

    if (index > -1) {
      handlers.splice(index, -1);
    }
  }

  if (handlers.length === 0) {
    delete this.handlersMap[eventType];

    removeEventListener = true;
  }

  return removeEventListener;
}

var eventMixin = {
  on: on,
  off: off,
  addHandler: addHandler,
  removeHandler: removeHandler
};

module.exports = eventMixin;

function eventListener(event) {
  var eventType = event.type,
      targetElement = this,
      ///
  handlers = this.handlersMap[eventType];

  var preventEventDefault = false;

  handlers.forEach(function (handler) {
    if (handler.intermediateHandler !== undefined) {
      var preventDefault = handler.intermediateHandler(handler, event, targetElement);

      if (preventDefault === true) {
        preventEventDefault = true;
      }
    } else {
      var _preventDefault = handler(event, targetElement);

      if (_preventDefault === true) {
        preventEventDefault = true;
      }
    }
  });

  if (preventEventDefault) {
    event.preventDefault();
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9ldmVudC5qcyJdLCJuYW1lcyI6WyJvbiIsImV2ZW50VHlwZXMiLCJoYW5kbGVyIiwic3BsaXQiLCJmb3JFYWNoIiwiZXZlbnRUeXBlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImFkZEhhbmRsZXIiLCJkb21FbGVtZW50IiwiZXZlbnRMaXN0ZW5lciIsImJpbmQiLCJvZmYiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlSGFuZGxlciIsImhhbmRsZXJzIiwiaGFuZGxlcnNNYXAiLCJ1bmRlZmluZWQiLCJwdXNoIiwic3BsaWNlIiwiaW5kZXgiLCJpbmRleE9mIiwibGVuZ3RoIiwiZXZlbnRNaXhpbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJldmVudCIsInR5cGUiLCJ0YXJnZXRFbGVtZW50IiwicHJldmVudEV2ZW50RGVmYXVsdCIsImludGVybWVkaWF0ZUhhbmRsZXIiLCJwcmV2ZW50RGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsU0FBU0EsRUFBVCxDQUFZQyxVQUFaLEVBQXdCQyxPQUF4QixFQUFpQztBQUMvQkQsZUFBYUEsV0FBV0UsS0FBWCxDQUFpQixHQUFqQixDQUFiLENBRCtCLENBQ0s7O0FBRXBDRixhQUFXRyxPQUFYLENBQW1CLFVBQVNDLFNBQVQsRUFBb0I7QUFDckMsUUFBTUMsbUJBQW1CLEtBQUtDLFVBQUwsQ0FBZ0JGLFNBQWhCLEVBQTJCSCxPQUEzQixDQUF6Qjs7QUFFQSxRQUFJSSxnQkFBSixFQUFzQjtBQUNwQixXQUFLRSxVQUFMLENBQWdCRixnQkFBaEIsQ0FBaUNELFNBQWpDLEVBQTRDSSxjQUFjQyxJQUFkLENBQW1CLElBQW5CLENBQTVDO0FBQ0Q7QUFDRixHQU5rQixDQU1qQkEsSUFOaUIsQ0FNWixJQU5ZLENBQW5CO0FBT0Q7O0FBRUQsU0FBU0MsR0FBVCxDQUFhVixVQUFiLEVBQXlCQyxPQUF6QixFQUFrQztBQUNoQ0QsZUFBYUEsV0FBV0UsS0FBWCxDQUFpQixHQUFqQixDQUFiLENB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Y3Rpb24gb24oZXZlbnRUeXBlcywgaGFuZGxlcikge1xuICBldmVudFR5cGVzID0gZXZlbnRUeXBlcy5zcGxpdCgnICcpOyAvLy9cblxuICBldmVudFR5cGVzLmZvckVhY2goZnVuY3Rpb24oZXZlbnRUeXBlKSB7XG4gICAgY29uc3QgYWRkRXZlbnRMaXN0ZW5lciA9IHRoaXMuYWRkSGFuZGxlcihldmVudFR5cGUsIGhhbmRsZXIpO1xuXG4gICAgaWYgKGFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgZXZlbnRMaXN0ZW5lci5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH0uYmluZCh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIG9mZihldmVudFR5cGVzLCBoYW5kbGVyKSB7XG4gIGV2ZW50VHlwZXMgPSBldmVudFR5cGVzLnNwbGl0KCcgJyk7IC8vL1xuXG4gIGV2ZW50VHlwZXMuZm9yRWFjaChmdW5jdGlvbihldmVudFR5cGUpIHtcbiAgICBjb25zdCByZW1vdmVFdmVudExpc3RlbmVyID0gdGhpcy5yZW1vdmVIYW5kbGVyKGV2ZW50VHlwZSwgaGFuZGxlcik7XG4gICAgXG4gICAgaWYgKHJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgZXZlbnRMaXN0ZW5lci5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH0uYmluZCh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIGFkZEhhbmRsZXIoZXZlbnRUeXBlLCBoYW5kbGVyKSB7XG4gIGxldCBhZGRFdmVudExpc3RlbmVyID0gZmFsc2UsXG4gICAgICBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnNNYXBbZXZlbnRUeXBlXTtcblxuICBpZiAoaGFuZGxlcnMgPT09IHVuZGVmaW5lZCkge1xuICAgIGhhbmRsZXJzID0gW107XG5cbiAgICB0aGlzLmhhbmRsZXJzTWFwW2V2ZW50VHlwZV0gPSBoYW5kbGVycztcblxuICAgIGFkZEV2ZW50TGlzdGVuZXIgPSB0cnVlO1xuICB9XG5cbiAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcblxuICByZXR1cm4gYWRkRXZlbnRMaXN0ZW5lcjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlSGFuZGxlcihldmVudFR5cGUsIGhhbmRsZXIgPSBudWxsKSB7XG4gIGxldCByZW1vdmVFdmVudExpc3RlbmVyID0gZmFsc2U7XG5cbiAgY29uc3QgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzTWFwW2V2ZW50VHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IG51bGwpIHtcbiAgICBoYW5kbGVycy5zcGxpY2UoMCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgaW5kZXggPSBoYW5kbGVycy5pbmRleE9mKGhhbmRsZXIpO1xuXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIGhhbmRsZXJzLnNwbGljZShpbmRleCwgLTEpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChoYW5kbGVycy5sZW5ndGggPT09IDApIHtcbiAgICBkZWxldGUgKHRoaXMuaGFuZGxlcnNNYXBbZXZlbnRUeXBlXSk7XG5cbiAgICByZW1vdmVFdmVudExpc3RlbmVyID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiByZW1vdmVFdmVudExpc3RlbmVyO1xufVxuXG5jb25zdCBldmVudE1peGluID0ge1xuICBvbjogb24sXG4gIG9mZjogb2ZmLFxuICBhZGRIYW5kbGVyOiBhZGRIYW5kbGVyLFxuICByZW1vdmVIYW5kbGVyOiByZW1vdmVIYW5kbGVyXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV2ZW50TWl4aW47XG5cbmZ1bmN0aW9uIGV2ZW50TGlzdGVuZXIoZXZlbnQpIHtcbiAgY29uc3QgZXZlbnRUeXBlID0gZXZlbnQudHlwZSxcbiAgICAgICAgdGFyZ2V0RWxlbWVudCA9IHRoaXMsICAvLy9cbiAgICAgICAgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzTWFwW2V2ZW50VHlwZV07XG5cbiAgbGV0IHByZXZlbnRFdmVudERlZmF1bHQgPSBmYWxzZTtcblxuICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICBpZiAoaGFuZGxlci5pbnRlcm1lZGlhdGVIYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHByZXZlbnREZWZhdWx0ID0gaGFuZGxlci5pbnRlcm1lZGlhdGVIYW5kbGVyKGhhbmRsZXIsIGV2ZW50LCB0YXJnZXRFbGVtZW50KTtcbiAgICAgIFxuICAgICAgaWYgKHByZXZlbnREZWZhdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIHByZXZlbnRFdmVudERlZmF1bHQgPSB0cnVlO1xuICAgICAgfSAgXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHByZXZlbnREZWZhdWx0ID0gaGFuZGxlcihldmVudCwgdGFyZ2V0RWxlbWVudCk7XG4gICAgICBcbiAgICAgIGlmIChwcmV2ZW50RGVmYXVsdCA9PT0gdHJ1ZSkge1xuICAgICAgICBwcmV2ZW50RXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBcbiAgaWYgKHByZXZlbnRFdmVudERlZmF1bHQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG59XG4iXX0=