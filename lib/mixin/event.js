'use strict';

function on(eventTypes, handler) {
  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var addEventListener = this.addHandler(eventType, handler);

    if (addEventListener) {
      this.domElement.addEventListener(eventType, eventListener.bind(this));
    }
  }.bind(this));
}

function off(eventTypes, handler) {
  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var removeEventListener = this.removeHandler(eventType, handler);

    if (removeEventListener) {
      this.domElement.removeEventListener(eventType, eventListener.bind(this));
    }
  }.bind(this));
}

function addHandler(eventType, handler) {
  var addEventListener = false,
      handlers = this.handlersMap[eventType];

  if (handlers === undefined) {
    handlers = [];

    this.handlersMap[eventType] = handlers;

    addEventListener = true;
  }

  handlers.push(handler);

  return addEventListener;
}

function removeHandler(eventType, handler) {
  var removeEventListener = false,
      handlers = this.handlersMap[eventType];

  if (handlers.length === 0) {
    delete this.handlersMap[eventType];

    removeEventListener = true;
  } else {
    var index = handlers.indexOf(handler);

    if (index > -1) {
      var deleteCount = 1;

      handlers.splice(index, deleteCount);
    }
  }

  return removeEventListener;
}

var eventMixin = {
  on: on,
  off: off,
  addHandler: addHandler,
  removeHandler: removeHandler
};

module.exports = eventMixin;

function eventListener(event) {
  var eventType = event.type,
      targetElement = this,
      ///
  handlers = this.handlersMap[eventType];

  var preventEventDefault = false;

  handlers.forEach(function (handler) {
    if (handler.intermediateHandler !== undefined) {
      var preventDefault = handler.intermediateHandler(handler, event, targetElement);

      if (preventDefault === true) {
        preventEventDefault = true;
      }
    } else {
      var _preventDefault = handler(event, targetElement);

      if (_preventDefault === true) {
        preventEventDefault = true;
      }
    }
  });

  if (preventEventDefault) {
    event.preventDefault();
  }

  event.stopPropagation();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9ldmVudC5qcyJdLCJuYW1lcyI6WyJvbiIsImV2ZW50VHlwZXMiLCJoYW5kbGVyIiwic3BsaXQiLCJmb3JFYWNoIiwiZXZlbnRUeXBlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImFkZEhhbmRsZXIiLCJkb21FbGVtZW50IiwiZXZlbnRMaXN0ZW5lciIsImJpbmQiLCJvZmYiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlSGFuZGxlciIsImhhbmRsZXJzIiwiaGFuZGxlcnNNYXAiLCJ1bmRlZmluZWQiLCJwdXNoIiwibGVuZ3RoIiwiaW5kZXgiLCJpbmRleE9mIiwiZGVsZXRlQ291bnQiLCJzcGxpY2UiLCJldmVudE1peGluIiwibW9kdWxlIiwiZXhwb3J0cyIsImV2ZW50IiwidHlwZSIsInRhcmdldEVsZW1lbnQiLCJwcmV2ZW50RXZlbnREZWZhdWx0IiwiaW50ZXJtZWRpYXRlSGFuZGxlciIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSxFQUFULENBQVlDLFVBQVosRUFBd0JDLE9BQXhCLEVBQWlDO0FBQy9CRCxlQUFhQSxXQUFXRSxLQUFYLENBQWlCLEdBQWpCLENBQWIsQ0FEK0IsQ0FDSzs7QUFFcENGLGFBQVdHLE9BQVgsQ0FBbUIsVUFBU0MsU0FBVCxFQUFvQjtBQUNyQyxRQUFNQyxtQkFBbUIsS0FBS0MsVUFBTCxDQUFnQkYsU0FBaEIsRUFBMkJILE9BQTNCLENBQXpCOztBQUVBLFFBQUlJLGdCQUFKLEVBQXNCO0FBQ3BCLFdBQUtFLFVBQUwsQ0FBZ0JGLGdCQUFoQixDQUFpQ0QsU0FBakMsRUFBNENJLGNBQWNDLElBQWQsQ0FBbUIsSUFBbkIsQ0FBNUM7QUFDRDtBQUNGLEdBTmtCLENBTWpCQSxJQU5pQixDQU1aLElBTlksQ0FBbkI7QUFPRDs7QUFFRCxTQUFTQyxHQUFULENBQWFWLFVBQWIsRUFBeUJDLE9BQXpCLEVBQWtDO0FBQ2hDRCxlQUFh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VHlwZXMsIGhhbmRsZXIpIHtcbiAgZXZlbnRUeXBlcyA9IGV2ZW50VHlwZXMuc3BsaXQoJyAnKTsgLy8vXG5cbiAgZXZlbnRUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50VHlwZSkge1xuICAgIGNvbnN0IGFkZEV2ZW50TGlzdGVuZXIgPSB0aGlzLmFkZEhhbmRsZXIoZXZlbnRUeXBlLCBoYW5kbGVyKTtcblxuICAgIGlmIChhZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGV2ZW50TGlzdGVuZXIuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9LmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBvZmYoZXZlbnRUeXBlcywgaGFuZGxlcikge1xuICBldmVudFR5cGVzID0gZXZlbnRUeXBlcy5zcGxpdCgnICcpOyAvLy9cblxuICBldmVudFR5cGVzLmZvckVhY2goZnVuY3Rpb24oZXZlbnRUeXBlKSB7XG4gICAgY29uc3QgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IHRoaXMucmVtb3ZlSGFuZGxlcihldmVudFR5cGUsIGhhbmRsZXIpO1xuICAgIFxuICAgIGlmIChyZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICB0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGV2ZW50TGlzdGVuZXIuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9LmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBhZGRIYW5kbGVyKGV2ZW50VHlwZSwgaGFuZGxlcikge1xuICBsZXQgYWRkRXZlbnRMaXN0ZW5lciA9IGZhbHNlLFxuICAgICAgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzTWFwW2V2ZW50VHlwZV07XG5cbiAgaWYgKGhhbmRsZXJzID09PSB1bmRlZmluZWQpIHtcbiAgICBoYW5kbGVycyA9IFtdO1xuXG4gICAgdGhpcy5oYW5kbGVyc01hcFtldmVudFR5cGVdID0gaGFuZGxlcnM7XG5cbiAgICBhZGRFdmVudExpc3RlbmVyID0gdHJ1ZTtcbiAgfVxuXG4gIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG5cbiAgcmV0dXJuIGFkZEV2ZW50TGlzdGVuZXI7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUhhbmRsZXIoZXZlbnRUeXBlLCBoYW5kbGVyKSB7XG4gIGxldCByZW1vdmVFdmVudExpc3RlbmVyID0gZmFsc2UsXG4gICAgICBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnNNYXBbZXZlbnRUeXBlXTtcblxuICBpZiAoaGFuZGxlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgZGVsZXRlICh0aGlzLmhhbmRsZXJzTWFwW2V2ZW50VHlwZV0pO1xuXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgaW5kZXggPSBoYW5kbGVycy5pbmRleE9mKGhhbmRsZXIpO1xuXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIGNvbnN0IGRlbGV0ZUNvdW50ID0gMTtcblxuICAgICAgaGFuZGxlcnMuc3BsaWNlKGluZGV4LCBkZWxldGVDb3VudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlbW92ZUV2ZW50TGlzdGVuZXI7XG59XG5cbmNvbnN0IGV2ZW50TWl4aW4gPSB7XG4gIG9uOiBvbixcbiAgb2ZmOiBvZmYsXG4gIGFkZEhhbmRsZXI6IGFkZEhhbmRsZXIsXG4gIHJlbW92ZUhhbmRsZXI6IHJlbW92ZUhhbmRsZXJcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXZlbnRNaXhpbjtcblxuZnVuY3Rpb24gZXZlbnRMaXN0ZW5lcihldmVudCkge1xuICBjb25zdCBldmVudFR5cGUgPSBldmVudC50eXBlLFxuICAgICAgICB0YXJnZXRFbGVtZW50ID0gdGhpcywgIC8vL1xuICAgICAgICBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnNNYXBbZXZlbnRUeXBlXTtcblxuICBsZXQgcHJldmVudEV2ZW50RGVmYXVsdCA9IGZhbHNlO1xuXG4gIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlcikge1xuICAgIGlmIChoYW5kbGVyLmludGVybWVkaWF0ZUhhbmRsZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgcHJldmVudERlZmF1bHQgPSBoYW5kbGVyLmludGVybWVkaWF0ZUhhbmRsZXIoaGFuZGxlciwgZXZlbnQsIHRhcmdldEVsZW1lbnQpO1xuICAgICAgXG4gICAgICBpZiAocHJldmVudERlZmF1bHQgPT09IHRydWUpIHtcbiAgICAgICAgcHJldmVudEV2ZW50RGVmYXVsdCA9IHRydWU7XG4gICAgICB9ICBcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcHJldmVudERlZmF1bHQgPSBoYW5kbGVyKGV2ZW50LCB0YXJnZXRFbGVtZW50KTtcbiAgICAgIFxuICAgICAgaWYgKHByZXZlbnREZWZhdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIHByZXZlbnRFdmVudERlZmF1bHQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIFxuICBpZiAocHJldmVudEV2ZW50RGVmYXVsdCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cblxuICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbn1cbiJdfQ==