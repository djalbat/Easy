'use strict';

function on(types, handler) {
  var preventDefault = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var intermediateHandler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (handler, event) {
    handler(event);
  };

  types = types.split(' '); ///

  types.forEach(function (type) {
    var addEventListener = this.addHandler(type, handler, preventDefault, intermediateHandler);

    if (addEventListener) {
      this.domElement.addEventListener(type, eventListener.bind(this));
    }
  }.bind(this));
}

function off(types, handler) {
  types = types.split(' '); ///

  types.forEach(function (type) {
    var removeEventListener = this.removeHandler(type, handler);

    if (removeEventListener) {
      this.domElement.removeEventListener(type, eventListener.bind(this));
    }
  }.bind(this));
}

function addHandler(type, handler, preventDefault, intermediateHandler) {
  if (preventDefault !== undefined) {
    handler.preventDefault = preventDefault;
  }

  if (intermediateHandler !== undefined) {
    handler.intermediateHandler = intermediateHandler;
  }

  var addEventListener = false,
      handlers = this.handlersMap[type];

  if (handlers === undefined) {
    handlers = [];

    this.handlersMap[type] = handlers;

    addEventListener = true;
  }

  handlers.push(handler);

  return addEventListener;
}

function removeHandler(type, handler) {
  var removeEventListener = false,
      handlers = this.handlersMap[type];

  if (handlers.length === 0) {
    delete this.handlersMap[type];

    removeEventListener = true;
  } else {
    var index = handlers.indexOf(handler);

    if (index > -1) {
      var deleteCount = 1;

      handlers.splice(index, deleteCount);
    }
  }

  return removeEventListener;
}

var event = {
  on: on,
  off: off,
  addHandler: addHandler,
  removeHandler: removeHandler
};

module.exports = event;

function eventListener(event) {
  var type = event.type,
      handlers = this.handlersMap[type];

  handlers.forEach(function (handler) {
    handler.intermediateHandler(handler, event);

    if (handler.preventDefault) {
      event.preventDefault();
    }
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9ldmVudC5qcyJdLCJuYW1lcyI6WyJvbiIsInR5cGVzIiwiaGFuZGxlciIsInByZXZlbnREZWZhdWx0IiwiaW50ZXJtZWRpYXRlSGFuZGxlciIsImV2ZW50Iiwic3BsaXQiLCJmb3JFYWNoIiwidHlwZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJhZGRIYW5kbGVyIiwiZG9tRWxlbWVudCIsImV2ZW50TGlzdGVuZXIiLCJiaW5kIiwib2ZmIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbW92ZUhhbmRsZXIiLCJ1bmRlZmluZWQiLCJoYW5kbGVycyIsImhhbmRsZXJzTWFwIiwicHVzaCIsImxlbmd0aCIsImluZGV4IiwiaW5kZXhPZiIsImRlbGV0ZUNvdW50Iiwic3BsaWNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsU0FBU0EsRUFBVCxDQUFZQyxLQUFaLEVBQW1CQyxPQUFuQixFQUF1SDtBQUFBLE1BQTNGQyxjQUEyRix1RUFBMUUsSUFBMEU7QUFBQSxNQUFwRUMsbUJBQW9FLHVFQUE5QyxVQUFTRixPQUFULEVBQWtCRyxLQUFsQixFQUF5QjtBQUFFSCxZQUFRRyxLQUFSO0FBQWlCLEdBQUU7O0FBQ3JISixVQUFRQSxNQUFNSyxLQUFOLENBQVksR0FBWixDQUFSLENBRHFILENBQzNGOztBQUUxQkwsUUFBTU0sT0FBTixDQUFjLFVBQVNDLElBQVQsRUFBZTtBQUMzQixRQUFNQyxtQkFBbUIsS0FBS0MsVUFBTCxDQUFnQkYsSUFBaEIsRUFBc0JOLE9BQXRCLEVBQStCQyxjQUEvQixFQUErQ0MsbUJBQS9DLENBQXpCOztBQUVBLFFBQUlLLGdCQUFKLEVBQXNCO0FBQ3BCLFdBQUtFLFVBQUwsQ0FBZ0JGLGdCQUFoQixDQUFpQ0QsSUFBakMsRUFBdUNJLGNBQWNDLElBQWQsQ0FBbUIsSUFBbkIsQ0FBdkM7QUFDRDtBQUNGLEdBTmEsQ0FNWkEsSUFOWSxDQU1QLElBTk8sQ0FBZDtBQU9EOztBQUVELFNBQVNDLEdBQVQsQ0FBYWIsS0FBYixFQUFvQkMsT0FBcEIsRUFBNkI7QUFDM0JELFVBQVFBLE1BQU1LLEtBQU4sQ0FBWSxHQUFaLENBQVIsQ0FEMkIsQ0FDRDs7QUFFMUJMLFFBQU1NLE9BQU4sQ0FBYyxVQUFTQyxJQUFULEVBQWU7QUFDM0IsUUFBTU8sc0JBQXNCLEtBQUtDLGFBQUwsQ0FBbUJSLElBQW5CLEVBQXlCTixPQUF6QixDQUE1Qjs7QUFFQSxRQUFJYSxtQkFBSixFQUF5QjtBQUN2QixXQUFLSixVQUFMLENBQWdCSSxtQkFBaEIsQ0FBb0NQLElBQXBDLEVBQTBDSSxjQUFjQyxJQUFkLENBQW1CLElBQW5CLENBQTFDO0FBQ0Q7QUFDRixHQU5hLENBTVpBLElBTlksQ0FNUCxJQU5PLENBQWQ7QUFPRDs7QUFFRCxTQUFTSCxVQUFULENBQW9CRixJQUFwQixFQUEwQk4sT0FBMUIsRUFBbUNDLGNBQW5DLEVBQW1EQyxtQkFBbkQsRUFBeUU7QUFDdkUsTUFBSUQsbUJBQW1CYyxTQUF2QixFQUFrQztBQUNoQ2YsWUFBUUMsY0FBUixHQUF5QkEsY0FBekI7QUFDRDs7QUFFRCxNQUFJQyx3QkFBd0JhLFNBQTVCLEVBQXVDO0FBQ3JDZixZQUFRRSxtQkFBUixHQUE4QkEsbUJBQTlCO0FBQ0Q7O0FBRUQsTUFBSUssbUJBQW1CLEtBQXZCO0FBQUEsTUFDSVMsV0FBVyxLQUFLQyxXQUFMLENBQWlCWCxJQUFqQixDQURmOztBQUdBLE1BQUtVLGFBQWFELFNBQWxCLEVBQThCO0FBQzVCQyxlQUFXLEVBQVg7O0FBRUEsU0FBS0MsV0FBTCxDQUFpQlgsSUFBakIsSUFBeUJVLFFBQXpCOztBQUVBVCx1QkFBbUIsSUFBbkI7QUFDRDs7QUFFRFMsV0FBU0UsSUFBVCxDQUFjbEIsT0FBZDs7QUFFQSxTQUFPTyxnQkFBUDtBQUNEOztBQUVELFNBQVNPLGFBQVQsQ0FBdUJSLElBQXZCLEVBQTZCTixPQUE3QixFQUFzQztBQUNwQyxNQUFJYSxzQkFBc0IsS0FBMUI7QUFBQSxNQUNJRyxXQUFXLEtBQUtDLFdBQUwsQ0FBaUJYLElBQWpCLENBRGY7O0FBR0EsTUFBS1UsU0FBU0csTUFBVCxLQUFvQixDQUF6QixFQUE2QjtBQUMzQixXQUFRLEtBQUtGLFdBQUwsQ0FBaUJYLElBQWpCLENBQVI7O0FBRUFPLDBCQUFzQixJQUF0QjtBQUNELEdBSkQsTUFJTztBQUNMLFFBQU1PLFFBQVFKLFNBQVNLLE9BQVQsQ0FBaUJyQixPQUFqQixDQUFkOztBQUVBLFFBQUlvQixRQUFRLENBQUMsQ0FBYixFQUFnQjtBQUNkLFVBQU1FLGNBQWMsQ0FBcEI7O0FBRUFOLGVBQVNPLE1BQVQsQ0FBZ0JILEtBQWhCLEVBQXVCRSxXQUF2QjtBQUNEO0FBQ0Y7O0FBRUQsU0FBT1QsbUJBQVA7QUFDRDs7QUFFRCxJQUFNVixRQUFRO0FBQ1pMLE1BQUlBLEVBRFE7QUFFWmMsT0FBS0EsR0FGTztBQUdaSixjQUFZQSxVQUhBO0FBSVpNLGlCQUFlQTtBQUpILENBQWQ7O0FBT0FVLE9BQU9DLE9BQVAsR0FBaUJ0QixLQUFqQjs7QUFFQSxTQUFTTyxhQUFULENBQXVCUCxLQUF2QixFQUE4QjtBQUM1QixNQUFNRyxPQUFPSCxNQUFNRyxJQUFuQjtBQUFBLE1BQ01VLFdBQVcsS0FBS0MsV0FBTCxDQUFpQlgsSUFBakIsQ0FEakI7O0FBR0FVLFdBQVNYLE9BQVQsQ0FBaUIsVUFBU0wsT0FBVCxFQUFrQjtBQUNqQ0EsWUFBUUUsbUJBQVIsQ0FBNEJGLE9BQTVCLEVBQXFDRyxLQUFyQzs7QUFFQSxRQUFJSCxRQUFRQyxjQUFaLEVBQTRCO0FBQzFCRSxZQUFNRixjQUFOO0FBQ0Q7QUFDRixHQU5EO0FBT0QiLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIG9uKHR5cGVzLCBoYW5kbGVyLCBwcmV2ZW50RGVmYXVsdCA9IHRydWUsIGludGVybWVkaWF0ZUhhbmRsZXIgPSBmdW5jdGlvbihoYW5kbGVyLCBldmVudCkgeyBoYW5kbGVyKGV2ZW50KTsgfSkge1xuICB0eXBlcyA9IHR5cGVzLnNwbGl0KCcgJyk7IC8vL1xuXG4gIHR5cGVzLmZvckVhY2goZnVuY3Rpb24odHlwZSkge1xuICAgIGNvbnN0IGFkZEV2ZW50TGlzdGVuZXIgPSB0aGlzLmFkZEhhbmRsZXIodHlwZSwgaGFuZGxlciwgcHJldmVudERlZmF1bHQsIGludGVybWVkaWF0ZUhhbmRsZXIpO1xuXG4gICAgaWYgKGFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGV2ZW50TGlzdGVuZXIuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9LmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBvZmYodHlwZXMsIGhhbmRsZXIpIHtcbiAgdHlwZXMgPSB0eXBlcy5zcGxpdCgnICcpOyAvLy9cblxuICB0eXBlcy5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUpIHtcbiAgICBjb25zdCByZW1vdmVFdmVudExpc3RlbmVyID0gdGhpcy5yZW1vdmVIYW5kbGVyKHR5cGUsIGhhbmRsZXIpO1xuICAgIFxuICAgIGlmIChyZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICB0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBldmVudExpc3RlbmVyLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfS5iaW5kKHRoaXMpKTtcbn1cblxuZnVuY3Rpb24gYWRkSGFuZGxlcih0eXBlLCBoYW5kbGVyLCBwcmV2ZW50RGVmYXVsdCwgaW50ZXJtZWRpYXRlSGFuZGxlciApIHtcbiAgaWYgKHByZXZlbnREZWZhdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICBoYW5kbGVyLnByZXZlbnREZWZhdWx0ID0gcHJldmVudERlZmF1bHQ7XG4gIH1cblxuICBpZiAoaW50ZXJtZWRpYXRlSGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaGFuZGxlci5pbnRlcm1lZGlhdGVIYW5kbGVyID0gaW50ZXJtZWRpYXRlSGFuZGxlcjtcbiAgfVxuXG4gIGxldCBhZGRFdmVudExpc3RlbmVyID0gZmFsc2UsXG4gICAgICBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnNNYXBbdHlwZV07XG5cbiAgaWYgKChoYW5kbGVycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgIGhhbmRsZXJzID0gW107XG5cbiAgICB0aGlzLmhhbmRsZXJzTWFwW3R5cGVdID0gaGFuZGxlcnM7XG5cbiAgICBhZGRFdmVudExpc3RlbmVyID0gdHJ1ZTtcbiAgfVxuXG4gIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG5cbiAgcmV0dXJuIGFkZEV2ZW50TGlzdGVuZXI7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUhhbmRsZXIodHlwZSwgaGFuZGxlcikge1xuICBsZXQgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZhbHNlLFxuICAgICAgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzTWFwW3R5cGVdO1xuXG4gIGlmICgoaGFuZGxlcnMubGVuZ3RoID09PSAwKSkge1xuICAgIGRlbGV0ZSAodGhpcy5oYW5kbGVyc01hcFt0eXBlXSk7XG5cbiAgICByZW1vdmVFdmVudExpc3RlbmVyID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBpbmRleCA9IGhhbmRsZXJzLmluZGV4T2YoaGFuZGxlcik7XG5cbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgY29uc3QgZGVsZXRlQ291bnQgPSAxO1xuXG4gICAgICBoYW5kbGVycy5zcGxpY2UoaW5kZXgsIGRlbGV0ZUNvdW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVtb3ZlRXZlbnRMaXN0ZW5lcjtcbn1cblxuY29uc3QgZXZlbnQgPSB7XG4gIG9uOiBvbixcbiAgb2ZmOiBvZmYsXG4gIGFkZEhhbmRsZXI6IGFkZEhhbmRsZXIsXG4gIHJlbW92ZUhhbmRsZXI6IHJlbW92ZUhhbmRsZXJcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXZlbnQ7XG5cbmZ1bmN0aW9uIGV2ZW50TGlzdGVuZXIoZXZlbnQpIHtcbiAgY29uc3QgdHlwZSA9IGV2ZW50LnR5cGUsXG4gICAgICAgIGhhbmRsZXJzID0gdGhpcy5oYW5kbGVyc01hcFt0eXBlXTtcblxuICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICBoYW5kbGVyLmludGVybWVkaWF0ZUhhbmRsZXIoaGFuZGxlciwgZXZlbnQpO1xuXG4gICAgaWYgKGhhbmRsZXIucHJldmVudERlZmF1bHQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9KTtcbn1cbiJdfQ==