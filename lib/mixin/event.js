'use strict';

function on(eventTypes, handler) {
  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var addEventListener = this.addHandler(eventType, handler);

    if (addEventListener) {
      this.domElement.addEventListener(eventType, eventListener.bind(this));
    }
  }.bind(this));
}

function off(eventTypes, handler) {
  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var removeEventListener = this.removeHandler(eventType, handler);

    if (removeEventListener) {
      this.domElement.removeEventListener(eventType, eventListener.bind(this));
    }
  }.bind(this));
}

function addHandler(eventType, handler) {
  var addEventListener = false,
      handlers = this.handlersMap[eventType];

  if (handlers === undefined) {
    handlers = [];

    this.handlersMap[eventType] = handlers;

    addEventListener = true;
  }

  handlers.push(handler);

  return addEventListener;
}

function removeHandler(eventType, handler) {
  var removeEventListener = false,
      handlers = this.handlersMap[eventType];

  if (handlers.length === 0) {
    delete this.handlersMap[eventType];

    removeEventListener = true;
  } else {
    var index = handlers.indexOf(handler);

    if (index > -1) {
      var deleteCount = 1;

      handlers.splice(index, deleteCount);
    }
  }

  return removeEventListener;
}

var event = {
  on: on,
  off: off,
  addHandler: addHandler,
  removeHandler: removeHandler
};

module.exports = event;

function eventListener(event) {
  var eventType = event.type,
      handlers = this.handlersMap[eventType];

  var preventEventDefault = false;

  handlers.forEach(function (handler) {
    if (handler.intermediateHandler !== undefined) {
      var preventDefault = handler.intermediateHandler(handler, event);

      if (preventDefault === true) {
        preventEventDefault = true;
      }
    } else {
      var _preventDefault = handler(event);

      if (_preventDefault === true) {
        preventEventDefault = true;
      }
    }
  });

  if (preventEventDefault) {
    event.preventDefault();
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9ldmVudC5qcyJdLCJuYW1lcyI6WyJvbiIsImV2ZW50VHlwZXMiLCJoYW5kbGVyIiwic3BsaXQiLCJmb3JFYWNoIiwiZXZlbnRUeXBlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImFkZEhhbmRsZXIiLCJkb21FbGVtZW50IiwiZXZlbnRMaXN0ZW5lciIsImJpbmQiLCJvZmYiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlSGFuZGxlciIsImhhbmRsZXJzIiwiaGFuZGxlcnNNYXAiLCJ1bmRlZmluZWQiLCJwdXNoIiwibGVuZ3RoIiwiaW5kZXgiLCJpbmRleE9mIiwiZGVsZXRlQ291bnQiLCJzcGxpY2UiLCJldmVudCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0eXBlIiwicHJldmVudEV2ZW50RGVmYXVsdCIsImludGVybWVkaWF0ZUhhbmRsZXIiLCJwcmV2ZW50RGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsU0FBU0EsRUFBVCxDQUFZQyxVQUFaLEVBQXdCQyxPQUF4QixFQUFpQztBQUMvQkQsZUFBYUEsV0FBV0UsS0FBWCxDQUFpQixHQUFqQixDQUFiLENBRCtCLENBQ0s7O0FBRXBDRixhQUFXRyxPQUFYLENBQW1CLFVBQVNDLFNBQVQsRUFBb0I7QUFDckMsUUFBTUMsbUJBQW1CLEtBQUtDLFVBQUwsQ0FBZ0JGLFNBQWhCLEVBQTJCSCxPQUEzQixDQUF6Qjs7QUFFQSxRQUFJSSxnQkFBSixFQUFzQjtBQUNwQixXQUFLRSxVQUFMLENBQWdCRixnQkFBaEIsQ0FBaUNELFNBQWpDLEVBQTRDSSxjQUFjQyxJQUFkLENBQW1CLElBQW5CLENBQTVDO0FBQ0Q7QUFDRixHQU5rQixDQU1qQkEsSUFOaUIsQ0FNWixJQU5ZLENBQW5CO0FBT0Q7O0FBRUQsU0FBU0MsR0FBVCxDQUFhVixVQUFiLEVBQXlCQyxPQUF6QixFQUFrQztBQUNoQ0QsZUFBYUEsV0FBV0UsS0FBWCxDQUFpQixHQUFqQixDQUFiLENBRGdDLENBQ0k7O0FBRXBDRixhQUFXRyxPQUFYLENBQW1CLFVBQVNDLFNBQVQsRUFBb0I7QUFDckMsUUFBTU8sc0JBQXNCLEtBQUtDLGFBQUwsQ0FBbUJSLFNBQW5CLEVBQThCSCxPQUE5QixDQUE1Qjs7QUFFQSxRQUFJVSxtQkFBSixFQUF5QjtBQUN2QixXQUFLSixVQUFMLENBQWdCSSxtQkFBaEIsQ0FBb0NQLFNBQXBDLEVBQStDSSxjQUFjQyxJQUFkLENBQW1CLElBQW5CLENBQS9DO0FBQ0Q7QUFDRixHQU5rQixDQU1qQkEsSUFOaUIsQ0FNWixJQU5ZLENBQW5CO0FBT0Q7O0FBRUQsU0FBU0gsVUFBVCxDQUFvQkYsU0FBcEIsRUFBK0JILE9BQS9CLEVBQXdDO0FBQ3RDLE1BQUlJLG1CQUFtQixLQUF2QjtBQUFBLE1BQ0lRLFdBQVcsS0FBS0MsV0FBTCxDQUFpQlYsU0FBakIsQ0FEZjs7QUFHQSxNQUFJUyxhQUFhRSxTQUFqQixFQUE0QjtBQUMxQkYsZUFBVyxFQUFYOztBQUVBLFNBQUtDLFdBQUwsQ0FBaUJWLFNBQWpCLElBQThCUyxRQUE5Qjs7QUFFQVIsdUJBQW1CLElBQW5CO0FBQ0Q7O0FBRURRLFdBQVNHLElBQVQsQ0FBY2YsT0FBZDs7QUFFQSxTQUFPSSxnQkFBUDtBQUNEOztBQUVELFNBQVNPLGFBQVQsQ0FBdUJSLFNBQXZCLEVBQWtDSCxPQUFsQyxFQUEyQztBQUN6QyxNQUFJVSxzQkFBc0IsS0FBMUI7QUFBQSxNQUNJRSxXQUFXLEtBQUtDLFdBQUwsQ0FBaUJWLFNBQWpCLENBRGY7O0FBR0EsTUFBSVMsU0FBU0ksTUFBVCxLQUFvQixDQUF4QixFQUEyQjtBQUN6QixXQUFRLEtBQUtILFdBQUwsQ0FBaUJWLFNBQWpCLENBQVI7O0FBRUFPLDBCQUFzQixJQUF0QjtBQUNELEdBSkQsTUFJTztBQUNMLFFBQU1PLFFBQVFMLFNBQVNNLE9BQVQsQ0FBaUJsQixPQUFqQixDQUFkOztBQUVBLFFBQUlpQixRQUFRLENBQUMsQ0FBYixFQUFnQjtBQUNkLFVBQU1FLGNBQWMsQ0FBcEI7O0FBRUFQLGVBQVNRLE1BQVQsQ0FBZ0JILEtBQWhCLEVBQXVCRSxXQUF2QjtBQUNEO0FBQ0Y7O0FBRUQsU0FBT1QsbUJBQVA7QUFDRDs7QUFFRCxJQUFNVyxRQUFRO0FBQ1p2QixNQUFJQSxFQURRO0FBRVpXLE9BQUtBLEdBRk87QUFHWkosY0FBWUEsVUFIQTtBQUlaTSxpQkFBZUE7QUFKSCxDQUFkOztBQU9BVyxPQUFPQyxPQUFQLEdBQWlCRixLQUFqQjs7QUFFQSxTQUFTZCxhQUFULENBQXVCYyxLQUF2QixFQUE4QjtBQUM1QixNQUFNbEIsWUFBWWtCLE1BQU1HLElBQXhCO0FBQUEsTUFDTVosV0FBVyxLQUFLQyxXQUFMLENBQWlCVixTQUFqQixDQURqQjs7QUFHQSxNQUFJc0Isc0JBQXNCLEtBQTFCOztBQUVBYixXQUFTVixPQUFULENBQWlCLFVBQVNGLE9BQVQsRUFBa0I7QUFDakMsUUFBSUEsUUFBUTBCLG1CQUFSLEtBQWdDWixTQUFwQyxFQUErQztBQUM3QyxVQUFNYSxpQkFBaUIzQixRQUFRMEIsbUJBQVIsQ0FBNEIxQixPQUE1QixFQUFxQ3FCLEtBQXJDLENBQXZCOztBQUVBLFVBQUlNLG1CQUFtQixJQUF2QixFQUE2QjtBQUMzQkYsOEJBQXNCLElBQXRCO0FBQ0Q7QUFDRixLQU5ELE1BTU87QUFDTCxVQUFNRSxrQkFBaUIzQixRQUFRcUIsS0FBUixDQUF2Qjs7QUFFQSxVQUFJTSxvQkFBbUIsSUFBdkIsRUFBNkI7QUFDM0JGLDhCQUFzQixJQUF0QjtBQUNEO0FBQ0Y7QUFDRixHQWREOztBQWdCQSxNQUFJQSxtQkFBSixFQUF5QjtBQUN2QkosVUFBTU0sY0FBTjtBQUNEO0FBQ0YiLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIG9uKGV2ZW50VHlwZXMsIGhhbmRsZXIpIHtcbiAgZXZlbnRUeXBlcyA9IGV2ZW50VHlwZXMuc3BsaXQoJyAnKTsgLy8vXG5cbiAgZXZlbnRUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50VHlwZSkge1xuICAgIGNvbnN0IGFkZEV2ZW50TGlzdGVuZXIgPSB0aGlzLmFkZEhhbmRsZXIoZXZlbnRUeXBlLCBoYW5kbGVyKTtcblxuICAgIGlmIChhZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGV2ZW50TGlzdGVuZXIuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9LmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBvZmYoZXZlbnRUeXBlcywgaGFuZGxlcikge1xuICBldmVudFR5cGVzID0gZXZlbnRUeXBlcy5zcGxpdCgnICcpOyAvLy9cblxuICBldmVudFR5cGVzLmZvckVhY2goZnVuY3Rpb24oZXZlbnRUeXBlKSB7XG4gICAgY29uc3QgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IHRoaXMucmVtb3ZlSGFuZGxlcihldmVudFR5cGUsIGhhbmRsZXIpO1xuICAgIFxuICAgIGlmIChyZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICB0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGV2ZW50TGlzdGVuZXIuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9LmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBhZGRIYW5kbGVyKGV2ZW50VHlwZSwgaGFuZGxlcikge1xuICBsZXQgYWRkRXZlbnRMaXN0ZW5lciA9IGZhbHNlLFxuICAgICAgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzTWFwW2V2ZW50VHlwZV07XG5cbiAgaWYgKGhhbmRsZXJzID09PSB1bmRlZmluZWQpIHtcbiAgICBoYW5kbGVycyA9IFtdO1xuXG4gICAgdGhpcy5oYW5kbGVyc01hcFtldmVudFR5cGVdID0gaGFuZGxlcnM7XG5cbiAgICBhZGRFdmVudExpc3RlbmVyID0gdHJ1ZTtcbiAgfVxuXG4gIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG5cbiAgcmV0dXJuIGFkZEV2ZW50TGlzdGVuZXI7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUhhbmRsZXIoZXZlbnRUeXBlLCBoYW5kbGVyKSB7XG4gIGxldCByZW1vdmVFdmVudExpc3RlbmVyID0gZmFsc2UsXG4gICAgICBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnNNYXBbZXZlbnRUeXBlXTtcblxuICBpZiAoaGFuZGxlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgZGVsZXRlICh0aGlzLmhhbmRsZXJzTWFwW2V2ZW50VHlwZV0pO1xuXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgaW5kZXggPSBoYW5kbGVycy5pbmRleE9mKGhhbmRsZXIpO1xuXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIGNvbnN0IGRlbGV0ZUNvdW50ID0gMTtcblxuICAgICAgaGFuZGxlcnMuc3BsaWNlKGluZGV4LCBkZWxldGVDb3VudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlbW92ZUV2ZW50TGlzdGVuZXI7XG59XG5cbmNvbnN0IGV2ZW50ID0ge1xuICBvbjogb24sXG4gIG9mZjogb2ZmLFxuICBhZGRIYW5kbGVyOiBhZGRIYW5kbGVyLFxuICByZW1vdmVIYW5kbGVyOiByZW1vdmVIYW5kbGVyXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV2ZW50O1xuXG5mdW5jdGlvbiBldmVudExpc3RlbmVyKGV2ZW50KSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9IGV2ZW50LnR5cGUsXG4gICAgICAgIGhhbmRsZXJzID0gdGhpcy5oYW5kbGVyc01hcFtldmVudFR5cGVdO1xuXG4gIGxldCBwcmV2ZW50RXZlbnREZWZhdWx0ID0gZmFsc2U7XG5cbiAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgaWYgKGhhbmRsZXIuaW50ZXJtZWRpYXRlSGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBwcmV2ZW50RGVmYXVsdCA9IGhhbmRsZXIuaW50ZXJtZWRpYXRlSGFuZGxlcihoYW5kbGVyLCBldmVudCk7XG4gICAgICBcbiAgICAgIGlmIChwcmV2ZW50RGVmYXVsdCA9PT0gdHJ1ZSkge1xuICAgICAgICBwcmV2ZW50RXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICAgIH0gIFxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwcmV2ZW50RGVmYXVsdCA9IGhhbmRsZXIoZXZlbnQpO1xuICAgICAgXG4gICAgICBpZiAocHJldmVudERlZmF1bHQgPT09IHRydWUpIHtcbiAgICAgICAgcHJldmVudEV2ZW50RGVmYXVsdCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgXG4gIGlmIChwcmV2ZW50RXZlbnREZWZhdWx0KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxufVxuIl19