'use strict';

function on(eventTypes, handler) {
  var object = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var intermediateHandler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var eventListener = this.addEventListener(eventType, handler, object, intermediateHandler);

    this.domElement.addEventListener(eventType, eventListener);
  }.bind(this));
}

function off(eventTypes, handler) {
  var object = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var eventListener = this.removeEventListener(eventType, handler, object);

    this.domElement.removeEventListener(eventType, eventListener);
  }.bind(this));
}

var eventMixin = {
  on: on,
  off: off,
  addEventListener: addEventListener,
  removeEventListener: removeEventListener
};

module.exports = eventMixin;

function addEventListener(eventType, handler, object, intermediateHandler) {
  if (!this.hasOwnProperty('eventListeners')) {
    this.eventListeners = [];
  }

  var targetElement = this,
      ///
  eventListeners = this.eventListeners,
      eventListener = createEventListener(targetElement, eventType, handler, object, intermediateHandler);

  eventListeners.push(eventListener);

  return eventListener;
}

function removeEventListener(eventType, handler, object) {
  var eventListeners = this.eventListeners,
      eventListener = findEventListener(eventListeners, eventType, handler, object),
      index = eventListeners.indexOf(eventListener),
      start = index,
      ///
  deleteCount = 1;

  eventListeners.splice(start, deleteCount);

  if (eventListeners.length === 0) {
    delete this.eventListeners;
  }

  return eventListener;
}

function createEventListener(targetElement, eventType, handler, object, intermediateHandler) {
  var eventListener = void 0;

  if (intermediateHandler === null) {
    eventListener = function eventListener(event) {
      handler.call(object, event, targetElement);
    };
  } else {
    eventListener = function eventListener(event) {
      intermediateHandler(function (event) {
        handler.call.apply(handler, [object].concat(Array.prototype.slice.call(arguments)));
      }, event, targetElement);
    };
  }

  Object.assign(eventListener, {
    eventType: eventType,
    handler: handler,
    object: object
  });

  return eventListener;
}

function findEventListener(eventListeners, eventType, handler, object) {
  var eventListener = eventListeners.find(function (eventListener) {
    var found = eventListener.object === object && eventListener.handler === handler && eventListener.eventType === eventType; ///

    return found;
  });

  return eventListener;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9ldmVudC5qcyJdLCJuYW1lcyI6WyJvbiIsImV2ZW50VHlwZXMiLCJoYW5kbGVyIiwib2JqZWN0IiwiaW50ZXJtZWRpYXRlSGFuZGxlciIsInNwbGl0IiwiZm9yRWFjaCIsImV2ZW50VHlwZSIsImV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZG9tRWxlbWVudCIsImJpbmQiLCJvZmYiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZXZlbnRNaXhpbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJoYXNPd25Qcm9wZXJ0eSIsImV2ZW50TGlzdGVuZXJzIiwidGFyZ2V0RWxlbWVudCIsImNyZWF0ZUV2ZW50TGlzdGVuZXIiLCJwdXNoIiwiZmluZEV2ZW50TGlzdGVuZXIiLCJpbmRleCIsImluZGV4T2YiLCJzdGFydCIsImRlbGV0ZUNvdW50Iiwic3BsaWNlIiwibGVuZ3RoIiwiZXZlbnQiLCJjYWxsIiwiYXJndW1lbnRzIiwiT2JqZWN0IiwiYXNzaWduIiwiZmluZCIsImZvdW5kIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSxFQUFULENBQVlDLFVBQVosRUFBd0JDLE9BQXhCLEVBQTRFO0FBQUEsTUFBM0NDLE1BQTJDLHVFQUFsQyxJQUFrQztBQUFBLE1BQTVCQyxtQkFBNEIsdUVBQU4sSUFBTTs7QUFDMUVILGVBQWFBLFdBQVdJLEtBQVgsQ0FBaUIsR0FBakIsQ0FBYixDQUQwRSxDQUN0Qzs7QUFFcENKLGFBQVdLLE9BQVgsQ0FBbUIsVUFBU0MsU0FBVCxFQUFvQjtBQUNyQyxRQUFNQyxnQkFBZ0IsS0FBS0MsZ0JBQUwsQ0FBc0JGLFNBQXRCLEVBQWlDTCxPQUFqQyxFQUEwQ0MsTUFBMUMsRUFBa0RDLG1CQUFsRCxDQUF0Qjs7QUFFQSxTQUFLTSxVQUFMLENBQWdCRCxnQkFBaEIsQ0FBaUNGLFNBQWpDLEVBQTRDQyxhQUE1QztBQUNELEdBSmtCLENBSWpCRyxJQUppQixDQUlaLElBSlksQ0FBbkI7QUFLRDs7QUFF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YyxpQkFBVCxDQUEyQkosY0FBM0IsRUFBMkNYLFNBQTNDLEVBQXNETCxPQUF0RCxFQUErREMsTUFBL0QsRUFBdUU7QUFDckUsTUFBTUssZ0JBQWdCVSxlQUFlZ0IsSUFBZixDQUFvQixVQUFTMUIsYUFBVCxFQUF3QjtBQUNoRSxRQUFNMkIsUUFBVzNCLGNBQWNMLE1BQWQsS0FBeUJBLE1BQTFCLElBQ0NLLGNBQWNOLE9BQWQsS0FBMEJBLE9BRDNCLElBRUNNLGNBQWNELFNBQWQsS0FBNEJBLFNBRjdDLENBRGdFLENBR0o7O0FBRTVELFdBQU80QixLQUFQO0FBQ0QsR0FOcUIsQ0FBdEI7O0FBUUEsU0FBTzNCLGFBQVA7QUFDRCIsImZpbGUiOiJldmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gb24oZXZlbnRUeXBlcywgaGFuZGxlciwgb2JqZWN0ID0gbnVsbCwgaW50ZXJtZWRpYXRlSGFuZGxlciA9IG51bGwpIHtcbiAgZXZlbnRUeXBlcyA9IGV2ZW50VHlwZXMuc3BsaXQoJyAnKTsgLy8vXG5cbiAgZXZlbnRUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50VHlwZSkge1xuICAgIGNvbnN0IGV2ZW50TGlzdGVuZXIgPSB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBvYmplY3QsIGludGVybWVkaWF0ZUhhbmRsZXIpO1xuICAgIFxuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgZXZlbnRMaXN0ZW5lcik7XG4gIH0uYmluZCh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIG9mZihldmVudFR5cGVzLCBoYW5kbGVyLCBvYmplY3QgPSBudWxsKSB7XG4gIGV2ZW50VHlwZXMgPSBldmVudFR5cGVzLnNwbGl0KCcgJyk7IC8vL1xuXG4gIGV2ZW50VHlwZXMuZm9yRWFjaChmdW5jdGlvbihldmVudFR5cGUpIHtcbiAgICBjb25zdCBldmVudExpc3RlbmVyID0gdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgb2JqZWN0KTtcblxuICAgIHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgZXZlbnRMaXN0ZW5lcik7XG4gIH0uYmluZCh0aGlzKSk7XG59XG5cbmNvbnN0IGV2ZW50TWl4aW4gPSB7XG4gIG9uOiBvbixcbiAgb2ZmOiBvZmYsXG4gIGFkZEV2ZW50TGlzdGVuZXI6IGFkZEV2ZW50TGlzdGVuZXIsXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI6IHJlbW92ZUV2ZW50TGlzdGVuZXJcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXZlbnRNaXhpbjtcblxuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIG9iamVjdCwgaW50ZXJtZWRpYXRlSGFuZGxlcikge1xuICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ2V2ZW50TGlzdGVuZXJzJykpIHtcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXJzID0gW107XG4gIH1cbiAgXG4gIGNvbnN0IHRhcmdldEVsZW1lbnQgPSB0aGlzLCAvLy9cbiAgICAgICAgZXZlbnRMaXN0ZW5lcnMgPSB0aGlzLmV2ZW50TGlzdGVuZXJzLFxuICAgICAgICBldmVudExpc3RlbmVyID0gY3JlYXRlRXZlbnRMaXN0ZW5lcih0YXJnZXRFbGVtZW50LCBldmVudFR5cGUsIGhhbmRsZXIsIG9iamVjdCwgaW50ZXJtZWRpYXRlSGFuZGxlcik7XG5cbiAgZXZlbnRMaXN0ZW5lcnMucHVzaChldmVudExpc3RlbmVyKTtcblxuICByZXR1cm4gZXZlbnRMaXN0ZW5lcjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIG9iamVjdCkge1xuICBjb25zdCBldmVudExpc3RlbmVycyA9IHRoaXMuZXZlbnRMaXN0ZW5lcnMsXG4gICAgICAgIGV2ZW50TGlzdGVuZXIgPSBmaW5kRXZlbnRMaXN0ZW5lcihldmVudExpc3RlbmVycywgZXZlbnRUeXBlLCBoYW5kbGVyLCBvYmplY3QpLFxuICAgICAgICBpbmRleCA9IGV2ZW50TGlzdGVuZXJzLmluZGV4T2YoZXZlbnRMaXN0ZW5lciksXG4gICAgICAgIHN0YXJ0ID0gaW5kZXgsICAvLy9cbiAgICAgICAgZGVsZXRlQ291bnQgPSAxO1xuXG4gIGV2ZW50TGlzdGVuZXJzLnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQpO1xuXG4gIGlmIChldmVudExpc3RlbmVycy5sZW5ndGggPT09IDApIHtcbiAgICBkZWxldGUgdGhpcy5ldmVudExpc3RlbmVycztcbiAgfVxuICBcbiAgcmV0dXJuIGV2ZW50TGlzdGVuZXI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50TGlzdGVuZXIodGFyZ2V0RWxlbWVudCwgZXZlbnRUeXBlLCBoYW5kbGVyLCBvYmplY3QsIGludGVybWVkaWF0ZUhhbmRsZXIpIHtcbiAgbGV0IGV2ZW50TGlzdGVuZXI7XG4gIFxuICBpZiAoaW50ZXJtZWRpYXRlSGFuZGxlciA9PT0gbnVsbCkge1xuICAgIGV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgaGFuZGxlci5jYWxsKG9iamVjdCwgZXZlbnQsIHRhcmdldEVsZW1lbnQpXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBldmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGludGVybWVkaWF0ZUhhbmRsZXIoZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgaGFuZGxlci5jYWxsKG9iamVjdCwgLi4uYXJndW1lbnRzKTtcbiAgICAgIH0sIGV2ZW50LCB0YXJnZXRFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICBPYmplY3QuYXNzaWduKGV2ZW50TGlzdGVuZXIsIHtcbiAgICBldmVudFR5cGU6IGV2ZW50VHlwZSxcbiAgICBoYW5kbGVyOiBoYW5kbGVyLFxuICAgIG9iamVjdDogb2JqZWN0XG4gIH0pO1xuXG4gIHJldHVybiBldmVudExpc3RlbmVyO1xufVxuXG5mdW5jdGlvbiBmaW5kRXZlbnRMaXN0ZW5lcihldmVudExpc3RlbmVycywgZXZlbnRUeXBlLCBoYW5kbGVyLCBvYmplY3QpIHtcbiAgY29uc3QgZXZlbnRMaXN0ZW5lciA9IGV2ZW50TGlzdGVuZXJzLmZpbmQoZnVuY3Rpb24oZXZlbnRMaXN0ZW5lcikge1xuICAgIGNvbnN0IGZvdW5kID0gKCAoZXZlbnRMaXN0ZW5lci5vYmplY3QgPT09IG9iamVjdCkgJiYgXG4gICAgICAgICAgICAgICAgICAgIChldmVudExpc3RlbmVyLmhhbmRsZXIgPT09IGhhbmRsZXIpICYmIFxuICAgICAgICAgICAgICAgICAgICAoZXZlbnRMaXN0ZW5lci5ldmVudFR5cGUgPT09IGV2ZW50VHlwZSkgKTsgIC8vL1xuICAgIFxuICAgIHJldHVybiBmb3VuZDtcbiAgfSk7XG4gIFxuICByZXR1cm4gZXZlbnRMaXN0ZW5lcjtcbn1cbiJdfQ==