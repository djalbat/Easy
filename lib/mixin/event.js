'use strict';

var arrayUtil = require('../util/array');

function on(eventTypes, handler) {
  var object = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var intermediateHandler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var eventListener = this.addEventListener(eventType, handler, object, intermediateHandler);

    this.domElement.addEventListener(eventType, eventListener);
  }.bind(this));
}

function off(eventTypes, handler) {
  var object = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var eventListener = this.removeEventListener(eventType, handler, object);

    this.domElement.removeEventListener(eventType, eventListener);
  }.bind(this));
}

var eventMixin = {
  on: on,
  off: off,
  addEventListener: addEventListener,
  removeEventListener: removeEventListener
};

module.exports = eventMixin;

function addEventListener(eventType, handler, object, intermediateHandler) {
  if (!this.hasOwnProperty('eventListeners')) {
    this.eventListeners = [];
  }

  var targetElement = this,
      ///
  eventListeners = this.eventListeners,
      eventListener = createEventListener(targetElement, eventType, handler, object, intermediateHandler);

  eventListeners.push(eventListener);

  return eventListeners;
}

function removeEventListener(eventType, handler, object) {
  var eventListeners = this.eventListeners,
      eventListener = findEventListener(eventListeners, eventType, handler, object),
      index = eventListeners.indexOf(eventListener),
      start = index,
      ///
  deleteCount = 1;

  eventListeners.splice(start, deleteCount);

  if (eventListeners.length === 0) {
    delete this.eventListeners;
  }

  return eventListener;
}

function createEventListener(targetElement, eventType, handler, object, intermediateHandler) {
  var eventListener = void 0;

  if (intermediateHandler === null) {
    eventListener = function eventListener(event) {
      handler.call(object, event, targetElement);
    };
  } else {
    eventListener = function eventListener(event) {
      intermediateHandler(function (event) {
        handler.call.apply(handler, [object].concat(Array.prototype.slice.call(arguments)));
      }, event, targetElement);
    };
  }

  Object.assign(eventListener, {
    eventType: eventType,
    handler: handler,
    object: object
  });

  return eventListener;
}

function findEventListener(eventListeners, eventType, handler, object) {
  var eventListener = arrayUtil.find(eventListeners, function (eventListener) {
    var found = eventListener.object === object && eventListener.handler === handler && eventListener.eventType === eventType; ///

    return found;
  });

  return eventListener;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9ldmVudC5qcyJdLCJuYW1lcyI6WyJhcnJheVV0aWwiLCJyZXF1aXJlIiwib24iLCJldmVudFR5cGVzIiwiaGFuZGxlciIsIm9iamVjdCIsImludGVybWVkaWF0ZUhhbmRsZXIiLCJzcGxpdCIsImZvckVhY2giLCJldmVudFR5cGUiLCJldmVudExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRvbUVsZW1lbnQiLCJiaW5kIiwib2ZmIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImV2ZW50TWl4aW4iLCJtb2R1bGUiLCJleHBvcnRzIiwiaGFzT3duUHJvcGVydHkiLCJldmVudExpc3RlbmVycyIsInRhcmdldEVsZW1lbnQiLCJjcmVhdGVFdmVudExpc3RlbmVyIiwicHVzaCIsImZpbmRFdmVudExpc3RlbmVyIiwiaW5kZXgiLCJpbmRleE9mIiwic3RhcnQiLCJkZWxldGVDb3VudCIsInNwbGljZSIsImxlbmd0aCIsImV2ZW50IiwiY2FsbCIsImFyZ3VtZW50cyIsIk9iamVjdCIsImFzc2lnbiIsImZpbmQiLCJmb3VuZCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsWUFBWUMsUUFBUSxlQUFSLENBQWxCOztBQUVBLFNBQVNDLEVBQVQsQ0FBWUMsVUFBWixFQUF3QkMsT0FBeEIsRUFBNEU7QUFBQSxNQUEzQ0MsTUFBMkMsdUVBQWxDLElBQWtDO0FBQUEsTUFBNUJDLG1CQUE0Qix1RUFBTixJQUFNOztBQUMxRUgsZUFBYUEsV0FBV0ksS0FBWCxDQUFpQixHQUFqQixDQUFiLENBRDBFLENBQ3RDOztBQUVwQ0osYUFBV0ssT0FBWCxDQUFtQixVQUFTQyxTQUFULEVBQW9CO0FBQ3JDLFFBQU1DLGdCQUFnQixLQUFLQyxnQkFBTCxDQUFzQkYsU0FBdEIsRUFBaUNMLE9BQWpDLEVBQTBDQyxNQUExQyxFQUFrREMsbUJBQWxELENBQXRCOztBQUVBLFNBQUtNLFVBQUwsQ0FBZ0JELGdCQUFoQixDQUFpQ0YsU0FBakMsRUFBNEND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QUczQkMsWUFBUUE7QUFIbUIsR0FBN0I7O0FBTUEsU0FBT0ssYUFBUDtBQUNEOztBQUVELFNBQVNjLGlCQUFULENBQTJCSixjQUEzQixFQUEyQ1gsU0FBM0MsRUFBc0RMLE9BQXRELEVBQStEQyxNQUEvRCxFQUF1RTtBQUNyRSxNQUFNSyxnQkFBZ0JWLFVBQVVvQyxJQUFWLENBQWVoQixjQUFmLEVBQStCLFVBQVNWLGFBQVQsRUFBd0I7QUFDM0UsUUFBTTJCLFFBQVczQixjQUFjTCxNQUFkLEtBQXlCQSxNQUExQixJQUNDSyxjQUFjTixPQUFkLEtBQTBCQSxPQUQzQixJQUVDTSxjQUFjRCxTQUFkLEtBQTRCQSxTQUY3QyxDQUQyRSxDQUdmOztBQUU1RCxXQUFPNEIsS0FBUDtBQUNELEdBTnFCLENBQXRCOztBQVFBLFNBQU8zQixhQUFQO0FBQ0QiLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGFycmF5VXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwvYXJyYXknKTtcblxuZnVuY3Rpb24gb24oZXZlbnRUeXBlcywgaGFuZGxlciwgb2JqZWN0ID0gbnVsbCwgaW50ZXJtZWRpYXRlSGFuZGxlciA9IG51bGwpIHtcbiAgZXZlbnRUeXBlcyA9IGV2ZW50VHlwZXMuc3BsaXQoJyAnKTsgLy8vXG5cbiAgZXZlbnRUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50VHlwZSkge1xuICAgIGNvbnN0IGV2ZW50TGlzdGVuZXIgPSB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBvYmplY3QsIGludGVybWVkaWF0ZUhhbmRsZXIpO1xuICAgIFxuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgZXZlbnRMaXN0ZW5lcik7XG4gIH0uYmluZCh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIG9mZihldmVudFR5cGVzLCBoYW5kbGVyLCBvYmplY3QgPSBudWxsKSB7XG4gIGV2ZW50VHlwZXMgPSBldmVudFR5cGVzLnNwbGl0KCcgJyk7IC8vL1xuXG4gIGV2ZW50VHlwZXMuZm9yRWFjaChmdW5jdGlvbihldmVudFR5cGUpIHtcbiAgICBjb25zdCBldmVudExpc3RlbmVyID0gdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgb2JqZWN0KTtcblxuICAgIHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgZXZlbnRMaXN0ZW5lcik7XG4gIH0uYmluZCh0aGlzKSk7XG59XG5cbmNvbnN0IGV2ZW50TWl4aW4gPSB7XG4gIG9uOiBvbixcbiAgb2ZmOiBvZmYsXG4gIGFkZEV2ZW50TGlzdGVuZXI6IGFkZEV2ZW50TGlzdGVuZXIsXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI6IHJlbW92ZUV2ZW50TGlzdGVuZXJcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXZlbnRNaXhpbjtcblxuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIG9iamVjdCwgaW50ZXJtZWRpYXRlSGFuZGxlcikge1xuICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ2V2ZW50TGlzdGVuZXJzJykpIHtcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXJzID0gW107XG4gIH1cbiAgXG4gIGNvbnN0IHRhcmdldEVsZW1lbnQgPSB0aGlzLCAvLy9cbiAgICAgICAgZXZlbnRMaXN0ZW5lcnMgPSB0aGlzLmV2ZW50TGlzdGVuZXJzLFxuICAgICAgICBldmVudExpc3RlbmVyID0gY3JlYXRlRXZlbnRMaXN0ZW5lcih0YXJnZXRFbGVtZW50LCBldmVudFR5cGUsIGhhbmRsZXIsIG9iamVjdCwgaW50ZXJtZWRpYXRlSGFuZGxlcik7XG5cbiAgZXZlbnRMaXN0ZW5lcnMucHVzaChldmVudExpc3RlbmVyKTtcblxuICByZXR1cm4gZXZlbnRMaXN0ZW5lcnM7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBvYmplY3QpIHtcbiAgY29uc3QgZXZlbnRMaXN0ZW5lcnMgPSB0aGlzLmV2ZW50TGlzdGVuZXJzLFxuICAgICAgICBldmVudExpc3RlbmVyID0gZmluZEV2ZW50TGlzdGVuZXIoZXZlbnRMaXN0ZW5lcnMsIGV2ZW50VHlwZSwgaGFuZGxlciwgb2JqZWN0KSxcbiAgICAgICAgaW5kZXggPSBldmVudExpc3RlbmVycy5pbmRleE9mKGV2ZW50TGlzdGVuZXIpLFxuICAgICAgICBzdGFydCA9IGluZGV4LCAgLy8vXG4gICAgICAgIGRlbGV0ZUNvdW50ID0gMTtcblxuICBldmVudExpc3RlbmVycy5zcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50KTtcblxuICBpZiAoZXZlbnRMaXN0ZW5lcnMubGVuZ3RoID09PSAwKSB7XG4gICAgZGVsZXRlIHRoaXMuZXZlbnRMaXN0ZW5lcnM7XG4gIH1cbiAgXG4gIHJldHVybiBldmVudExpc3RlbmVyO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudExpc3RlbmVyKHRhcmdldEVsZW1lbnQsIGV2ZW50VHlwZSwgaGFuZGxlciwgb2JqZWN0LCBpbnRlcm1lZGlhdGVIYW5kbGVyKSB7XG4gIGxldCBldmVudExpc3RlbmVyO1xuICBcbiAgaWYgKGludGVybWVkaWF0ZUhhbmRsZXIgPT09IG51bGwpIHtcbiAgICBldmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGhhbmRsZXIuY2FsbChvYmplY3QsIGV2ZW50LCB0YXJnZXRFbGVtZW50KVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBpbnRlcm1lZGlhdGVIYW5kbGVyKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGhhbmRsZXIuY2FsbChvYmplY3QsIC4uLmFyZ3VtZW50cyk7XG4gICAgICB9LCBldmVudCwgdGFyZ2V0RWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmFzc2lnbihldmVudExpc3RlbmVyLCB7XG4gICAgZXZlbnRUeXBlOiBldmVudFR5cGUsXG4gICAgaGFuZGxlcjogaGFuZGxlcixcbiAgICBvYmplY3Q6IG9iamVjdFxuICB9KTtcblxuICByZXR1cm4gZXZlbnRMaXN0ZW5lcjtcbn1cblxuZnVuY3Rpb24gZmluZEV2ZW50TGlzdGVuZXIoZXZlbnRMaXN0ZW5lcnMsIGV2ZW50VHlwZSwgaGFuZGxlciwgb2JqZWN0KSB7XG4gIGNvbnN0IGV2ZW50TGlzdGVuZXIgPSBhcnJheVV0aWwuZmluZChldmVudExpc3RlbmVycywgZnVuY3Rpb24oZXZlbnRMaXN0ZW5lcikge1xuICAgIGNvbnN0IGZvdW5kID0gKCAoZXZlbnRMaXN0ZW5lci5vYmplY3QgPT09IG9iamVjdCkgJiYgXG4gICAgICAgICAgICAgICAgICAgIChldmVudExpc3RlbmVyLmhhbmRsZXIgPT09IGhhbmRsZXIpICYmIFxuICAgICAgICAgICAgICAgICAgICAoZXZlbnRMaXN0ZW5lci5ldmVudFR5cGUgPT09IGV2ZW50VHlwZSkgKTsgIC8vL1xuICAgIFxuICAgIHJldHVybiBmb3VuZDtcbiAgfSk7XG4gIFxuICByZXR1cm4gZXZlbnRMaXN0ZW5lcjtcbn1cbiJdfQ==