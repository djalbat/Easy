'use strict';

function on(eventTypes, handler) {
  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var addEventListener = this.addHandler(eventType, handler);

    if (addEventListener) {
      this.domElement.addEventListener(eventType, eventListener.bind(this));
    }
  }.bind(this));
}

function off(eventTypes, handler) {
  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var removeEventListener = this.removeHandler(eventType, handler);

    if (removeEventListener) {
      this.domElement.removeEventListener(eventType, eventListener.bind(this));
    }
  }.bind(this));
}

function addHandler(eventType, handler) {
  var addEventListener = false,
      handlers = this.handlersMap[eventType];

  if (handlers === undefined) {
    handlers = [];

    this.handlersMap[eventType] = handlers;

    addEventListener = true;
  }

  handlers.push(handler);

  return addEventListener;
}

function removeHandler(eventType) {
  var handler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  var removeEventListener = false;

  var handlers = this.handlersMap[eventType];

  if (handler === null) {
    var start = 0;

    handlers.splice(start);
  } else {
    var index = handlers.indexOf(handler);

    if (index > -1) {
      var _start = index,
          ///
      deleteCount = 1;

      handlers.splice(_start, deleteCount);
    }
  }

  if (handlers.length === 0) {
    ///
    delete this.handlersMap[eventType];

    removeEventListener = true;
  }

  return removeEventListener;
}

var eventMixin = {
  on: on,
  off: off,
  addHandler: addHandler,
  removeHandler: removeHandler
};

module.exports = eventMixin;

function eventListener(event) {
  var eventType = event.type,
      targetElement = this,
      ///
  handlers = this.handlersMap[eventType];

  var preventEventDefault = false;

  handlers.forEach(function (handler) {
    if (handler.intermediateHandler !== undefined) {
      var preventDefault = handler.intermediateHandler(handler, event, targetElement);

      if (preventDefault === true) {
        preventEventDefault = true;
      }
    } else {
      var _preventDefault = handler(event, targetElement);

      if (_preventDefault === true) {
        preventEventDefault = true;
      }
    }
  });

  if (preventEventDefault) {
    event.preventDefault();
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9ldmVudC5qcyJdLCJuYW1lcyI6WyJvbiIsImV2ZW50VHlwZXMiLCJoYW5kbGVyIiwic3BsaXQiLCJmb3JFYWNoIiwiZXZlbnRUeXBlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImFkZEhhbmRsZXIiLCJkb21FbGVtZW50IiwiZXZlbnRMaXN0ZW5lciIsImJpbmQiLCJvZmYiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlSGFuZGxlciIsImhhbmRsZXJzIiwiaGFuZGxlcnNNYXAiLCJ1bmRlZmluZWQiLCJwdXNoIiwic3RhcnQiLCJzcGxpY2UiLCJpbmRleCIsImluZGV4T2YiLCJkZWxldGVDb3VudCIsImxlbmd0aCIsImV2ZW50TWl4aW4iLCJtb2R1bGUiLCJleHBvcnRzIiwiZXZlbnQiLCJ0eXBlIiwidGFyZ2V0RWxlbWVudCIsInByZXZlbnRFdmVudERlZmF1bHQiLCJpbnRlcm1lZGlhdGVIYW5kbGVyIiwicHJldmVudERlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFNBQVNBLEVBQVQsQ0FBWUMsVUFBWixFQUF3QkMsT0FBeEIsRUFBaUM7QUFDL0JELGVBQWFBLFdBQVdFLEtBQVgsQ0FBaUIsR0FBakIsQ0FBYixDQUQrQixDQUNLOztBQUVwQ0YsYUFBV0csT0FBWCxDQUFtQixVQUFTQyxTQUFULEVBQW9CO0FBQ3JDLFFBQU1DLG1CQUFtQixLQUFLQyxVQUFMLENBQWdCRixTQUFoQixFQUEyQkgsT0FBM0IsQ0FBekI7O0FBRUEsUUFBSUksZ0JBQUosRUFBc0I7QUFDcEIsV0FBS0UsVUFBTCxDQUFnQkYsZ0JBQWhCLENBQWlDRCxTQUFqQyxFQUE0Q0ksY0FBY0MsSUFBZCxDQUFtQixJQUFuQixDQUE1QztBQUNEO0FBQ0YsR0FOa0IsQ0FNakJBLElBTmlCLENBTVosSUFOWSxDQUFuQjtBQU9EOztBQUVELFNBQVNDLEdBQVQsQ0FBYVYsVUFBYixFQUF5QkMsT0FBekIsRUFBa0M7QUFDaENELGVBQWFBLFdBQVdFLEtB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QUlBLG1CQUFKLEVBQXlCO0FBQ3ZCSCxVQUFNSyxjQUFOO0FBQ0Q7QUFDRiIsImZpbGUiOiJldmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gb24oZXZlbnRUeXBlcywgaGFuZGxlcikge1xuICBldmVudFR5cGVzID0gZXZlbnRUeXBlcy5zcGxpdCgnICcpOyAvLy9cblxuICBldmVudFR5cGVzLmZvckVhY2goZnVuY3Rpb24oZXZlbnRUeXBlKSB7XG4gICAgY29uc3QgYWRkRXZlbnRMaXN0ZW5lciA9IHRoaXMuYWRkSGFuZGxlcihldmVudFR5cGUsIGhhbmRsZXIpO1xuXG4gICAgaWYgKGFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgZXZlbnRMaXN0ZW5lci5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH0uYmluZCh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIG9mZihldmVudFR5cGVzLCBoYW5kbGVyKSB7XG4gIGV2ZW50VHlwZXMgPSBldmVudFR5cGVzLnNwbGl0KCcgJyk7IC8vL1xuXG4gIGV2ZW50VHlwZXMuZm9yRWFjaChmdW5jdGlvbihldmVudFR5cGUpIHtcbiAgICBjb25zdCByZW1vdmVFdmVudExpc3RlbmVyID0gdGhpcy5yZW1vdmVIYW5kbGVyKGV2ZW50VHlwZSwgaGFuZGxlcik7XG4gICAgXG4gICAgaWYgKHJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgZXZlbnRMaXN0ZW5lci5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH0uYmluZCh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIGFkZEhhbmRsZXIoZXZlbnRUeXBlLCBoYW5kbGVyKSB7XG4gIGxldCBhZGRFdmVudExpc3RlbmVyID0gZmFsc2UsXG4gICAgICBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnNNYXBbZXZlbnRUeXBlXTtcblxuICBpZiAoaGFuZGxlcnMgPT09IHVuZGVmaW5lZCkge1xuICAgIGhhbmRsZXJzID0gW107XG5cbiAgICB0aGlzLmhhbmRsZXJzTWFwW2V2ZW50VHlwZV0gPSBoYW5kbGVycztcblxuICAgIGFkZEV2ZW50TGlzdGVuZXIgPSB0cnVlO1xuICB9XG5cbiAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcblxuICByZXR1cm4gYWRkRXZlbnRMaXN0ZW5lcjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlSGFuZGxlcihldmVudFR5cGUsIGhhbmRsZXIgPSBudWxsKSB7XG4gIGxldCByZW1vdmVFdmVudExpc3RlbmVyID0gZmFsc2U7XG5cbiAgY29uc3QgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzTWFwW2V2ZW50VHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IG51bGwpIHtcbiAgICBjb25zdCBzdGFydCA9IDA7XG5cbiAgICBoYW5kbGVycy5zcGxpY2Uoc3RhcnQpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGluZGV4ID0gaGFuZGxlcnMuaW5kZXhPZihoYW5kbGVyKTtcblxuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICBjb25zdCBzdGFydCA9IGluZGV4LCAgLy8vXG4gICAgICAgICAgICBkZWxldGVDb3VudCA9IDE7XG5cbiAgICAgIGhhbmRsZXJzLnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChoYW5kbGVycy5sZW5ndGggPT09IDApIHsgIC8vL1xuICAgIGRlbGV0ZSAodGhpcy5oYW5kbGVyc01hcFtldmVudFR5cGVdKTtcblxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHJlbW92ZUV2ZW50TGlzdGVuZXI7XG59XG5cbmNvbnN0IGV2ZW50TWl4aW4gPSB7XG4gIG9uOiBvbixcbiAgb2ZmOiBvZmYsXG4gIGFkZEhhbmRsZXI6IGFkZEhhbmRsZXIsXG4gIHJlbW92ZUhhbmRsZXI6IHJlbW92ZUhhbmRsZXJcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXZlbnRNaXhpbjtcblxuZnVuY3Rpb24gZXZlbnRMaXN0ZW5lcihldmVudCkge1xuICBjb25zdCBldmVudFR5cGUgPSBldmVudC50eXBlLFxuICAgICAgICB0YXJnZXRFbGVtZW50ID0gdGhpcywgIC8vL1xuICAgICAgICBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnNNYXBbZXZlbnRUeXBlXTtcblxuICBsZXQgcHJldmVudEV2ZW50RGVmYXVsdCA9IGZhbHNlO1xuXG4gIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlcikge1xuICAgIGlmIChoYW5kbGVyLmludGVybWVkaWF0ZUhhbmRsZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgcHJldmVudERlZmF1bHQgPSBoYW5kbGVyLmludGVybWVkaWF0ZUhhbmRsZXIoaGFuZGxlciwgZXZlbnQsIHRhcmdldEVsZW1lbnQpO1xuICAgICAgXG4gICAgICBpZiAocHJldmVudERlZmF1bHQgPT09IHRydWUpIHtcbiAgICAgICAgcHJldmVudEV2ZW50RGVmYXVsdCA9IHRydWU7XG4gICAgICB9ICBcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcHJldmVudERlZmF1bHQgPSBoYW5kbGVyKGV2ZW50LCB0YXJnZXRFbGVtZW50KTtcbiAgICAgIFxuICAgICAgaWYgKHByZXZlbnREZWZhdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIHByZXZlbnRFdmVudERlZmF1bHQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIFxuICBpZiAocHJldmVudEV2ZW50RGVmYXVsdCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbn1cbiJdfQ==