'use strict';

function on(eventTypes, handler) {
  var preventDefault = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var intermediateHandler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (handler, event) {
    handler(event);
  };

  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var addEventListener = this.addHandler(eventType, handler, preventDefault, intermediateHandler);

    if (addEventListener) {
      this.domElement.addEventListener(eventType, eventListener.bind(this));
    }
  }.bind(this));
}

function off(eventTypes, handler) {
  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var removeEventListener = this.removeHandler(eventType, handler);

    if (removeEventListener) {
      this.domElement.removeEventListener(eventType, eventListener.bind(this));
    }
  }.bind(this));
}

function addHandler(eventType, handler, preventDefault, intermediateHandler) {
  if (preventDefault !== undefined) {
    handler.preventDefault = preventDefault;
  }

  if (intermediateHandler !== undefined) {
    handler.intermediateHandler = intermediateHandler;
  }

  var addEventListener = false,
      handlers = this.handlersMap[eventType];

  if (handlers === undefined) {
    handlers = [];

    this.handlersMap[eventType] = handlers;

    addEventListener = true;
  }

  handlers.push(handler);

  return addEventListener;
}

function removeHandler(eventType, handler) {
  var removeEventListener = false,
      handlers = this.handlersMap[eventType];

  if (handlers.length === 0) {
    delete this.handlersMap[eventType];

    removeEventListener = true;
  } else {
    var index = handlers.indexOf(handler);

    if (index > -1) {
      var deleteCount = 1;

      handlers.splice(index, deleteCount);
    }
  }

  return removeEventListener;
}

var event = {
  on: on,
  off: off,
  addHandler: addHandler,
  removeHandler: removeHandler
};

module.exports = event;

function eventListener(event) {
  var eventType = event.type,
      handlers = this.handlersMap[eventType];

  handlers.forEach(function (handler) {
    handler.intermediateHandler(handler, event);

    if (handler.preventDefault) {
      event.preventDefault();
    }
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9ldmVudC5qcyJdLCJuYW1lcyI6WyJvbiIsImV2ZW50VHlwZXMiLCJoYW5kbGVyIiwicHJldmVudERlZmF1bHQiLCJpbnRlcm1lZGlhdGVIYW5kbGVyIiwiZXZlbnQiLCJzcGxpdCIsImZvckVhY2giLCJldmVudFR5cGUiLCJhZGRFdmVudExpc3RlbmVyIiwiYWRkSGFuZGxlciIsImRvbUVsZW1lbnQiLCJldmVudExpc3RlbmVyIiwiYmluZCIsIm9mZiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVIYW5kbGVyIiwidW5kZWZpbmVkIiwiaGFuZGxlcnMiLCJoYW5kbGVyc01hcCIsInB1c2giLCJsZW5ndGgiLCJpbmRleCIsImluZGV4T2YiLCJkZWxldGVDb3VudCIsInNwbGljZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0eXBlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSxFQUFULENBQVlDLFVBQVosRUFBd0JDLE9BQXhCLEVBQTZIO0FBQUEsTUFBNUZDLGNBQTRGLHVFQUEzRSxLQUEyRTtBQUFBLE1BQXBFQyxtQkFBb0UsdUVBQTlDLFVBQVNGLE9BQVQsRUFBa0JHLEtBQWxCLEVBQXlCO0FBQUVILFlBQVFHLEtBQVI7QUFBaUIsR0FBRTs7QUFDM0hKLGVBQWFBLFdBQVdLLEtBQVgsQ0FBaUIsR0FBakIsQ0FBYixDQUQySCxDQUN2Rjs7QUFFcENMLGFBQVdNLE9BQVgsQ0FBbUIsVUFBU0MsU0FBVCxFQUFvQjtBQUNyQyxRQUFNQyxtQkFBbUIsS0FBS0MsVUFBTCxDQUFnQkYsU0FBaEIsRUFBMkJOLE9BQTNCLEVBQW9DQyxjQUFwQyxFQUFvREMsbUJBQXBELENBQXpCOztBQUVBLFFBQUlLLGdCQUFKLEVBQXNCO0FBQ3BCLFdBQUtFLFVBQUwsQ0FBZ0JGLGdCQUFoQixDQUFpQ0QsU0FBakMsRUFBNENJLGNBQWNDLElBQWQsQ0FBbUIsSUFBbkIsQ0FBNUM7QUFDRDtBQUNGLEdBTmtCLENBTWpCQSxJQU5pQixDQU1aLElBTlksQ0FBbkI7QUFPRDs7QUFFRCxTQUFTQyxHQUFULENBQWFiLFVBQWIsRUFBeUJDLE9BQXpCLEVBQWtDO0FBQ2hDRCxlQUFhQSxXQUFXSyxLQUFYLENBQWlCLEdBQWpCLENBQWIsQ0FEZ0MsQ0FDSTs7QUFFcENMLGFBQVdNLE9BQVgsQ0FBbUIsVUFBU0MsU0FBVCxFQUFvQjtBQUNyQyxRQUFNTyxzQkFBc0IsS0FBS0MsYUFBTCxDQUFtQlIsU0FBbkIsRUFBOEJOLE9BQTlCLENBQTVCOztBQUVBLFFBQUlhLG1CQUFKLEVBQXlCO0FBQ3ZCLFdBQUtKLFVBQUwsQ0FBZ0JJLG1CQUFoQixDQUFvQ1AsU0FBcEMsRUFBK0NJLGNBQWNDLElBQWQsQ0FBbUIsSUFBbkIsQ0FBL0M7QUFDRDtBQUNGLEdBTmtCLENBTWpCQSxJQU5pQixDQU1aLElBTlksQ0FBbkI7QUFPRDs7QUFFRCxTQUFTSCxVQUFULENBQW9CRixTQUFwQixFQUErQk4sT0FBL0IsRUFBd0NDLGNBQXhDLEVBQXdEQyxtQkFBeEQsRUFBOEU7QUFDNUUsTUFBSUQsbUJBQW1CYyxTQUF2QixFQUFrQztBQUNoQ2YsWUFBUUMsY0FBUixHQUF5QkEsY0FBekI7QUFDRDs7QUFFRCxNQUFJQyx3QkFBd0JhLFNBQTVCLEVBQXVDO0FBQ3JDZixZQUFRRSxtQkFBUixHQUE4QkEsbUJBQTlCO0FBQ0Q7O0FBRUQsTUFBSUssbUJBQW1CLEtBQXZCO0FBQUEsTUFDSVMsV0FBVyxLQUFLQyxXQUFMLENBQWlCWCxTQUFqQixDQURmOztBQUdBLE1BQUtVLGFBQWFELFNBQWxCLEVBQThCO0FBQzVCQyxlQUFXLEVBQVg7O0FBRUEsU0FBS0MsV0FBTCxDQUFpQlgsU0FBakIsSUFBOEJVLFFBQTlCOztBQUVBVCx1QkFBbUIsSUFBbkI7QUFDRDs7QUFFRFMsV0FBU0UsSUFBVCxDQUFjbEIsT0FBZDs7QUFFQSxTQUFPTyxnQkFBUDtBQUNEOztBQUVELFNBQVNPLGFBQVQsQ0FBdUJSLFNBQXZCLEVBQWtDTixPQUFsQyxFQUEyQztBQUN6QyxNQUFJYSxzQkFBc0IsS0FBMUI7QUFBQSxNQUNJRyxXQUFXLEtBQUtDLFdBQUwsQ0FBaUJYLFNBQWpCLENBRGY7O0FBR0EsTUFBS1UsU0FBU0csTUFBVCxLQUFvQixDQUF6QixFQUE2QjtBQUMzQixXQUFRLEtBQUtGLFdBQUwsQ0FBaUJYLFNBQWpCLENBQVI7O0FBRUFPLDBCQUFzQixJQUF0QjtBQUNELEdBSkQsTUFJTztBQUNMLFFBQU1PLFFBQVFKLFNBQVNLLE9BQVQsQ0FBaUJyQixPQUFqQixDQUFkOztBQUVBLFFBQUlvQixRQUFRLENBQUMsQ0FBYixFQUFnQjtBQUNkLFVBQU1FLGNBQWMsQ0FBcEI7O0FBRUFOLGVBQVNPLE1BQVQsQ0FBZ0JILEtBQWhCLEVBQXVCRSxXQUF2QjtBQUNEO0FBQ0Y7O0FBRUQsU0FBT1QsbUJBQVA7QUFDRDs7QUFFRCxJQUFNVixRQUFRO0FBQ1pMLE1BQUlBLEVBRFE7QUFFWmMsT0FBS0EsR0FGTztBQUdaSixjQUFZQSxVQUhBO0FBSVpNLGlCQUFlQTtBQUpILENBQWQ7O0FBT0FVLE9BQU9DLE9BQVAsR0FBaUJ0QixLQUFqQjs7QUFFQSxTQUFTTyxhQUFULENBQXVCUCxLQUF2QixFQUE4QjtBQUM1QixNQUFNRyxZQUFZSCxNQUFNdUIsSUFBeEI7QUFBQSxNQUNNVixXQUFXLEtBQUtDLFdBQUwsQ0FBaUJYLFNBQWpCLENBRGpCOztBQUdBVSxXQUFTWCxPQUFULENBQWlCLFVBQVNMLE9BQVQsRUFBa0I7QUFDakNBLFlBQVFFLG1CQUFSLENBQTRCRixPQUE1QixFQUFxQ0csS0FBckM7O0FBRUEsUUFBSUgsUUFBUUMsY0FBWixFQUE0QjtBQUMxQkUsWUFBTUYsY0FBTjtBQUNEO0FBQ0YsR0FORDtBQU9EIiwiZmlsZSI6ImV2ZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBvbihldmVudFR5cGVzLCBoYW5kbGVyLCBwcmV2ZW50RGVmYXVsdCA9IGZhbHNlLCBpbnRlcm1lZGlhdGVIYW5kbGVyID0gZnVuY3Rpb24oaGFuZGxlciwgZXZlbnQpIHsgaGFuZGxlcihldmVudCk7IH0pIHtcbiAgZXZlbnRUeXBlcyA9IGV2ZW50VHlwZXMuc3BsaXQoJyAnKTsgLy8vXG5cbiAgZXZlbnRUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50VHlwZSkge1xuICAgIGNvbnN0IGFkZEV2ZW50TGlzdGVuZXIgPSB0aGlzLmFkZEhhbmRsZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBwcmV2ZW50RGVmYXVsdCwgaW50ZXJtZWRpYXRlSGFuZGxlcik7XG5cbiAgICBpZiAoYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBldmVudExpc3RlbmVyLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfS5iaW5kKHRoaXMpKTtcbn1cblxuZnVuY3Rpb24gb2ZmKGV2ZW50VHlwZXMsIGhhbmRsZXIpIHtcbiAgZXZlbnRUeXBlcyA9IGV2ZW50VHlwZXMuc3BsaXQoJyAnKTsgLy8vXG5cbiAgZXZlbnRUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50VHlwZSkge1xuICAgIGNvbnN0IHJlbW92ZUV2ZW50TGlzdGVuZXIgPSB0aGlzLnJlbW92ZUhhbmRsZXIoZXZlbnRUeXBlLCBoYW5kbGVyKTtcbiAgICBcbiAgICBpZiAocmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgdGhpcy5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBldmVudExpc3RlbmVyLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfS5iaW5kKHRoaXMpKTtcbn1cblxuZnVuY3Rpb24gYWRkSGFuZGxlcihldmVudFR5cGUsIGhhbmRsZXIsIHByZXZlbnREZWZhdWx0LCBpbnRlcm1lZGlhdGVIYW5kbGVyICkge1xuICBpZiAocHJldmVudERlZmF1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgIGhhbmRsZXIucHJldmVudERlZmF1bHQgPSBwcmV2ZW50RGVmYXVsdDtcbiAgfVxuXG4gIGlmIChpbnRlcm1lZGlhdGVIYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICBoYW5kbGVyLmludGVybWVkaWF0ZUhhbmRsZXIgPSBpbnRlcm1lZGlhdGVIYW5kbGVyO1xuICB9XG5cbiAgbGV0IGFkZEV2ZW50TGlzdGVuZXIgPSBmYWxzZSxcbiAgICAgIGhhbmRsZXJzID0gdGhpcy5oYW5kbGVyc01hcFtldmVudFR5cGVdO1xuXG4gIGlmICgoaGFuZGxlcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICBoYW5kbGVycyA9IFtdO1xuXG4gICAgdGhpcy5oYW5kbGVyc01hcFtldmVudFR5cGVdID0gaGFuZGxlcnM7XG5cbiAgICBhZGRFdmVudExpc3RlbmVyID0gdHJ1ZTtcbiAgfVxuXG4gIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG5cbiAgcmV0dXJuIGFkZEV2ZW50TGlzdGVuZXI7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUhhbmRsZXIoZXZlbnRUeXBlLCBoYW5kbGVyKSB7XG4gIGxldCByZW1vdmVFdmVudExpc3RlbmVyID0gZmFsc2UsXG4gICAgICBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnNNYXBbZXZlbnRUeXBlXTtcblxuICBpZiAoKGhhbmRsZXJzLmxlbmd0aCA9PT0gMCkpIHtcbiAgICBkZWxldGUgKHRoaXMuaGFuZGxlcnNNYXBbZXZlbnRUeXBlXSk7XG5cbiAgICByZW1vdmVFdmVudExpc3RlbmVyID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBpbmRleCA9IGhhbmRsZXJzLmluZGV4T2YoaGFuZGxlcik7XG5cbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgY29uc3QgZGVsZXRlQ291bnQgPSAxO1xuXG4gICAgICBoYW5kbGVycy5zcGxpY2UoaW5kZXgsIGRlbGV0ZUNvdW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVtb3ZlRXZlbnRMaXN0ZW5lcjtcbn1cblxuY29uc3QgZXZlbnQgPSB7XG4gIG9uOiBvbixcbiAgb2ZmOiBvZmYsXG4gIGFkZEhhbmRsZXI6IGFkZEhhbmRsZXIsXG4gIHJlbW92ZUhhbmRsZXI6IHJlbW92ZUhhbmRsZXJcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXZlbnQ7XG5cbmZ1bmN0aW9uIGV2ZW50TGlzdGVuZXIoZXZlbnQpIHtcbiAgY29uc3QgZXZlbnRUeXBlID0gZXZlbnQudHlwZSxcbiAgICAgICAgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzTWFwW2V2ZW50VHlwZV07XG5cbiAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgaGFuZGxlci5pbnRlcm1lZGlhdGVIYW5kbGVyKGhhbmRsZXIsIGV2ZW50KTtcblxuICAgIGlmIChoYW5kbGVyLnByZXZlbnREZWZhdWx0KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=