'use strict';

function on(types, handler, preventDefault, intermediateHandler) {
  types = types.split(' '); ///

  types.forEach(function (type) {
    addHandler(this, type, handler, preventDefault, intermediateHandler);
  }.bind(this));
}

function off(types, handler) {
  types = types.split(' '); ///

  types.forEach(function (type) {
    removeHandler(this, type, handler);
  }.bind(this));
}

var event = {
  on: on,
  off: off
};

module.exports = event;

function addHandler(element, type, handler) {
  var preventDefault = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  var intermediateHandler = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultIntermediateHandler;

  var handlers = element.handlersMap[type];

  if (handlers === undefined) {
    handlers = [];

    element.handlersMap[type] = handlers;

    element.domElement.addEventListener(type, eventListener.bind(element));
  }

  handler.preventDefault = preventDefault;
  handler.intermediateHandler = intermediateHandler;

  handlers.push(handler);
}

function removeHandler(element, type, handler) {
  var handlers = element.handlersMap[type];

  if (handlers.length === 0) {
    delete element.handlersMap[type];

    element.domElement.removeEventListener(type, eventListener.bind(element));
  } else {
    var index = handlers.indexOf(handler);

    if (index > -1) {
      var deleteCount = 1;

      handlers.splice(index, deleteCount);
    }
  }
}

function eventListener(event) {
  var type = event.type,
      handlers = this.handlersMap[type];

  handlers.forEach(function (handler) {
    handler.intermediateHandler(handler, event);

    if (handler.preventDefault) {
      event.preventDefault();
    }
  });
}

function defaultIntermediateHandler(handler, event) {
  handler(event);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9ldmVudC5qcyJdLCJuYW1lcyI6WyJvbiIsInR5cGVzIiwiaGFuZGxlciIsInByZXZlbnREZWZhdWx0IiwiaW50ZXJtZWRpYXRlSGFuZGxlciIsInNwbGl0IiwiZm9yRWFjaCIsInR5cGUiLCJhZGRIYW5kbGVyIiwiYmluZCIsIm9mZiIsInJlbW92ZUhhbmRsZXIiLCJldmVudCIsIm1vZHVsZSIsImV4cG9ydHMiLCJlbGVtZW50IiwiZGVmYXVsdEludGVybWVkaWF0ZUhhbmRsZXIiLCJoYW5kbGVycyIsImhhbmRsZXJzTWFwIiwidW5kZWZpbmVkIiwiZG9tRWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudExpc3RlbmVyIiwicHVzaCIsImxlbmd0aCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpbmRleCIsImluZGV4T2YiLCJkZWxldGVDb3VudCIsInNwbGljZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsU0FBU0EsRUFBVCxDQUFZQyxLQUFaLEVBQW1CQyxPQUFuQixFQUE0QkMsY0FBNUIsRUFBNENDLG1CQUE1QyxFQUFpRTtBQUMvREgsVUFBUUEsTUFBTUksS0FBTixDQUFZLEdBQVosQ0FBUixDQUQrRCxDQUNyQzs7QUFFMUJKLFFBQU1LLE9BQU4sQ0FBYyxVQUFTQyxJQUFULEVBQWU7QUFDM0JDLGVBQVcsSUFBWCxFQUFpQkQsSUFBakIsRUFBdUJMLE9BQXZCLEVBQWdDQyxjQUFoQyxFQUFnREMsbUJBQWhEO0FBQ0QsR0FGYSxDQUVaSyxJQUZZLENBRVAsSUFGTyxDQUFkO0FBR0Q7O0FBRUQsU0FBU0MsR0FBVCxDQUFhVCxLQUFiLEVBQW9CQyxPQUFwQixFQUE2QjtBQUMzQkQsVUFBUUEsTUFBTUksS0FBTixDQUFZLEdBQVosQ0FBUixDQUQyQixDQUNEOztBQUUxQkosUUFBTUssT0FBTixDQUFjLFVBQVNDLElBQVQsRUFBZTtBQUMzQkksa0JBQWMsSUFBZCxFQUFvQkosSUFBcEIsRUFBMEJMLE9BQTFCO0FBQ0QsR0FGYSxDQUVaTyxJQUZZLENBRVAsSUFGTyxDQUFkO0FBR0Q7O0FBRUQsSUFBTUcsUUFBUTtBQUNaWixNQUFJQSxFQURRO0FBRVpVLE9BQUtBO0FBRk8sQ0FBZDs7QUFLQUcsT0FBT0MsT0FBUCxHQUFpQkYsS0FBakI7O0FBRUEsU0FBU0osVUFBVCxDQUFvQk8sT0FBcEIsRUFBNkJSLElBQTdCLEVBQW1DTCxPQUFuQyxFQUFxSDtBQUFBLE1BQXpFQyxjQUF5RSx1RUFBeEQsSUFBd0Q7QUFBQSxNQUFsREMsbUJBQWtELHVFQUE1QlksMEJBQTRCOztBQUNuSCxNQUFJQyxXQUFXRixRQUFRRyxXQUFSLENBQW9CWCxJQUFwQixDQUFmOztBQUVBLE1BQUtVLGFBQWFFLFNBQWxCLEVBQThCO0FBQzVCRixlQUFXLEVBQVg7O0FBRUFGLFlBQVFHLFdBQVIsQ0FBb0JYLElBQXBCLElBQTRCVSxRQUE1Qjs7QUFFQUYsWUFBUUssVUFBUixDQUFtQkMsZ0JBQW5CLENBQW9DZCxJQUFwQyxFQUEwQ2UsY0FBY2IsSUFBZCxDQUFtQk0sT0FBbkIsQ0FBMUM7QUFDRDs7QUFFRGIsVUFBUUMsY0FBUixHQUF5QkEsY0FBekI7QUFDQUQsVUFBUUUsbUJBQVIsR0FBOEJBLG1CQUE5Qjs7QUFFQWEsV0FBU00sSUFBVCxDQUFjckIsT0FBZDtBQUNEOztBQUVELFNBQVNTLGFBQVQsQ0FBdUJJLE9BQXZCLEVBQWdDUixJQUFoQyxFQUFzQ0wsT0FBdEMsRUFBK0M7QUFDN0MsTUFBTWUsV0FBV0YsUUFBUUcsV0FBUixDQUFvQlgsSUFBcEIsQ0FBakI7O0FBRUEsTUFBS1UsU0FBU08sTUFBVCxLQUFvQixDQUF6QixFQUE2QjtBQUMzQixXQUFRVCxRQUFRRyxXQUFSLENBQW9CWCxJQUFwQixDQUFSOztBQUVBUSxZQUFRSyxVQUFSLENBQW1CSyxtQkFBbkIsQ0FBdUNsQixJQUF2QyxFQUE2Q2UsY0FBY2IsSUFBZCxDQUFtQk0sT0FBbkIsQ0FBN0M7QUFDRCxHQUpELE1BSU87QUFDTCxRQUFNVyxRQUFRVCxTQUFTVSxPQUFULENBQWlCekIsT0FBakIsQ0FBZDs7QUFFQSxRQUFJd0IsUUFBUSxDQUFDLENBQWIsRUFBZ0I7QUFDZCxVQUFNRSxjQUFjLENBQXBCOztBQUVBWCxlQUFTWSxNQUFULENBQWdCSCxLQUFoQixFQUF1QkUsV0FBdkI7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsU0FBU04sYUFBVCxDQUF1QlYsS0FBdkIsRUFBOEI7QUFDNUIsTUFBTUwsT0FBT0ssTUFBTUwsSUFBbkI7QUFBQSxNQUNNVSxXQUFXLEtBQUtDLFdBQUwsQ0FBaUJYLElBQWpCLENBRGpCOztBQUdBVSxXQUFTWCxPQUFULENBQWlCLFVBQVNKLE9BQVQsRUFBa0I7QUFDakNBLFlBQVFFLG1CQUFSLENBQTRCRixPQUE1QixFQUFxQ1UsS0FBckM7O0FBRUEsUUFBSVYsUUFBUUMsY0FBWixFQUE0QjtBQUMxQlMsWUFBTVQsY0FBTjtBQUNEO0FBQ0YsR0FORDtBQU9EOztBQUVELFNBQVNhLDBCQUFULENBQW9DZCxPQUFwQyxFQUE2Q1UsS0FBN0MsRUFBb0Q7QUFDbERWLFVBQVFVLEtBQVI7QUFDRCIsImZpbGUiOiJldmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gb24odHlwZXMsIGhhbmRsZXIsIHByZXZlbnREZWZhdWx0LCBpbnRlcm1lZGlhdGVIYW5kbGVyKSB7XG4gIHR5cGVzID0gdHlwZXMuc3BsaXQoJyAnKTsgLy8vXG5cbiAgdHlwZXMuZm9yRWFjaChmdW5jdGlvbih0eXBlKSB7XG4gICAgYWRkSGFuZGxlcih0aGlzLCB0eXBlLCBoYW5kbGVyLCBwcmV2ZW50RGVmYXVsdCwgaW50ZXJtZWRpYXRlSGFuZGxlcik7XG4gIH0uYmluZCh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIG9mZih0eXBlcywgaGFuZGxlcikge1xuICB0eXBlcyA9IHR5cGVzLnNwbGl0KCcgJyk7IC8vL1xuXG4gIHR5cGVzLmZvckVhY2goZnVuY3Rpb24odHlwZSkge1xuICAgIHJlbW92ZUhhbmRsZXIodGhpcywgdHlwZSwgaGFuZGxlcik7XG4gIH0uYmluZCh0aGlzKSk7XG59XG5cbmNvbnN0IGV2ZW50ID0ge1xuICBvbjogb24sXG4gIG9mZjogb2ZmXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV2ZW50O1xuXG5mdW5jdGlvbiBhZGRIYW5kbGVyKGVsZW1lbnQsIHR5cGUsIGhhbmRsZXIsIHByZXZlbnREZWZhdWx0ID0gdHJ1ZSwgaW50ZXJtZWRpYXRlSGFuZGxlciA9IGRlZmF1bHRJbnRlcm1lZGlhdGVIYW5kbGVyKSB7XG4gIGxldCBoYW5kbGVycyA9IGVsZW1lbnQuaGFuZGxlcnNNYXBbdHlwZV07XG5cbiAgaWYgKChoYW5kbGVycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgIGhhbmRsZXJzID0gW107XG5cbiAgICBlbGVtZW50LmhhbmRsZXJzTWFwW3R5cGVdID0gaGFuZGxlcnM7XG5cbiAgICBlbGVtZW50LmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBldmVudExpc3RlbmVyLmJpbmQoZWxlbWVudCkpO1xuICB9XG5cbiAgaGFuZGxlci5wcmV2ZW50RGVmYXVsdCA9IHByZXZlbnREZWZhdWx0O1xuICBoYW5kbGVyLmludGVybWVkaWF0ZUhhbmRsZXIgPSBpbnRlcm1lZGlhdGVIYW5kbGVyO1xuICBcbiAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlSGFuZGxlcihlbGVtZW50LCB0eXBlLCBoYW5kbGVyKSB7XG4gIGNvbnN0IGhhbmRsZXJzID0gZWxlbWVudC5oYW5kbGVyc01hcFt0eXBlXTtcblxuICBpZiAoKGhhbmRsZXJzLmxlbmd0aCA9PT0gMCkpIHtcbiAgICBkZWxldGUgKGVsZW1lbnQuaGFuZGxlcnNNYXBbdHlwZV0pO1xuICAgIFxuICAgIGVsZW1lbnQuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGV2ZW50TGlzdGVuZXIuYmluZChlbGVtZW50KSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgaW5kZXggPSBoYW5kbGVycy5pbmRleE9mKGhhbmRsZXIpO1xuXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIGNvbnN0IGRlbGV0ZUNvdW50ID0gMTtcblxuICAgICAgaGFuZGxlcnMuc3BsaWNlKGluZGV4LCBkZWxldGVDb3VudCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGV2ZW50TGlzdGVuZXIoZXZlbnQpIHtcbiAgY29uc3QgdHlwZSA9IGV2ZW50LnR5cGUsXG4gICAgICAgIGhhbmRsZXJzID0gdGhpcy5oYW5kbGVyc01hcFt0eXBlXTtcblxuICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICBoYW5kbGVyLmludGVybWVkaWF0ZUhhbmRsZXIoaGFuZGxlciwgZXZlbnQpO1xuXG4gICAgaWYgKGhhbmRsZXIucHJldmVudERlZmF1bHQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEludGVybWVkaWF0ZUhhbmRsZXIoaGFuZGxlciwgZXZlbnQpIHtcbiAgaGFuZGxlcihldmVudCk7XG59XG4iXX0=