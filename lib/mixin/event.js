'use strict';

function on(eventTypes, handler) {
  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    onEvent(this, eventType, handler);
  }.bind(this));
}

function off(eventTypes, handler) {
  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    offEvent(this, eventType, handler);
  }.bind(this));
}

var eventMixin = {
  on: on,
  off: off
};

module.exports = eventMixin;

function onEvent(element, eventType, handler) {
  if (element.eventObjectMap === undefined) {
    element.eventObjectMap = {};
  }

  var eventObject = element.eventObjectMap[eventType];

  if (!eventObject) {
    eventObject = createEventObject();

    eventObject.addEventListener(element, eventType);

    element.eventObjectMap[eventType] = eventObject;
  }

  eventObject.addHandler(handler);
}

function offEvent(element, eventType, handler) {
  var eventObject = element.eventObjectMap[eventType];

  var empty = eventObject.removeHandler(handler);

  if (empty) {
    eventObject.removeEventListener(element, eventType);

    delete element.eventObjectMap[eventType];
  }

  var eventTypes = Object.keys(element.eventObjectMap);

  if (eventTypes.length === 0) {
    delete element.eventObjectMap;
  }
}

function createEventObject() {
  var handlers = [];

  function eventListener(event) {
    var eventTarget = event.target,
        targetElement = eventTarget.__element__; ///

    var preventEventDefault = false;

    handlers.forEach(function (handler) {
      if (handler.intermediateHandler !== undefined) {
        var preventDefault = handler.intermediateHandler(handler, event, targetElement);

        if (preventDefault === true) {
          preventEventDefault = true;
        }
      } else {
        var _preventDefault = handler(event, targetElement);

        if (_preventDefault === true) {
          preventEventDefault = true;
        }
      }
    });

    if (preventEventDefault) {
      event.preventDefault();
    }

    event.stopPropagation();
  }

  function addHandler(handler) {
    handlers.push(handler);
  }

  function removeHandler() {
    var handler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    if (handler === null) {
      var start = 0;

      handlers.splice(start);
    } else {
      var index = handlers.indexOf(handler);

      if (index > -1) {
        var _start = index,
            ///
        deleteCount = 1;

        handlers.splice(_start, deleteCount);
      }
    }

    var empty = handlers.length === 0;

    return empty;
  }

  function addEventListener(element, eventType) {
    element.domElement.addEventListener(eventType, eventListener);
  }

  function removeEventListener(element, eventType) {
    element.domElement.removeEventListener(eventType, eventListener);
  }

  return {
    addHandler: addHandler,
    removeHandler: removeHandler,
    addEventListener: addEventListener,
    removeEventListener: removeEventListener
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,