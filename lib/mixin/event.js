'use strict';

function on(eventTypes, handler) {
  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var addEventListener = this.addHandler(eventType, handler);

    if (addEventListener) {
      this.domElement.addEventListener(eventType, eventListener.bind(this));
    }
  }.bind(this));
}

function off(eventTypes, handler) {
  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var removeEventListener = this.removeHandler(eventType, handler);

    if (removeEventListener) {
      this.domElement.removeEventListener(eventType, eventListener.bind(this));
    }
  }.bind(this));
}

function addHandler(eventType, handler) {
  var addEventListener = false,
      handlers = this.handlersMap[eventType];

  if (handlers === undefined) {
    handlers = [];

    this.handlersMap[eventType] = handlers;

    addEventListener = true;
  }

  handlers.push(handler);

  return addEventListener;
}

function removeHandler(eventType, handler) {
  var removeEventListener = false,
      handlers = this.handlersMap[eventType];

  if (handlers.length === 0) {
    delete this.handlersMap[eventType];

    removeEventListener = true;
  } else {
    var index = handlers.indexOf(handler);

    if (index > -1) {
      var deleteCount = 1;

      handlers.splice(index, deleteCount);
    }
  }

  return removeEventListener;
}

var eventMixin = {
  on: on,
  off: off,
  addHandler: addHandler,
  removeHandler: removeHandler
};

module.exports = eventMixin;

function eventListener(event) {
  var eventType = event.type,
      handlers = this.handlersMap[eventType];

  var preventEventDefault = false;

  handlers.forEach(function (handler) {
    if (handler.intermediateHandler !== undefined) {
      var preventDefault = handler.intermediateHandler(handler, event);

      if (preventDefault === true) {
        preventEventDefault = true;
      }
    } else {
      var _preventDefault = handler(event);

      if (_preventDefault === true) {
        preventEventDefault = true;
      }
    }
  });

  if (preventEventDefault) {
    event.preventDefault();
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9ldmVudC5qcyJdLCJuYW1lcyI6WyJvbiIsImV2ZW50VHlwZXMiLCJoYW5kbGVyIiwic3BsaXQiLCJmb3JFYWNoIiwiZXZlbnRUeXBlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImFkZEhhbmRsZXIiLCJkb21FbGVtZW50IiwiZXZlbnRMaXN0ZW5lciIsImJpbmQiLCJvZmYiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlSGFuZGxlciIsImhhbmRsZXJzIiwiaGFuZGxlcnNNYXAiLCJ1bmRlZmluZWQiLCJwdXNoIiwibGVuZ3RoIiwiaW5kZXgiLCJpbmRleE9mIiwiZGVsZXRlQ291bnQiLCJzcGxpY2UiLCJldmVudE1peGluIiwibW9kdWxlIiwiZXhwb3J0cyIsImV2ZW50IiwidHlwZSIsInByZXZlbnRFdmVudERlZmF1bHQiLCJpbnRlcm1lZGlhdGVIYW5kbGVyIiwicHJldmVudERlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFNBQVNBLEVBQVQsQ0FBWUMsVUFBWixFQUF3QkMsT0FBeEIsRUFBaUM7QUFDL0JELGVBQWFBLFdBQVdFLEtBQVgsQ0FBaUIsR0FBakIsQ0FBYixDQUQrQixDQUNLOztBQUVwQ0YsYUFBV0csT0FBWCxDQUFtQixVQUFTQyxTQUFULEVBQW9CO0FBQ3JDLFFBQU1DLG1CQUFtQixLQUFLQyxVQUFMLENBQWdCRixTQUFoQixFQUEyQkgsT0FBM0IsQ0FBekI7O0FBRUEsUUFBSUksZ0JBQUosRUFBc0I7QUFDcEIsV0FBS0UsVUFBTCxDQUFnQkYsZ0JBQWhCLENBQWlDRCxTQUFqQyxFQUE0Q0ksY0FBY0MsSUFBZCxDQUFtQixJQUFuQixDQUE1QztBQUNEO0FBQ0YsR0FOa0IsQ0FNakJBLElBTmlCLENBTVosSUFOWSxDQUFuQjtBQU9EOztBQUVELFNBQVNDLEdBQVQsQ0FBYVYsVUFBYixFQUF5QkMsT0FBekIsRUFBa0M7QUFDaENELGVBQWFBLFdBQVdFLEtBQVgsQ0FBaUIsR0FBakIsQ0FBYixDQURnQyxDQUNJOztBQUVwQ0YsYUFBV0csT0FBWCxDQUFtQixVQUFTQyxTQUFULEVBQW9CO0FBQ3JDLFFBQU1PLHNCQUFzQixLQUFLQyxhQUFMLENBQW1CUixTQUFuQixFQUE4QkgsT0FBOUIsQ0FBNUI7O0FBRUEsUUFBSVUsbUJBQUosRUFBeUI7QUFDdkIsV0FBS0osVUFBTCxDQUFnQkksbUJBQWhCLENBQW9DUCxTQUFwQyxFQUErQ0ksY0FBY0MsSUFBZCxDQUFtQixJQUFuQixDQUEvQztBQUNEO0FBQ0YsR0FOa0IsQ0FNakJBLElBTmlCLENBTVosSUFOWSxDQUFuQjtBQU9EOztBQUVELFNBQVNILFVBQVQsQ0FBb0JGLFNBQXBCLEVBQStCSCxPQUEvQixFQUF3QztBQUN0QyxNQUFJSSxtQkFBbUIsS0FBdkI7QUFBQSxNQUNJUSxXQUFXLEtBQUtDLFdBQUwsQ0FBaUJWLFNBQWpCLENBRGY7O0FBR0EsTUFBSVMsYUFBYUUsU0FBakIsRUFBNEI7QUFDMUJGLGVBQVcsRUFBWDs7QUFFQSxTQUFLQyxXQUFMLENBQWlCVixTQUFqQixJQUE4QlMsUUFBOUI7O0FBRUFSLHVCQUFtQixJQUFuQjtBQUNEOztBQUVEUSxXQUFTRyxJQUFULENBQWNmLE9BQWQ7O0FBRUEsU0FBT0ksZ0JBQVA7QUFDRDs7QUFFRCxTQUFTTyxhQUFULENBQXVCUixTQUF2QixFQUFrQ0gsT0FBbEMsRUFBMkM7QUFDekMsTUFBSVUsc0JBQXNCLEtBQTFCO0FBQUEsTUFDSUUsV0FBVyxLQUFLQyxXQUFMLENBQWlCVixTQUFqQixDQURmOztBQUdBLE1BQUlTLFNBQVNJLE1BQVQsS0FBb0IsQ0FBeEIsRUFBMkI7QUFDekIsV0FBUSxLQUFLSCxXQUFMLENBQWlCVixTQUFqQixDQUFSOztBQUVBTywwQkFBc0IsSUFBdEI7QUFDRCxHQUpELE1BSU87QUFDTCxRQUFNTyxRQUFRTCxTQUFTTSxPQUFULENBQWlCbEIsT0FBakIsQ0FBZDs7QUFFQSxRQUFJaUIsUUFBUSxDQUFDLENBQWIsRUFBZ0I7QUFDZCxVQUFNRSxjQUFjLENBQXBCOztBQUVBUCxlQUFTUSxNQUFULENBQWdCSCxLQUFoQixFQUF1QkUsV0FBdkI7QUFDRDtBQUNGOztBQUVELFNBQU9ULG1CQUFQO0FBQ0Q7O0FBRUQsSUFBTVcsYUFBYTtBQUNqQnZCLE1BQUlBLEVBRGE7QUFFakJXLE9BQUtBLEdBRlk7QUFHakJKLGNBQVlBLFVBSEs7QUFJakJNLGlCQUFlQTtBQUpFLENBQW5COztBQU9BVyxPQUFPQyxPQUFQLEdBQWlCRixVQUFqQjs7QUFFQSxTQUFTZCxhQUFULENBQXVCaUIsS0FBdkIsRUFBOEI7QUFDNUIsTUFBTXJCLFlBQVlxQixNQUFNQyxJQUF4QjtBQUFBLE1BQ01iLFdBQVcsS0FBS0MsV0FBTCxDQUFpQlYsU0FBakIsQ0FEakI7O0FBR0EsTUFBSXVCLHNCQUFzQixLQUExQjs7QUFFQWQsV0FBU1YsT0FBVCxDQUFpQixVQUFTRixPQUFULEVBQWtCO0FBQ2pDLFFBQUlBLFFBQVEyQixtQkFBUixLQUFnQ2IsU0FBcEMsRUFBK0M7QUFDN0MsVUFBTWMsaUJBQWlCNUIsUUFBUTJCLG1CQUFSLENBQTRCM0IsT0FBNUIsRUFBcUN3QixLQUFyQyxDQUF2Qjs7QUFFQSxVQUFJSSxtQkFBbUIsSUFBdkIsRUFBNkI7QUFDM0JGLDhCQUFzQixJQUF0QjtBQUNEO0FBQ0YsS0FORCxNQU1PO0FBQ0wsVUFBTUUsa0JBQWlCNUIsUUFBUXdCLEtBQVIsQ0FBdkI7O0FBRUEsVUFBSUksb0JBQW1CLElBQXZCLEVBQTZCO0FBQzNCRiw4QkFBc0IsSUFBdEI7QUFDRDtBQUNGO0FBQ0YsR0FkRDs7QUFnQkEsTUFBSUEsbUJBQUosRUFBeUI7QUFDdkJGLFVBQU1JLGNBQU47QUFDRDtBQUNGIiwiZmlsZSI6ImV2ZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBvbihldmVudFR5cGVzLCBoYW5kbGVyKSB7XG4gIGV2ZW50VHlwZXMgPSBldmVudFR5cGVzLnNwbGl0KCcgJyk7IC8vL1xuXG4gIGV2ZW50VHlwZXMuZm9yRWFjaChmdW5jdGlvbihldmVudFR5cGUpIHtcbiAgICBjb25zdCBhZGRFdmVudExpc3RlbmVyID0gdGhpcy5hZGRIYW5kbGVyKGV2ZW50VHlwZSwgaGFuZGxlcik7XG5cbiAgICBpZiAoYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBldmVudExpc3RlbmVyLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfS5iaW5kKHRoaXMpKTtcbn1cblxuZnVuY3Rpb24gb2ZmKGV2ZW50VHlwZXMsIGhhbmRsZXIpIHtcbiAgZXZlbnRUeXBlcyA9IGV2ZW50VHlwZXMuc3BsaXQoJyAnKTsgLy8vXG5cbiAgZXZlbnRUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50VHlwZSkge1xuICAgIGNvbnN0IHJlbW92ZUV2ZW50TGlzdGVuZXIgPSB0aGlzLnJlbW92ZUhhbmRsZXIoZXZlbnRUeXBlLCBoYW5kbGVyKTtcbiAgICBcbiAgICBpZiAocmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgdGhpcy5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBldmVudExpc3RlbmVyLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfS5iaW5kKHRoaXMpKTtcbn1cblxuZnVuY3Rpb24gYWRkSGFuZGxlcihldmVudFR5cGUsIGhhbmRsZXIpIHtcbiAgbGV0IGFkZEV2ZW50TGlzdGVuZXIgPSBmYWxzZSxcbiAgICAgIGhhbmRsZXJzID0gdGhpcy5oYW5kbGVyc01hcFtldmVudFR5cGVdO1xuXG4gIGlmIChoYW5kbGVycyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaGFuZGxlcnMgPSBbXTtcblxuICAgIHRoaXMuaGFuZGxlcnNNYXBbZXZlbnRUeXBlXSA9IGhhbmRsZXJzO1xuXG4gICAgYWRkRXZlbnRMaXN0ZW5lciA9IHRydWU7XG4gIH1cblxuICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuXG4gIHJldHVybiBhZGRFdmVudExpc3RlbmVyO1xufVxuXG5mdW5jdGlvbiByZW1vdmVIYW5kbGVyKGV2ZW50VHlwZSwgaGFuZGxlcikge1xuICBsZXQgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZhbHNlLFxuICAgICAgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzTWFwW2V2ZW50VHlwZV07XG5cbiAgaWYgKGhhbmRsZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgIGRlbGV0ZSAodGhpcy5oYW5kbGVyc01hcFtldmVudFR5cGVdKTtcblxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGluZGV4ID0gaGFuZGxlcnMuaW5kZXhPZihoYW5kbGVyKTtcblxuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICBjb25zdCBkZWxldGVDb3VudCA9IDE7XG5cbiAgICAgIGhhbmRsZXJzLnNwbGljZShpbmRleCwgZGVsZXRlQ291bnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZW1vdmVFdmVudExpc3RlbmVyO1xufVxuXG5jb25zdCBldmVudE1peGluID0ge1xuICBvbjogb24sXG4gIG9mZjogb2ZmLFxuICBhZGRIYW5kbGVyOiBhZGRIYW5kbGVyLFxuICByZW1vdmVIYW5kbGVyOiByZW1vdmVIYW5kbGVyXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV2ZW50TWl4aW47XG5cbmZ1bmN0aW9uIGV2ZW50TGlzdGVuZXIoZXZlbnQpIHtcbiAgY29uc3QgZXZlbnRUeXBlID0gZXZlbnQudHlwZSxcbiAgICAgICAgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzTWFwW2V2ZW50VHlwZV07XG5cbiAgbGV0IHByZXZlbnRFdmVudERlZmF1bHQgPSBmYWxzZTtcblxuICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICBpZiAoaGFuZGxlci5pbnRlcm1lZGlhdGVIYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHByZXZlbnREZWZhdWx0ID0gaGFuZGxlci5pbnRlcm1lZGlhdGVIYW5kbGVyKGhhbmRsZXIsIGV2ZW50KTtcbiAgICAgIFxuICAgICAgaWYgKHByZXZlbnREZWZhdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIHByZXZlbnRFdmVudERlZmF1bHQgPSB0cnVlO1xuICAgICAgfSAgXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHByZXZlbnREZWZhdWx0ID0gaGFuZGxlcihldmVudCk7XG4gICAgICBcbiAgICAgIGlmIChwcmV2ZW50RGVmYXVsdCA9PT0gdHJ1ZSkge1xuICAgICAgICBwcmV2ZW50RXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBcbiAgaWYgKHByZXZlbnRFdmVudERlZmF1bHQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG59XG4iXX0=