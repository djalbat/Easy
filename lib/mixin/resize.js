'use strict';

function onResize(handler) {
  var eventType = 'resize',
      addEventListener = this.on(eventType, handler);

  if (addEventListener) {
    appendResizeObject(this);
  }
}

function offResize(handler) {
  var eventType = 'resize',
      removeEventListener = this.off(eventType, handler);

  if (removeEventListener) {
    removeResizeObject(this);
  }
}

var resizeMixin = {
  onResize: onResize,
  offResize: offResize
};

module.exports = resizeMixin;

function appendResizeObject(element) {
  var resizeObject = document.createElement('object'),
      domElement = element.domElement,
      style = 'display: block; \n                 position: absolute; \n                 top: 0; \n                 left: 0; \n                 height: 100%; \n                 width: 100%; \n                 overflow: hidden; \n                 pointer-events: none; \n                 z-index: -1;';

  resizeObject.setAttribute('style', style);
  resizeObject.data = 'about:blank';
  resizeObject.type = 'text/html';

  element.__resizeObject__ = resizeObject;

  resizeObject.onload = function () {
    resizeObjectLoadHandler(element);
  };

  domElement.appendChild(resizeObject);
}

function removeResizeObject(element) {
  var domElement = element.domElement,
      resizeObject = element.__resizeObject__,
      objectWindow = resizeObject.contentDocument.defaultView; ///

  objectWindow.removeEventListener('resize', resizeListener);

  domElement.removeChild(resizeObject);
}

function resizeObjectLoadHandler(element) {
  var resizeObject = element.__resizeObject__,
      resizeObjectWindow = resizeObject.contentDocument.defaultView; ///

  resizeObjectWindow.addEventListener('resize', function (event) {
    eventListener(element, event);
  });
}

function eventListener(element, event) {
  var width = element.getWidth(),
      height = element.getHeight(),
      targetElement = element,
      ///
  handlers = element.handlersMap['resize'];

  handlers.forEach(function (handler) {
    handler(width, height, event, targetElement);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9yZXNpemUuanMiXSwibmFtZXMiOlsib25SZXNpemUiLCJoYW5kbGVyIiwiZXZlbnRUeXBlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uIiwiYXBwZW5kUmVzaXplT2JqZWN0Iiwib2ZmUmVzaXplIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9mZiIsInJlbW92ZVJlc2l6ZU9iamVjdCIsInJlc2l6ZU1peGluIiwibW9kdWxlIiwiZXhwb3J0cyIsImVsZW1lbnQiLCJyZXNpemVPYmplY3QiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJkb21FbGVtZW50Iiwic3R5bGUiLCJzZXRBdHRyaWJ1dGUiLCJkYXRhIiwidHlwZSIsIl9fcmVzaXplT2JqZWN0X18iLCJvbmxvYWQiLCJyZXNpemVPYmplY3RMb2FkSGFuZGxlciIsImFwcGVuZENoaWxkIiwib2JqZWN0V2luZG93IiwiY29udGVudERvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJyZXNpemVMaXN0ZW5lciIsInJlbW92ZUNoaWxkIiwicmVzaXplT2JqZWN0V2luZG93IiwiZXZlbnQiLCJldmVudExpc3RlbmVyIiwid2lkdGgiLCJnZXRXaWR0aCIsImhlaWdodCIsImdldEhlaWdodCIsInRhcmdldEVsZW1lbnQiLCJoYW5kbGVycyIsImhhbmRsZXJzTWFwIiwiZm9yRWFjaCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsU0FBU0EsUUFBVCxDQUFrQkMsT0FBbEIsRUFBMkI7QUFDekIsTUFBTUMsWUFBWSxRQUFsQjtBQUFBLE1BQ01DLG1CQUFtQixLQUFLQyxFQUFMLENBQVFGLFNBQVIsRUFBbUJELE9BQW5CLENBRHpCOztBQUdBLE1BQUlFLGdCQUFKLEVBQXNCO0FBQ3BCRSx1QkFBbUIsSUFBbkI7QUFDRDtBQUNGOztBQUVELFNBQVNDLFNBQVQsQ0FBbUJMLE9BQW5CLEVBQTRCO0FBQzFCLE1BQU1DLFlBQVksUUFBbEI7QUFBQSxNQUNNSyxzQkFBc0IsS0FBS0MsR0FBTCxDQUFTTixTQUFULEVBQW9CRCxPQUFwQixDQUQ1Qjs7QUFHQSxNQUFJTSxtQkFBSixFQUF5QjtBQUN2QkUsdUJBQW1CLElBQW5CO0FBQ0Q7QUFDRjs7QUFFRCxJQUFNQyxjQUFjO0FBQ2xCVixZQUFVQSxRQURRO0FBRWxCTSxhQUFXQTtBQUZPLENBQXBCOztBQUtBSyxPQUFPQyxPQUFQLEdBQWlCRixXQUFqQjs7QUFFQSxTQUFTTCxrQkFBVCxDQUE0QlEsT0FBNUIsRUFBcUM7QUFDbkMsTUFBTUMsZUFBZUMsU0FBU0MsYUFBVCxDQUF1QixRQUF2QixDQUFyQjtBQUFBLE1BQ01DLGFBQWFKLFFBQVFJLFVBRDNCO0FBQUEsTUFFTUMsc1NBRk47O0FBWUFKLGVBQWFLLFlBQWIsQ0FBMEIsT0FBMUIsRUFBbUNELEtBQW5DO0FBQ0FKLGVBQWFNLElBQWIsR0FBb0IsYUFBcEI7QUFDQU4sZUFBYU8sSUFBYixHQUFvQixXQUFwQjs7QUFFQVIsVUFBUVMsZ0JBQVIsR0FBMkJSLFlBQTNCOztBQUVBQSxlQUFhUyxNQUFiLEdBQXNCLFlBQVc7QUFDL0JDLDRCQUF3QlgsT0FBeEI7QUFDRCxHQUZEOztBQUlBSSxhQUFXUSxXQUFYLENBQXVCWCxZQUF2QjtBQUNEOztBQUVELFNBQVNMLGtCQUFULENBQTRCSSxPQUE1QixFQUFxQztBQUNuQyxNQUFNSSxhQUFhSixRQUFRSSxVQUEzQjtBQUFBLE1BQ01ILGVBQWVELFFBQVFTLGdCQUQ3QjtBQUFBLE1BRU1JLGVBQWVaLGFBQWFhLGVBQWIsQ0FBNkJDLFdBRmxELENBRG1DLENBRzZCOztBQUVoRUYsZUFBYW5CLG1CQUFiLENBQWlDLFFBQWpDLEVBQTJDc0IsY0FBM0M7O0FBRUFaLGFBQVdhLFdBQVgsQ0FBdUJoQixZQUF2QjtBQUNEOztBQUVELFNBQVNVLHVCQUFULENBQWlDWCxPQUFqQyxFQUEwQztBQUN4QyxNQUFNQyxlQUFlRCxRQUFRUyxnQkFBN0I7QUFBQSxNQUNNUyxxQkFBcUJqQixhQUFhYSxlQUFiLENBQTZCQyxXQUR4RCxDQUR3QyxDQUU4Qjs7QUFFdEVHLHFCQUFtQjVCLGdCQUFuQixDQUFvQyxRQUFwQyxFQUE4QyxVQUFTNkIsS0FBVCxFQUFnQjtBQUM1REMsa0JBQWNwQixPQUFkLEVBQXVCbUIsS0FBdkI7QUFDRCxHQUZEO0FBR0Q7O0FBRUQsU0FBU0MsYUFBVCxDQUF1QnBCLE9BQXZCLEVBQWdDbUIsS0FBaEMsRUFBdUM7QUFDckMsTUFBTUUsUUFBUXJCLFFBQVFzQixRQUFSLEVBQWQ7QUFBQSxNQUNNQyxTQUFTdkIsUUFBUXdCLFNBQVIsRUFEZjtBQUFBLE1BRU1DLGdCQUFnQnpCLE9BRnRCO0FBQUEsTUFFK0I7QUFDekIwQixhQUFXMUIsUUFBUTJCLFdBQVIsQ0FBb0IsUUFBcEIsQ0FIakI7O0FBS0FELFdBQVNFLE9BQVQsQ0FBaUIsVUFBU3hDLE9BQVQsRUFBaUI7QUFDaENBLFlBQVFpQyxLQUFSLEVBQWVFLE1BQWYsRUFBdUJKLEtBQXZCLEVBQThCTSxhQUE5QjtBQUNELEdBRkQ7QUFHRCIsImZpbGUiOiJyZXNpemUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIG9uUmVzaXplKGhhbmRsZXIpIHtcbiAgY29uc3QgZXZlbnRUeXBlID0gJ3Jlc2l6ZScsXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXIgPSB0aGlzLm9uKGV2ZW50VHlwZSwgaGFuZGxlcik7XG5cbiAgaWYgKGFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICBhcHBlbmRSZXNpemVPYmplY3QodGhpcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb2ZmUmVzaXplKGhhbmRsZXIpIHtcbiAgY29uc3QgZXZlbnRUeXBlID0gJ3Jlc2l6ZScsXG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIgPSB0aGlzLm9mZihldmVudFR5cGUsIGhhbmRsZXIpO1xuXG4gIGlmIChyZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgcmVtb3ZlUmVzaXplT2JqZWN0KHRoaXMpO1xuICB9XG59XG5cbmNvbnN0IHJlc2l6ZU1peGluID0ge1xuICBvblJlc2l6ZTogb25SZXNpemUsXG4gIG9mZlJlc2l6ZTogb2ZmUmVzaXplXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlc2l6ZU1peGluO1xuXG5mdW5jdGlvbiBhcHBlbmRSZXNpemVPYmplY3QoZWxlbWVudCkge1xuICBjb25zdCByZXNpemVPYmplY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvYmplY3QnKSxcbiAgICAgICAgZG9tRWxlbWVudCA9IGVsZW1lbnQuZG9tRWxlbWVudCxcbiAgICAgICAgc3R5bGUgPSBgZGlzcGxheTogYmxvY2s7IFxuICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7IFxuICAgICAgICAgICAgICAgICB0b3A6IDA7IFxuICAgICAgICAgICAgICAgICBsZWZ0OiAwOyBcbiAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlOyBcbiAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7IFxuICAgICAgICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuOyBcbiAgICAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7IFxuICAgICAgICAgICAgICAgICB6LWluZGV4OiAtMTtgO1xuXG4gIHJlc2l6ZU9iamVjdC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgc3R5bGUpO1xuICByZXNpemVPYmplY3QuZGF0YSA9ICdhYm91dDpibGFuayc7XG4gIHJlc2l6ZU9iamVjdC50eXBlID0gJ3RleHQvaHRtbCc7XG5cbiAgZWxlbWVudC5fX3Jlc2l6ZU9iamVjdF9fID0gcmVzaXplT2JqZWN0O1xuXG4gIHJlc2l6ZU9iamVjdC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXNpemVPYmplY3RMb2FkSGFuZGxlcihlbGVtZW50KVxuICB9O1xuXG4gIGRvbUVsZW1lbnQuYXBwZW5kQ2hpbGQocmVzaXplT2JqZWN0KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlUmVzaXplT2JqZWN0KGVsZW1lbnQpIHtcbiAgY29uc3QgZG9tRWxlbWVudCA9IGVsZW1lbnQuZG9tRWxlbWVudCxcbiAgICAgICAgcmVzaXplT2JqZWN0ID0gZWxlbWVudC5fX3Jlc2l6ZU9iamVjdF9fLFxuICAgICAgICBvYmplY3RXaW5kb3cgPSByZXNpemVPYmplY3QuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3OyAgLy8vXG5cbiAgb2JqZWN0V2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUxpc3RlbmVyKTtcblxuICBkb21FbGVtZW50LnJlbW92ZUNoaWxkKHJlc2l6ZU9iamVjdCk7XG59XG5cbmZ1bmN0aW9uIHJlc2l6ZU9iamVjdExvYWRIYW5kbGVyKGVsZW1lbnQpIHtcbiAgY29uc3QgcmVzaXplT2JqZWN0ID0gZWxlbWVudC5fX3Jlc2l6ZU9iamVjdF9fLFxuICAgICAgICByZXNpemVPYmplY3RXaW5kb3cgPSByZXNpemVPYmplY3QuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3OyAgLy8vXG5cbiAgcmVzaXplT2JqZWN0V2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgZXZlbnRMaXN0ZW5lcihlbGVtZW50LCBldmVudCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBldmVudExpc3RlbmVyKGVsZW1lbnQsIGV2ZW50KSB7XG4gIGNvbnN0IHdpZHRoID0gZWxlbWVudC5nZXRXaWR0aCgpLFxuICAgICAgICBoZWlnaHQgPSBlbGVtZW50LmdldEhlaWdodCgpLFxuICAgICAgICB0YXJnZXRFbGVtZW50ID0gZWxlbWVudCwgLy8vXG4gICAgICAgIGhhbmRsZXJzID0gZWxlbWVudC5oYW5kbGVyc01hcFsncmVzaXplJ107XG5cbiAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVyKXtcbiAgICBoYW5kbGVyKHdpZHRoLCBoZWlnaHQsIGV2ZW50LCB0YXJnZXRFbGVtZW50KTtcbiAgfSk7XG59XG4iXX0=