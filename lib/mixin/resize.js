'use strict';

function onResize(handler) {
  var handlers = this.handlersMap['resize'];

  if (handlers === undefined) {
    appendResizeObject(this);
  }

  addResizeHandler(this, handler);
}

function offResize(handler) {
  removeResizeHandler(this, handler);

  var handlers = this.handlersMap['resize'];

  if (handlers === undefined) {
    removeResizeObject(this);
  }
}

var resize = {
  onResize: onResize,
  offResize: offResize
};

module.exports = resize;

function addResizeHandler(element, handler) {
  var handlers = element.handlersMap['resize'];

  if (handlers === undefined) {
    handlers = [];

    element.handlersMap['resize'] = handlers;
  }

  handlers.push(handler);
}

function removeResizeHandler(element, handler) {
  var handlers = element.handlersMap['resize'];

  if (handlers.length === 0) {
    delete element.handlersMap[type];
  } else {
    var index = handlers.indexOf(handler);

    if (index > -1) {
      var deleteCount = 1;

      handlers.splice(index, deleteCount);
    }
  }
}

function appendResizeObject(element) {
  var resizeObject = document.createElement('object'),
      domElement = element.domElement,
      style = ' display: block; \n                  position: absolute; \n                  top: 0; \n                  left: 0; \n                  height: 100%; \n                  width: 100%; \n                  overflow: hidden; \n                  pointer-events: none; \n                  z-index: -1;';

  resizeObject.setAttribute('style', style);
  resizeObject.data = 'about:blank';
  resizeObject.type = 'text/html';

  element.__resizeObject__ = resizeObject;

  resizeObject.onload = function () {
    resizeObjectLoadHandler(element);
  };

  domElement.appendChild(resizeObject);
}

function removeResizeObject(element) {
  var domElement = element.domElement,
      resizeObject = element.__resizeObject__,
      objectWindow = resizeObject.contentDocument.defaultView; ///

  objectWindow.removeEventListener('resize', resizeListener);

  domElement.removeChild(resizeObject);
}

function resizeObjectLoadHandler(element) {
  var resizeObject = element.__resizeObject__,
      resizeObjectWindow = resizeObject.contentDocument.defaultView; ///

  resizeObjectWindow.addEventListener('resize', function () {
    intermediateHandler(element);
  });
}

function intermediateHandler(element) {
  var width = element.getWidth(),
      height = element.getHeight(),
      handlers = element.handlersMap['resize'];

  handlers.forEach(function (handler) {
    handler(width, height);
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9yZXNpemUuanMiXSwibmFtZXMiOlsib25SZXNpemUiLCJoYW5kbGVyIiwiaGFuZGxlcnMiLCJoYW5kbGVyc01hcCIsInVuZGVmaW5lZCIsImFwcGVuZFJlc2l6ZU9iamVjdCIsImFkZFJlc2l6ZUhhbmRsZXIiLCJvZmZSZXNpemUiLCJyZW1vdmVSZXNpemVIYW5kbGVyIiwicmVtb3ZlUmVzaXplT2JqZWN0IiwicmVzaXplIiwibW9kdWxlIiwiZXhwb3J0cyIsImVsZW1lbnQiLCJwdXNoIiwibGVuZ3RoIiwidHlwZSIsImluZGV4IiwiaW5kZXhPZiIsImRlbGV0ZUNvdW50Iiwic3BsaWNlIiwicmVzaXplT2JqZWN0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZG9tRWxlbWVudCIsInN0eWxlIiwic2V0QXR0cmlidXRlIiwiZGF0YSIsIl9fcmVzaXplT2JqZWN0X18iLCJvbmxvYWQiLCJyZXNpemVPYmplY3RMb2FkSGFuZGxlciIsImFwcGVuZENoaWxkIiwib2JqZWN0V2luZG93IiwiY29udGVudERvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVzaXplTGlzdGVuZXIiLCJyZW1vdmVDaGlsZCIsInJlc2l6ZU9iamVjdFdpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbnRlcm1lZGlhdGVIYW5kbGVyIiwid2lkdGgiLCJnZXRXaWR0aCIsImhlaWdodCIsImdldEhlaWdodCIsImZvckVhY2giXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFNBQVNBLFFBQVQsQ0FBa0JDLE9BQWxCLEVBQTJCO0FBQ3pCLE1BQU1DLFdBQVcsS0FBS0MsV0FBTCxDQUFpQixRQUFqQixDQUFqQjs7QUFFQSxNQUFJRCxhQUFhRSxTQUFqQixFQUE0QjtBQUMxQkMsdUJBQW1CLElBQW5CO0FBQ0Q7O0FBRURDLG1CQUFpQixJQUFqQixFQUF1QkwsT0FBdkI7QUFDRDs7QUFFRCxTQUFTTSxTQUFULENBQW1CTixP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QWlCLFVBQVM1QyxPQUFULEVBQWlCO0FBQ2hDQSxZQUFRd0MsS0FBUixFQUFlRSxNQUFmO0FBQ0QsR0FGRDtBQUdEIiwiZmlsZSI6InJlc2l6ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gb25SZXNpemUoaGFuZGxlcikge1xuICBjb25zdCBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnNNYXBbJ3Jlc2l6ZSddO1xuXG4gIGlmIChoYW5kbGVycyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXBwZW5kUmVzaXplT2JqZWN0KHRoaXMpO1xuICB9XG5cbiAgYWRkUmVzaXplSGFuZGxlcih0aGlzLCBoYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gb2ZmUmVzaXplKGhhbmRsZXIpIHtcbiAgcmVtb3ZlUmVzaXplSGFuZGxlcih0aGlzLCBoYW5kbGVyKTtcblxuICBjb25zdCBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnNNYXBbJ3Jlc2l6ZSddO1xuXG4gIGlmIChoYW5kbGVycyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmVtb3ZlUmVzaXplT2JqZWN0KHRoaXMpO1xuICB9XG59XG5cbmNvbnN0IHJlc2l6ZSA9IHtcbiAgb25SZXNpemU6IG9uUmVzaXplLFxuICBvZmZSZXNpemU6IG9mZlJlc2l6ZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXNpemU7XG5cbmZ1bmN0aW9uIGFkZFJlc2l6ZUhhbmRsZXIoZWxlbWVudCwgaGFuZGxlcikge1xuICBsZXQgaGFuZGxlcnMgPSBlbGVtZW50LmhhbmRsZXJzTWFwWydyZXNpemUnXTtcblxuICBpZiAoKGhhbmRsZXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgaGFuZGxlcnMgPSBbXTtcblxuICAgIGVsZW1lbnQuaGFuZGxlcnNNYXBbJ3Jlc2l6ZSddID0gaGFuZGxlcnM7XG4gIH1cblxuICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVSZXNpemVIYW5kbGVyKGVsZW1lbnQsIGhhbmRsZXIpIHtcbiAgY29uc3QgaGFuZGxlcnMgPSBlbGVtZW50LmhhbmRsZXJzTWFwWydyZXNpemUnXTtcblxuICBpZiAoKGhhbmRsZXJzLmxlbmd0aCA9PT0gMCkpIHtcbiAgICBkZWxldGUgKGVsZW1lbnQuaGFuZGxlcnNNYXBbdHlwZV0pO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGluZGV4ID0gaGFuZGxlcnMuaW5kZXhPZihoYW5kbGVyKTtcblxuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICBjb25zdCBkZWxldGVDb3VudCA9IDE7XG5cbiAgICAgIGhhbmRsZXJzLnNwbGljZShpbmRleCwgZGVsZXRlQ291bnQpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBlbmRSZXNpemVPYmplY3QoZWxlbWVudCkge1xuICBjb25zdCByZXNpemVPYmplY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvYmplY3QnKSxcbiAgICAgICAgZG9tRWxlbWVudCA9IGVsZW1lbnQuZG9tRWxlbWVudCxcbiAgICAgICAgc3R5bGUgPSBgIGRpc3BsYXk6IGJsb2NrOyBcbiAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgXG4gICAgICAgICAgICAgICAgICB0b3A6IDA7IFxuICAgICAgICAgICAgICAgICAgbGVmdDogMDsgXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7IFxuICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7IFxuICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsgXG4gICAgICAgICAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTsgXG4gICAgICAgICAgICAgICAgICB6LWluZGV4OiAtMTtgO1xuXG4gIHJlc2l6ZU9iamVjdC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgc3R5bGUpO1xuICByZXNpemVPYmplY3QuZGF0YSA9ICdhYm91dDpibGFuayc7XG4gIHJlc2l6ZU9iamVjdC50eXBlID0gJ3RleHQvaHRtbCc7XG5cbiAgZWxlbWVudC5fX3Jlc2l6ZU9iamVjdF9fID0gcmVzaXplT2JqZWN0O1xuXG4gIHJlc2l6ZU9iamVjdC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXNpemVPYmplY3RMb2FkSGFuZGxlcihlbGVtZW50KVxuICB9O1xuXG4gIGRvbUVsZW1lbnQuYXBwZW5kQ2hpbGQocmVzaXplT2JqZWN0KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlUmVzaXplT2JqZWN0KGVsZW1lbnQpIHtcbiAgY29uc3QgZG9tRWxlbWVudCA9IGVsZW1lbnQuZG9tRWxlbWVudCxcbiAgICAgICAgcmVzaXplT2JqZWN0ID0gZWxlbWVudC5fX3Jlc2l6ZU9iamVjdF9fLFxuICAgICAgICBvYmplY3RXaW5kb3cgPSByZXNpemVPYmplY3QuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3OyAgLy8vXG5cbiAgb2JqZWN0V2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUxpc3RlbmVyKTtcblxuICBkb21FbGVtZW50LnJlbW92ZUNoaWxkKHJlc2l6ZU9iamVjdCk7XG59XG5cbmZ1bmN0aW9uIHJlc2l6ZU9iamVjdExvYWRIYW5kbGVyKGVsZW1lbnQpIHtcbiAgY29uc3QgcmVzaXplT2JqZWN0ID0gZWxlbWVudC5fX3Jlc2l6ZU9iamVjdF9fLFxuICAgICAgICByZXNpemVPYmplY3RXaW5kb3cgPSByZXNpemVPYmplY3QuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3OyAgLy8vXG5cbiAgcmVzaXplT2JqZWN0V2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkge1xuICAgIGludGVybWVkaWF0ZUhhbmRsZXIoZWxlbWVudCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpbnRlcm1lZGlhdGVIYW5kbGVyKGVsZW1lbnQpIHtcbiAgY29uc3Qgd2lkdGggPSBlbGVtZW50LmdldFdpZHRoKCksXG4gICAgICAgIGhlaWdodCA9IGVsZW1lbnQuZ2V0SGVpZ2h0KCksXG4gICAgICAgIGhhbmRsZXJzID0gZWxlbWVudC5oYW5kbGVyc01hcFsncmVzaXplJ107XG5cbiAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVyKXtcbiAgICBoYW5kbGVyKHdpZHRoLCBoZWlnaHQpO1xuICB9KTtcbn1cbiJdfQ==