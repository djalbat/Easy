'use strict';

function onResize(handler) {
  var type = 'resize',
      addEventListener = this.addHandler(type, handler);

  if (addEventListener) {
    appendResizeObject(this);
  }
}

function offResize(handler) {
  var type = 'resize',
      removeEventListener = this.removeHandler(type, handler);

  if (removeEventListener) {
    removeResizeObject(this);
  }
}

var resize = {
  onResize: onResize,
  offResize: offResize
};

module.exports = resize;

function appendResizeObject(element) {
  var resizeObject = document.createElement('object'),
      domElement = element.domElement,
      style = ' display: block; \n                  position: absolute; \n                  top: 0; \n                  left: 0; \n                  height: 100%; \n                  width: 100%; \n                  overflow: hidden; \n                  pointer-events: none; \n                  z-index: -1;';

  resizeObject.setAttribute('style', style);
  resizeObject.data = 'about:blank';
  resizeObject.type = 'text/html';

  element.__resizeObject__ = resizeObject;

  resizeObject.onload = function () {
    resizeObjectLoadHandler(element);
  };

  domElement.appendChild(resizeObject);
}

function removeResizeObject(element) {
  var domElement = element.domElement,
      resizeObject = element.__resizeObject__,
      objectWindow = resizeObject.contentDocument.defaultView; ///

  objectWindow.removeEventListener('resize', resizeListener);

  domElement.removeChild(resizeObject);
}

function resizeObjectLoadHandler(element) {
  var resizeObject = element.__resizeObject__,
      resizeObjectWindow = resizeObject.contentDocument.defaultView; ///

  resizeObjectWindow.addEventListener('resize', function () {
    eventListener(element);
  });
}

function eventListener(element) {
  var width = element.getWidth(),
      height = element.getHeight(),
      handlers = element.handlersMap['resize'];

  handlers.forEach(function (handler) {
    handler(width, height);
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9yZXNpemUuanMiXSwibmFtZXMiOlsib25SZXNpemUiLCJoYW5kbGVyIiwidHlwZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJhZGRIYW5kbGVyIiwiYXBwZW5kUmVzaXplT2JqZWN0Iiwib2ZmUmVzaXplIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbW92ZUhhbmRsZXIiLCJyZW1vdmVSZXNpemVPYmplY3QiLCJyZXNpemUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZWxlbWVudCIsInJlc2l6ZU9iamVjdCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImRvbUVsZW1lbnQiLCJzdHlsZSIsInNldEF0dHJpYnV0ZSIsImRhdGEiLCJfX3Jlc2l6ZU9iamVjdF9fIiwib25sb2FkIiwicmVzaXplT2JqZWN0TG9hZEhhbmRsZXIiLCJhcHBlbmRDaGlsZCIsIm9iamVjdFdpbmRvdyIsImNvbnRlbnREb2N1bWVudCIsImRlZmF1bHRWaWV3IiwicmVzaXplTGlzdGVuZXIiLCJyZW1vdmVDaGlsZCIsInJlc2l6ZU9iamVjdFdpbmRvdyIsImV2ZW50TGlzdGVuZXIiLCJ3aWR0aCIsImdldFdpZHRoIiwiaGVpZ2h0IiwiZ2V0SGVpZ2h0IiwiaGFuZGxlcnMiLCJoYW5kbGVyc01hcCIsImZvckVhY2giXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFNBQVNBLFFBQVQsQ0FBa0JDLE9BQWxCLEVBQTJCO0FBQ3pCLE1BQU1DLE9BQU8sUUFBYjtBQUFBLE1BQ01DLG1CQUFtQixLQUFLQyxVQUFMLENBQWdCRixJQUFoQixFQUFzQkQsT0FBdEIsQ0FEekI7O0FBR0EsTUFBSUUsZ0JBQUosRUFBc0I7QUFDcEJFLHVCQUFtQixJQUFuQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU0MsU0FBVCxDQUFtQkwsT0FBbkIsRUFBNEI7QUFDMUIsTUFBTUMsT0FBTyxRQUFiO0FBQUEsTUFDTUssc0JBQXNCLEtBQUtDLGFBQUwsQ0FBbUJOLElBQW5CLEVBQXlCRCxPQUF6QixDQUQ1Qjs7QUFHQSxNQUFJTSxtQkFBSixFQUF5QjtBQUN2QkUsdUJBQW1CLElBQW5CO0FBQ0Q7QUFDRjs7QUFFRCxJQUFNQyxTQUFTO0FBQ2JWLFlBQVVBLFFBREc7QUFFYk0sYUFBV0E7QUFGRSxDQUFmOztBQUtBSyxPQUFPQyxPQUFQLEdBQWlCRixNQUFqQjs7QUFFQSxTQUFTTCxrQkFBVCxDQUE0QlEsT0FBNUIsRUFBcUM7QUFDbkMsTUFBTUMsZUFBZUMsU0FBU0MsYUFBVCxDQUF1QixRQUF2QixDQUFyQjtBQUFBLE1BQ01DLGFBQWFKLFFBQVFJLFVBRDNCO0FBQUEsTUFFTUMsK1NBRk47O0FBWUFKLGVBQWFLLFlBQWIsQ0FBMEIsT0FBMUIsRUFBbUNELEtBQW5DO0FBQ0FKLGVBQWFNLElBQWIsR0FBb0IsYUFBcEI7QUFDQU4sZUFBYVosSUFBYixHQUFvQixXQUFwQjs7QUFFQVcsVUFBUVEsZ0JBQVIsR0FBMkJQLFlBQTNCOztBQUVBQSxlQUFhUSxNQUFiLEdBQXNCLFlBQVc7QUFDL0JDLDRCQUF3QlYsT0FBeEI7QUFDRCxHQUZEOztBQUlBSSxhQUFXTyxXQUFYLENBQXVCVixZQUF2QjtBQUNEOztBQUVELFNBQVNMLGtCQUFULENBQTRCSSxPQUE1QixFQUFxQztBQUNuQyxNQUFNSSxhQUFhSixRQUFRSSxVQUEzQjtBQUFBLE1BQ01ILGVBQWVELFFBQVFRLGdCQUQ3QjtBQUFBLE1BRU1JLGVBQWVYLGFBQWFZLGVBQWIsQ0FBNkJDLFdBRmxELENBRG1DLENBRzZCOztBQUVoRUYsZUFBYWxCLG1CQUFiLENBQWlDLFFBQWpDLEVBQTJDcUIsY0FBM0M7O0FBRUFYLGFBQVdZLFdBQVgsQ0FBdUJmLFlBQXZCO0FBQ0Q7O0FBRUQsU0FBU1MsdUJBQVQsQ0FBaUNWLE9BQWpDLEVBQTBDO0FBQ3hDLE1BQU1DLGVBQWVELFFBQVFRLGdCQUE3QjtBQUFBLE1BQ01TLHFCQUFxQmhCLGFBQWFZLGVBQWIsQ0FBNkJDLFdBRHhELENBRHdDLENBRThCOztBQUV0RUcscUJBQW1CM0IsZ0JBQW5CLENBQW9DLFFBQXBDLEVBQThDLFlBQVc7QUFDdkQ0QixrQkFBY2xCLE9BQWQ7QUFDRCxHQUZEO0FBR0Q7O0FBRUQsU0FBU2tCLGFBQVQsQ0FBdUJsQixPQUF2QixFQUFnQztBQUM5QixNQUFNbUIsUUFBUW5CLFFBQVFvQixRQUFSLEVBQWQ7QUFBQSxNQUNNQyxTQUFTckIsUUFBUXNCLFNBQVIsRUFEZjtBQUFBLE1BRU1DLFdBQVd2QixRQUFRd0IsV0FBUixDQUFvQixRQUFwQixDQUZqQjs7QUFJQUQsV0FBU0UsT0FBVCxDQUFpQixVQUFTckMsT0FBVCxFQUFpQjtBQUNoQ0EsWUFBUStCLEtBQVIsRUFBZUUsTUFBZjtBQUNELEdBRkQ7QUFHRCIsImZpbGUiOiJyZXNpemUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIG9uUmVzaXplKGhhbmRsZXIpIHtcbiAgY29uc3QgdHlwZSA9ICdyZXNpemUnLFxuICAgICAgICBhZGRFdmVudExpc3RlbmVyID0gdGhpcy5hZGRIYW5kbGVyKHR5cGUsIGhhbmRsZXIpO1xuXG4gIGlmIChhZGRFdmVudExpc3RlbmVyKSB7XG4gICAgYXBwZW5kUmVzaXplT2JqZWN0KHRoaXMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9mZlJlc2l6ZShoYW5kbGVyKSB7XG4gIGNvbnN0IHR5cGUgPSAncmVzaXplJyxcbiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IHRoaXMucmVtb3ZlSGFuZGxlcih0eXBlLCBoYW5kbGVyKTtcblxuICBpZiAocmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgIHJlbW92ZVJlc2l6ZU9iamVjdCh0aGlzKTtcbiAgfVxufVxuXG5jb25zdCByZXNpemUgPSB7XG4gIG9uUmVzaXplOiBvblJlc2l6ZSxcbiAgb2ZmUmVzaXplOiBvZmZSZXNpemVcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcmVzaXplO1xuXG5mdW5jdGlvbiBhcHBlbmRSZXNpemVPYmplY3QoZWxlbWVudCkge1xuICBjb25zdCByZXNpemVPYmplY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvYmplY3QnKSxcbiAgICAgICAgZG9tRWxlbWVudCA9IGVsZW1lbnQuZG9tRWxlbWVudCxcbiAgICAgICAgc3R5bGUgPSBgIGRpc3BsYXk6IGJsb2NrOyBcbiAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgXG4gICAgICAgICAgICAgICAgICB0b3A6IDA7IFxuICAgICAgICAgICAgICAgICAgbGVmdDogMDsgXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7IFxuICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7IFxuICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsgXG4gICAgICAgICAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTsgXG4gICAgICAgICAgICAgICAgICB6LWluZGV4OiAtMTtgO1xuXG4gIHJlc2l6ZU9iamVjdC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgc3R5bGUpO1xuICByZXNpemVPYmplY3QuZGF0YSA9ICdhYm91dDpibGFuayc7XG4gIHJlc2l6ZU9iamVjdC50eXBlID0gJ3RleHQvaHRtbCc7XG5cbiAgZWxlbWVudC5fX3Jlc2l6ZU9iamVjdF9fID0gcmVzaXplT2JqZWN0O1xuXG4gIHJlc2l6ZU9iamVjdC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXNpemVPYmplY3RMb2FkSGFuZGxlcihlbGVtZW50KVxuICB9O1xuXG4gIGRvbUVsZW1lbnQuYXBwZW5kQ2hpbGQocmVzaXplT2JqZWN0KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlUmVzaXplT2JqZWN0KGVsZW1lbnQpIHtcbiAgY29uc3QgZG9tRWxlbWVudCA9IGVsZW1lbnQuZG9tRWxlbWVudCxcbiAgICAgICAgcmVzaXplT2JqZWN0ID0gZWxlbWVudC5fX3Jlc2l6ZU9iamVjdF9fLFxuICAgICAgICBvYmplY3RXaW5kb3cgPSByZXNpemVPYmplY3QuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3OyAgLy8vXG5cbiAgb2JqZWN0V2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUxpc3RlbmVyKTtcblxuICBkb21FbGVtZW50LnJlbW92ZUNoaWxkKHJlc2l6ZU9iamVjdCk7XG59XG5cbmZ1bmN0aW9uIHJlc2l6ZU9iamVjdExvYWRIYW5kbGVyKGVsZW1lbnQpIHtcbiAgY29uc3QgcmVzaXplT2JqZWN0ID0gZWxlbWVudC5fX3Jlc2l6ZU9iamVjdF9fLFxuICAgICAgICByZXNpemVPYmplY3RXaW5kb3cgPSByZXNpemVPYmplY3QuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3OyAgLy8vXG5cbiAgcmVzaXplT2JqZWN0V2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkge1xuICAgIGV2ZW50TGlzdGVuZXIoZWxlbWVudCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBldmVudExpc3RlbmVyKGVsZW1lbnQpIHtcbiAgY29uc3Qgd2lkdGggPSBlbGVtZW50LmdldFdpZHRoKCksXG4gICAgICAgIGhlaWdodCA9IGVsZW1lbnQuZ2V0SGVpZ2h0KCksXG4gICAgICAgIGhhbmRsZXJzID0gZWxlbWVudC5oYW5kbGVyc01hcFsncmVzaXplJ107XG5cbiAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVyKXtcbiAgICBoYW5kbGVyKHdpZHRoLCBoZWlnaHQpO1xuICB9KTtcbn1cbiJdfQ==