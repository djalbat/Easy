'use strict';

function onResize(handler) {
  var eventType = 'resize',
      addEventListener = this.on(eventType, handler);

  if (addEventListener) {
    appendResizeObject(this);
  }
}

function offResize(handler) {
  var eventType = 'resize',
      removeEventListener = this.off(eventType, handler);

  if (removeEventListener) {
    removeResizeObject(this);
  }
}

var resizeMixin = {
  onResize: onResize,
  offResize: offResize
};

module.exports = resizeMixin;

function appendResizeObject(element) {
  var resizeObject = document.createElement('object'),
      domElement = element.domElement,
      style = 'display: block; \n                 position: absolute; \n                 top: 0; \n                 left: 0; \n                 height: 100%; \n                 width: 100%; \n                 overflow: hidden; \n                 pointer-events: none; \n                 z-index: -1;';

  resizeObject.setAttribute('style', style);
  resizeObject.data = 'about:blank';
  resizeObject.type = 'text/html';

  element.__resizeObject__ = resizeObject;

  resizeObject.onload = function () {
    resizeObjectLoadHandler(element);
  };

  domElement.appendChild(resizeObject);
}

function removeResizeObject(element) {
  var domElement = element.domElement,
      resizeObject = element.__resizeObject__,
      objectWindow = resizeObject.contentDocument.defaultView; ///

  objectWindow.removeEventListener('resize', resizeListener);

  domElement.removeChild(resizeObject);
}

function resizeObjectLoadHandler(element) {
  var resizeObject = element.__resizeObject__,
      resizeObjectWindow = resizeObject.contentDocument.defaultView; ///

  resizeObjectWindow.addEventListener('resize', function () {
    eventListener(element);
  });
}

function eventListener(element) {
  var width = element.getWidth(),
      height = element.getHeight(),
      targetElement = element,
      ///
  handlers = element.handlersMap['resize'];

  handlers.forEach(function (handler) {
    handler(width, height, targetElement);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9yZXNpemUuanMiXSwibmFtZXMiOlsib25SZXNpemUiLCJoYW5kbGVyIiwiZXZlbnRUeXBlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uIiwiYXBwZW5kUmVzaXplT2JqZWN0Iiwib2ZmUmVzaXplIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9mZiIsInJlbW92ZVJlc2l6ZU9iamVjdCIsInJlc2l6ZU1peGluIiwibW9kdWxlIiwiZXhwb3J0cyIsImVsZW1lbnQiLCJyZXNpemVPYmplY3QiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJkb21FbGVtZW50Iiwic3R5bGUiLCJzZXRBdHRyaWJ1dGUiLCJkYXRhIiwidHlwZSIsIl9fcmVzaXplT2JqZWN0X18iLCJvbmxvYWQiLCJyZXNpemVPYmplY3RMb2FkSGFuZGxlciIsImFwcGVuZENoaWxkIiwib2JqZWN0V2luZG93IiwiY29udGVudERvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJyZXNpemVMaXN0ZW5lciIsInJlbW92ZUNoaWxkIiwicmVzaXplT2JqZWN0V2luZG93IiwiZXZlbnRMaXN0ZW5lciIsIndpZHRoIiwiZ2V0V2lkdGgiLCJoZWlnaHQiLCJnZXRIZWlnaHQiLCJ0YXJnZXRFbGVtZW50IiwiaGFuZGxlcnMiLCJoYW5kbGVyc01hcCIsImZvckVhY2giXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFNBQVNBLFFBQVQsQ0FBa0JDLE9BQWxCLEVBQTJCO0FBQ3pCLE1BQU1DLFlBQVksUUFBbEI7QUFBQSxNQUNNQyxtQkFBbUIsS0FBS0MsRUFBTCxDQUFRRixTQUFSLEVBQW1CRCxPQUFuQixDQUR6Qjs7QUFHQSxNQUFJRSxnQkFBSixFQUFzQjtBQUNwQkUsdUJBQW1CLElBQW5CO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTQyxTQUFULENBQW1CTCxPQUFuQixFQUE0QjtBQUMxQixNQUFNQyxZQUFZLFFBQWxCO0FBQUEsTUFDTUssc0JBQXNCLEtBQUtDLEdBQUwsQ0FBU04sU0FBVCxFQUFvQkQsT0FBcEIsQ0FENUI7O0FBR0EsTUFBSU0sbUJBQUosRUFBeUI7QUFDdkJFLHVCQUFtQixJQUFuQjtBQUNEO0FBQ0Y7O0FBRUQsSUFBTUMsY0FBYztBQUNsQlYsWUFBVUEsUUFEUTtBQUVsQk0sYUFBV0E7QUFGTyxDQUFwQjs7QUFLQUssT0FBT0MsT0FBUCxHQUFpQkYsV0FBakI7O0FBRUEsU0FBU0wsa0JBQVQsQ0FBNEJRLE9BQTVCLEVBQXFDO0FBQ25DLE1BQU1DLGVBQWVDLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBckI7QUFBQSxNQUNNQyxhQUFhSixRQUFRSSxVQUQzQjtBQUFBLE1BRU1DLHNTQUZOOztBQVlBSixlQUFhSyxZQUFiLENBQTBCLE9BQTFCLEVBQW1DRCxLQUFuQztBQUNBSixlQUFhTSxJQUFiLEdBQW9CLGFBQXBCO0FBQ0FOLGVBQWFPLElBQWIsR0FBb0IsV0FBcEI7O0FBRUFSLFVBQVFTLGdCQUFSLEdBQTJCUixZQUEzQjs7QUFFQUEsZUFBYVMsTUFBYixHQUFzQixZQUFXO0FBQy9CQyw0QkFBd0JYLE9BQXhCO0FBQ0QsR0FGRDs7QUFJQUksYUFBV1EsV0FBWCxDQUF1QlgsWUFBdkI7QUFDRDs7QUFFRCxTQUFTTCxrQkFBVCxDQUE0QkksT0FBNUIsRUFBcUM7QUFDbkMsTUFBTUksYUFBYUosUUFBUUksVUFBM0I7QUFBQSxNQUNNSCxlQUFlRCxRQUFRUyxnQkFEN0I7QUFBQSxNQUVNSSxlQUFlWixhQUFhYSxlQUFiLENBQTZCQyxXQUZsRCxDQURtQyxDQUc2Qjs7QUFFaEVGLGVBQWFuQixtQkFBYixDQUFpQyxRQUFqQyxFQUEyQ3NCLGNBQTNDOztBQUVBWixhQUFXYSxXQUFYLENBQXVCaEIsWUFBdkI7QUFDRDs7QUFFRCxTQUFTVSx1QkFBVCxDQUFpQ1gsT0FBakMsRUFBMEM7QUFDeEMsTUFBTUMsZUFBZUQsUUFBUVMsZ0JBQTdCO0FBQUEsTUFDTVMscUJBQXFCakIsYUFBYWEsZUFBYixDQUE2QkMsV0FEeEQsQ0FEd0MsQ0FFOEI7O0FBRXRFRyxxQkFBbUI1QixnQkFBbkIsQ0FBb0MsUUFBcEMsRUFBOEMsWUFBVztBQUN2RDZCLGtCQUFjbkIsT0FBZDtBQUNELEdBRkQ7QUFHRDs7QUFFRCxTQUFTbUIsYUFBVCxDQUF1Qm5CLE9BQXZCLEVBQWdDO0FBQzlCLE1BQU1vQixRQUFRcEIsUUFBUXFCLFFBQVIsRUFBZDtBQUFBLE1BQ01DLFNBQVN0QixRQUFRdUIsU0FBUixFQURmO0FBQUEsTUFFTUMsZ0JBQWdCeEIsT0FGdEI7QUFBQSxNQUUrQjtBQUN6QnlCLGFBQVd6QixRQUFRMEIsV0FBUixDQUFvQixRQUFwQixDQUhqQjs7QUFLQUQsV0FBU0UsT0FBVCxDQUFpQixVQUFTdkMsT0FBVCxFQUFpQjtBQUNoQ0EsWUFBUWdDLEtBQVIsRUFBZUUsTUFBZixFQUF1QkUsYUFBdkI7QUFDRCxHQUZEO0FBR0QiLCJmaWxlIjoicmVzaXplLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBvblJlc2l6ZShoYW5kbGVyKSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9ICdyZXNpemUnLFxuICAgICAgICBhZGRFdmVudExpc3RlbmVyID0gdGhpcy5vbihldmVudFR5cGUsIGhhbmRsZXIpO1xuXG4gIGlmIChhZGRFdmVudExpc3RlbmVyKSB7XG4gICAgYXBwZW5kUmVzaXplT2JqZWN0KHRoaXMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9mZlJlc2l6ZShoYW5kbGVyKSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9ICdyZXNpemUnLFxuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyID0gdGhpcy5vZmYoZXZlbnRUeXBlLCBoYW5kbGVyKTtcblxuICBpZiAocmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgIHJlbW92ZVJlc2l6ZU9iamVjdCh0aGlzKTtcbiAgfVxufVxuXG5jb25zdCByZXNpemVNaXhpbiA9IHtcbiAgb25SZXNpemU6IG9uUmVzaXplLFxuICBvZmZSZXNpemU6IG9mZlJlc2l6ZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXNpemVNaXhpbjtcblxuZnVuY3Rpb24gYXBwZW5kUmVzaXplT2JqZWN0KGVsZW1lbnQpIHtcbiAgY29uc3QgcmVzaXplT2JqZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb2JqZWN0JyksXG4gICAgICAgIGRvbUVsZW1lbnQgPSBlbGVtZW50LmRvbUVsZW1lbnQsXG4gICAgICAgIHN0eWxlID0gYGRpc3BsYXk6IGJsb2NrOyBcbiAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOyBcbiAgICAgICAgICAgICAgICAgdG9wOiAwOyBcbiAgICAgICAgICAgICAgICAgbGVmdDogMDsgXG4gICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTsgXG4gICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOyBcbiAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsgXG4gICAgICAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lOyBcbiAgICAgICAgICAgICAgICAgei1pbmRleDogLTE7YDtcblxuICByZXNpemVPYmplY3Quc2V0QXR0cmlidXRlKCdzdHlsZScsIHN0eWxlKTtcbiAgcmVzaXplT2JqZWN0LmRhdGEgPSAnYWJvdXQ6YmxhbmsnO1xuICByZXNpemVPYmplY3QudHlwZSA9ICd0ZXh0L2h0bWwnO1xuXG4gIGVsZW1lbnQuX19yZXNpemVPYmplY3RfXyA9IHJlc2l6ZU9iamVjdDtcblxuICByZXNpemVPYmplY3Qub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgcmVzaXplT2JqZWN0TG9hZEhhbmRsZXIoZWxlbWVudClcbiAgfTtcblxuICBkb21FbGVtZW50LmFwcGVuZENoaWxkKHJlc2l6ZU9iamVjdCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVJlc2l6ZU9iamVjdChlbGVtZW50KSB7XG4gIGNvbnN0IGRvbUVsZW1lbnQgPSBlbGVtZW50LmRvbUVsZW1lbnQsXG4gICAgICAgIHJlc2l6ZU9iamVjdCA9IGVsZW1lbnQuX19yZXNpemVPYmplY3RfXyxcbiAgICAgICAgb2JqZWN0V2luZG93ID0gcmVzaXplT2JqZWN0LmNvbnRlbnREb2N1bWVudC5kZWZhdWx0VmlldzsgIC8vL1xuXG4gIG9iamVjdFdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVMaXN0ZW5lcik7XG5cbiAgZG9tRWxlbWVudC5yZW1vdmVDaGlsZChyZXNpemVPYmplY3QpO1xufVxuXG5mdW5jdGlvbiByZXNpemVPYmplY3RMb2FkSGFuZGxlcihlbGVtZW50KSB7XG4gIGNvbnN0IHJlc2l6ZU9iamVjdCA9IGVsZW1lbnQuX19yZXNpemVPYmplY3RfXyxcbiAgICAgICAgcmVzaXplT2JqZWN0V2luZG93ID0gcmVzaXplT2JqZWN0LmNvbnRlbnREb2N1bWVudC5kZWZhdWx0VmlldzsgIC8vL1xuXG4gIHJlc2l6ZU9iamVjdFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmdW5jdGlvbigpIHtcbiAgICBldmVudExpc3RlbmVyKGVsZW1lbnQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZXZlbnRMaXN0ZW5lcihlbGVtZW50KSB7XG4gIGNvbnN0IHdpZHRoID0gZWxlbWVudC5nZXRXaWR0aCgpLFxuICAgICAgICBoZWlnaHQgPSBlbGVtZW50LmdldEhlaWdodCgpLFxuICAgICAgICB0YXJnZXRFbGVtZW50ID0gZWxlbWVudCwgLy8vXG4gICAgICAgIGhhbmRsZXJzID0gZWxlbWVudC5oYW5kbGVyc01hcFsncmVzaXplJ107XG5cbiAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVyKXtcbiAgICBoYW5kbGVyKHdpZHRoLCBoZWlnaHQsIHRhcmdldEVsZW1lbnQpO1xuICB9KTtcbn1cbiJdfQ==