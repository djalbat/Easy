'use strict';

function onResize(handler) {
  var eventType = 'resize',
      addEventListener = this.addHandler(eventType, handler);

  if (addEventListener) {
    appendResizeObject(this);
  }
}

function offResize(handler) {
  var eventType = 'resize',
      removeEventListener = this.removeHandler(eventType, handler);

  if (removeEventListener) {
    removeResizeObject(this);
  }
}

var resizeMixin = {
  onResize: onResize,
  offResize: offResize
};

module.exports = resizeMixin;

function appendResizeObject(element) {
  var resizeObject = document.createElement('object'),
      domElement = element.domElement,
      style = 'display: block; \n                 position: absolute; \n                 top: 0; \n                 left: 0; \n                 height: 100%; \n                 width: 100%; \n                 overflow: hidden; \n                 pointer-events: none; \n                 z-index: -1;';

  resizeObject.setAttribute('style', style);
  resizeObject.data = 'about:blank';
  resizeObject.type = 'text/html';

  element.__resizeObject__ = resizeObject;

  resizeObject.onload = function () {
    resizeObjectLoadHandler(element);
  };

  domElement.appendChild(resizeObject);
}

function removeResizeObject(element) {
  var domElement = element.domElement,
      resizeObject = element.__resizeObject__,
      objectWindow = resizeObject.contentDocument.defaultView; ///

  objectWindow.removeEventListener('resize', resizeListener);

  domElement.removeChild(resizeObject);
}

function resizeObjectLoadHandler(element) {
  var resizeObject = element.__resizeObject__,
      resizeObjectWindow = resizeObject.contentDocument.defaultView; ///

  resizeObjectWindow.addEventListener('resize', function () {
    eventListener(element);
  });
}

function eventListener(element) {
  var width = element.getWidth(),
      height = element.getHeight(),
      handlers = element.handlersMap['resize'];

  handlers.forEach(function (handler) {
    handler(width, height);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9yZXNpemUuanMiXSwibmFtZXMiOlsib25SZXNpemUiLCJoYW5kbGVyIiwiZXZlbnRUeXBlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImFkZEhhbmRsZXIiLCJhcHBlbmRSZXNpemVPYmplY3QiLCJvZmZSZXNpemUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlSGFuZGxlciIsInJlbW92ZVJlc2l6ZU9iamVjdCIsInJlc2l6ZU1peGluIiwibW9kdWxlIiwiZXhwb3J0cyIsImVsZW1lbnQiLCJyZXNpemVPYmplY3QiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJkb21FbGVtZW50Iiwic3R5bGUiLCJzZXRBdHRyaWJ1dGUiLCJkYXRhIiwidHlwZSIsIl9fcmVzaXplT2JqZWN0X18iLCJvbmxvYWQiLCJyZXNpemVPYmplY3RMb2FkSGFuZGxlciIsImFwcGVuZENoaWxkIiwib2JqZWN0V2luZG93IiwiY29udGVudERvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJyZXNpemVMaXN0ZW5lciIsInJlbW92ZUNoaWxkIiwicmVzaXplT2JqZWN0V2luZG93IiwiZXZlbnRMaXN0ZW5lciIsIndpZHRoIiwiZ2V0V2lkdGgiLCJoZWlnaHQiLCJnZXRIZWlnaHQiLCJoYW5kbGVycyIsImhhbmRsZXJzTWFwIiwiZm9yRWFjaCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsU0FBU0EsUUFBVCxDQUFrQkMsT0FBbEIsRUFBMkI7QUFDekIsTUFBTUMsWUFBWSxRQUFsQjtBQUFBLE1BQ01DLG1CQUFtQixLQUFLQyxVQUFMLENBQWdCRixTQUFoQixFQUEyQkQsT0FBM0IsQ0FEekI7O0FBR0EsTUFBSUUsZ0JBQUosRUFBc0I7QUFDcEJFLHVCQUFtQixJQUFuQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU0MsU0FBVCxDQUFtQkwsT0FBbkIsRUFBNEI7QUFDMUIsTUFBTUMsWUFBWSxRQUFsQjtBQUFBLE1BQ01LLHNCQUFzQixLQUFLQyxhQUFMLENBQW1CTixTQUFuQixFQUE4QkQsT0FBOUIsQ0FENUI7O0FBR0EsTUFBSU0sbUJBQUosRUFBeUI7QUFDdkJFLHVCQUFtQixJQUFuQjtBQUNEO0FBQ0Y7O0FBRUQsSUFBTUMsY0FBYztBQUNsQlYsWUFBVUEsUUFEUTtBQUVsQk0sYUFBV0E7QUFGTyxDQUFwQjs7QUFLQUssT0FBT0MsT0FBUCxHQUFpQkYsV0FBakI7O0FBRUEsU0FBU0wsa0JBQVQsQ0FBNEJRLE9BQTVCLEVBQXFDO0FBQ25DLE1BQU1DLGVBQWVDLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBckI7QUFBQSxNQUNNQyxhQUFhSixRQUFRSSxVQUQzQjtBQUFBLE1BRU1DLHNTQUZOOztBQVlBSixlQUFhSyxZQUFiLENBQTBCLE9BQTFCLEVBQW1DRCxLQUFuQztBQUNBSixlQUFhTSxJQUFiLEdBQW9CLGFBQXBCO0FBQ0FOLGVBQWFPLElBQWIsR0FBb0IsV0FBcEI7O0FBRUFSLFVBQVFTLGdCQUFSLEdBQTJCUixZQUEzQjs7QUFFQUEsZUFBYVMsTUFBYixHQUFzQixZQUFXO0FBQy9CQyw0QkFBd0JYLE9BQXhCO0FBQ0QsR0FGRDs7QUFJQUksYUFBV1EsV0FBWCxDQUF1QlgsWUFBdkI7QUFDRDs7QUFFRCxTQUFTTCxrQkFBVCxDQUE0QkksT0FBNUIsRUFBcUM7QUFDbkMsTUFBTUksYUFBYUosUUFBUUksVUFBM0I7QUFBQSxNQUNNSCxlQUFlRCxRQUFRUyxnQkFEN0I7QUFBQSxNQUVNSSxlQUFlWixhQUFhYSxlQUFiLENBQTZCQyxXQUZsRCxDQURtQyxDQUc2Qjs7QUFFaEVGLGVBQWFuQixtQkFBYixDQUFpQyxRQUFqQyxFQUEyQ3NCLGNBQTNDOztBQUVBWixhQUFXYSxXQUFYLENBQXVCaEIsWUFBdkI7QUFDRDs7QUFFRCxTQUFTVSx1QkFBVCxDQUFpQ1gsT0FBakMsRUFBMEM7QUFDeEMsTUFBTUMsZUFBZUQsUUFBUVMsZ0JBQTdCO0FBQUEsTUFDTVMscUJBQXFCakIsYUFBYWEsZUFBYixDQUE2QkMsV0FEeEQsQ0FEd0MsQ0FFOEI7O0FBRXRFRyxxQkFBbUI1QixnQkFBbkIsQ0FBb0MsUUFBcEMsRUFBOEMsWUFBVztBQUN2RDZCLGtCQUFjbkIsT0FBZDtBQUNELEdBRkQ7QUFHRDs7QUFFRCxTQUFTbUIsYUFBVCxDQUF1Qm5CLE9BQXZCLEVBQWdDO0FBQzlCLE1BQU1vQixRQUFRcEIsUUFBUXFCLFFBQVIsRUFBZDtBQUFBLE1BQ01DLFNBQVN0QixRQUFRdUIsU0FBUixFQURmO0FBQUEsTUFFTUMsV0FBV3hCLFFBQVF5QixXQUFSLENBQW9CLFFBQXBCLENBRmpCOztBQUlBRCxXQUFTRSxPQUFULENBQWlCLFVBQVN0QyxPQUFULEVBQWlCO0FBQ2hDQSxZQUFRZ0MsS0FBUixFQUFlRSxNQUFmO0FBQ0QsR0FGRDtBQUdEIiwiZmlsZSI6InJlc2l6ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gb25SZXNpemUoaGFuZGxlcikge1xuICBjb25zdCBldmVudFR5cGUgPSAncmVzaXplJyxcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lciA9IHRoaXMuYWRkSGFuZGxlcihldmVudFR5cGUsIGhhbmRsZXIpO1xuXG4gIGlmIChhZGRFdmVudExpc3RlbmVyKSB7XG4gICAgYXBwZW5kUmVzaXplT2JqZWN0KHRoaXMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9mZlJlc2l6ZShoYW5kbGVyKSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9ICdyZXNpemUnLFxuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyID0gdGhpcy5yZW1vdmVIYW5kbGVyKGV2ZW50VHlwZSwgaGFuZGxlcik7XG5cbiAgaWYgKHJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICByZW1vdmVSZXNpemVPYmplY3QodGhpcyk7XG4gIH1cbn1cblxuY29uc3QgcmVzaXplTWl4aW4gPSB7XG4gIG9uUmVzaXplOiBvblJlc2l6ZSxcbiAgb2ZmUmVzaXplOiBvZmZSZXNpemVcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcmVzaXplTWl4aW47XG5cbmZ1bmN0aW9uIGFwcGVuZFJlc2l6ZU9iamVjdChlbGVtZW50KSB7XG4gIGNvbnN0IHJlc2l6ZU9iamVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29iamVjdCcpLFxuICAgICAgICBkb21FbGVtZW50ID0gZWxlbWVudC5kb21FbGVtZW50LFxuICAgICAgICBzdHlsZSA9IGBkaXNwbGF5OiBibG9jazsgXG4gICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgXG4gICAgICAgICAgICAgICAgIHRvcDogMDsgXG4gICAgICAgICAgICAgICAgIGxlZnQ6IDA7IFxuICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7IFxuICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTsgXG4gICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47IFxuICAgICAgICAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTsgXG4gICAgICAgICAgICAgICAgIHotaW5kZXg6IC0xO2A7XG5cbiAgcmVzaXplT2JqZWN0LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBzdHlsZSk7XG4gIHJlc2l6ZU9iamVjdC5kYXRhID0gJ2Fib3V0OmJsYW5rJztcbiAgcmVzaXplT2JqZWN0LnR5cGUgPSAndGV4dC9odG1sJztcblxuICBlbGVtZW50Ll9fcmVzaXplT2JqZWN0X18gPSByZXNpemVPYmplY3Q7XG5cbiAgcmVzaXplT2JqZWN0Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJlc2l6ZU9iamVjdExvYWRIYW5kbGVyKGVsZW1lbnQpXG4gIH07XG5cbiAgZG9tRWxlbWVudC5hcHBlbmRDaGlsZChyZXNpemVPYmplY3QpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVSZXNpemVPYmplY3QoZWxlbWVudCkge1xuICBjb25zdCBkb21FbGVtZW50ID0gZWxlbWVudC5kb21FbGVtZW50LFxuICAgICAgICByZXNpemVPYmplY3QgPSBlbGVtZW50Ll9fcmVzaXplT2JqZWN0X18sXG4gICAgICAgIG9iamVjdFdpbmRvdyA9IHJlc2l6ZU9iamVjdC5jb250ZW50RG9jdW1lbnQuZGVmYXVsdFZpZXc7ICAvLy9cblxuICBvYmplY3RXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplTGlzdGVuZXIpO1xuXG4gIGRvbUVsZW1lbnQucmVtb3ZlQ2hpbGQocmVzaXplT2JqZWN0KTtcbn1cblxuZnVuY3Rpb24gcmVzaXplT2JqZWN0TG9hZEhhbmRsZXIoZWxlbWVudCkge1xuICBjb25zdCByZXNpemVPYmplY3QgPSBlbGVtZW50Ll9fcmVzaXplT2JqZWN0X18sXG4gICAgICAgIHJlc2l6ZU9iamVjdFdpbmRvdyA9IHJlc2l6ZU9iamVjdC5jb250ZW50RG9jdW1lbnQuZGVmYXVsdFZpZXc7ICAvLy9cblxuICByZXNpemVPYmplY3RXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24oKSB7XG4gICAgZXZlbnRMaXN0ZW5lcihlbGVtZW50KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGV2ZW50TGlzdGVuZXIoZWxlbWVudCkge1xuICBjb25zdCB3aWR0aCA9IGVsZW1lbnQuZ2V0V2lkdGgoKSxcbiAgICAgICAgaGVpZ2h0ID0gZWxlbWVudC5nZXRIZWlnaHQoKSxcbiAgICAgICAgaGFuZGxlcnMgPSBlbGVtZW50LmhhbmRsZXJzTWFwWydyZXNpemUnXTtcblxuICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZXIpe1xuICAgIGhhbmRsZXIod2lkdGgsIGhlaWdodCk7XG4gIH0pO1xufVxuIl19