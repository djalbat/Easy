'use strict';

function onMouseUp(handler) {
  if (handler.intermediateHandler === undefined) {
    handler.intermediateHandler = defaultIntermediateHandler;
  }

  this.on('mouseup', handler);
}

function onMouseDown(handler) {
  if (handler.intermediateHandler === undefined) {
    handler.intermediateHandler = defaultIntermediateHandler;
  }

  this.on('mousedown', handler);
}

function onMouseOver(handler) {
  if (handler.intermediateHandler === undefined) {
    handler.intermediateHandler = defaultIntermediateHandler;
  }

  this.on('mouseover', handler);
}

function onMouseOut(handler) {
  if (handler.intermediateHandler === undefined) {
    handler.intermediateHandler = defaultIntermediateHandler;
  }

  this.on('mouseout', handler);
}

function onMouseMove(handler) {
  if (handler.intermediateHandler === undefined) {
    handler.intermediateHandler = defaultIntermediateHandler;
  }

  this.on('mousemove', handler);
}

function offMouseUp(handler) {
  this.off('mouseup', handler);
}

function offMouseDown(handler) {
  this.off('mousedown', handler);
}

function offMouseOver(handler) {
  this.off('mouseover', handler);
}

function offMouseOut(handler) {
  this.off('mouseout', handler);
}

function offMouseMove(handler) {
  this.off('mousemove', handler);
}

var mouse = {
  onMouseUp: onMouseUp,
  onMouseDown: onMouseDown,
  onMouseOver: onMouseOver,
  onMouseOut: onMouseOut,
  onMouseMove: onMouseMove,
  offMouseUp: offMouseUp,
  offMouseDown: offMouseDown,
  offMouseOver: offMouseOver,
  offMouseOut: offMouseOut,
  offMouseMove: offMouseMove
};

module.exports = mouse;

function defaultIntermediateHandler(handler, event) {
  var mouseTop = event.pageY,
      ///
  mouseLeft = event.pageX,
      ///
  mouseButton = event.button,
      ///
  preventDefault = handler(mouseTop, mouseLeft, mouseButton);

  return preventDefault;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9tb3VzZS5qcyJdLCJuYW1lcyI6WyJvbk1vdXNlVXAiLCJoYW5kbGVyIiwiaW50ZXJtZWRpYXRlSGFuZGxlciIsInVuZGVmaW5lZCIsImRlZmF1bHRJbnRlcm1lZGlhdGVIYW5kbGVyIiwib24iLCJvbk1vdXNlRG93biIsIm9uTW91c2VPdmVyIiwib25Nb3VzZU91dCIsIm9uTW91c2VNb3ZlIiwib2ZmTW91c2VVcCIsIm9mZiIsIm9mZk1vdXNlRG93biIsIm9mZk1vdXNlT3ZlciIsIm9mZk1vdXNlT3V0Iiwib2ZmTW91c2VNb3ZlIiwibW91c2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiZXZlbnQiLCJtb3VzZVRvcCIsInBhZ2VZIiwibW91c2VMZWZ0IiwicGFnZVgiLCJtb3VzZUJ1dHRvbiIsImJ1dHRvbiIsInByZXZlbnREZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSxTQUFULENBQW1CQyxPQUFuQixFQUE0QjtBQUMxQixNQUFJQSxRQUFRQyxtQkFBUixLQUFnQ0MsU0FBcEMsRUFBK0M7QUFDN0NGLFlBQVFDLG1CQUFSLEdBQThCRSwwQkFBOUI7QUFDRDs7QUFFRCxPQUFLQyxFQUFMLENBQVEsU0FBUixFQUFtQkosT0FBbkI7QUFDRDs7QUFFRCxTQUFTSyxXQUFULENBQXFCTCxPQUFyQixFQUE4QjtBQUM1QixNQUFJQSxRQUFRQyxtQkFBUixLQUFnQ0MsU0FBcEMsRUFBK0M7QUFDN0NGLFlBQVFDLG1CQUFSLEdBQThCRSwwQkFBOUI7QUFDRDs7QUFFRCxPQUFLQyxFQUFMLENBQVEsV0FBUixFQUFxQkosT0FBckI7QUFDRDs7QUFFRCxTQUFTTSxXQUFULENBQXFCTixPQUFyQixFQUE4QjtBQUM1QixNQUFJQSxRQUFRQyxtQkFBUixLQUFnQ0MsU0FBcEMsRUFBK0M7QUFDN0NGLFlBQVFDLG1CQUFSLEdBQThCRSwwQkFBOUI7QUFDRDs7QUFFRCxPQUFLQyxFQUFMLENBQVEsV0FBUixFQUFxQkosT0FBckI7QUFDRDs7QUFFRCxTQUFTTyxVQUFULENBQW9CUCxPQUFwQixFQUE2QjtBQUMzQixNQUFJQSxRQUFRQyxtQkFBUixLQUFnQ0MsU0FBcEMsRUFBK0M7QUFDN0NGLFlBQVFDLG1CQUFSLEdBQThCRSwwQkFBOUI7QUFDRDs7QUFFRCxPQUFLQyxFQUFMLENBQVEsVUFBUixFQUFvQkosT0FBcEI7QUFDRDs7QUFFRCxTQUFTUSxXQUFULENBQXFCUixPQUFyQixFQUE4QjtBQUM1QixNQUFJQSxRQUFRQyxtQkFBUixLQUFnQ0MsU0FBcEMsRUFBK0M7QUFDN0NGLFlBQVFDLG1CQUFSLEdBQThCRSwwQkFBOUI7QUFDRDs7QUFFRCxPQUFLQyxFQUFMLENBQVEsV0FBUixFQUFxQkosT0FBckI7QUFDRDs7QUFFRCxTQUFTUyxVQUFULENBQW9CVCxPQUFwQixFQUE2QjtBQUFFLE9BQUtVLEdBQUwsQ0FBUyxTQUFULEVBQW9CVixPQUFwQjtBQUErQjs7QUFFOUQsU0FBU1csWUFBVCxDQUFzQlgsT0FBdEIsRUFBK0I7QUFBRSxPQUFLVSxHQUFMLENBQVMsV0FBVCxFQUFzQlYsT0FBdEI7QUFBaUM7O0FBRWxFLFNBQVNZLFlBQVQsQ0FBc0JaLE9BQXRCLEVBQStCO0FBQUUsT0FBS1UsR0FBTCxDQUFTLFdBQVQsRUFBc0JWLE9BQXRCO0FBQWlDOztBQUVsRSxTQUFTYSxXQUFULENBQXFCYixPQUFyQixFQUE4QjtBQUFFLE9BQUtVLEdBQUwsQ0FBUyxVQUFULEVBQXFCVixPQUFyQjtBQUFnQzs7QUFFaEUsU0FBU2MsWUFBVCxDQUFzQmQsT0FBdEIsRUFBK0I7QUFBRSxPQUFLVSxHQUFMLENBQVMsV0FBVCxFQUFzQlYsT0FBdEI7QUFBaUM7O0FBRWxFLElBQU1lLFFBQVE7QUFDWmhCLGFBQVdBLFNBREM7QUFFWk0sZUFBYUEsV0FGRDtBQUdaQyxlQUFhQSxXQUhEO0FBSVpDLGNBQVlBLFVBSkE7QUFLWkMsZUFBYUEsV0FMRDtBQU1aQyxjQUFZQSxVQU5BO0FBT1pFLGdCQUFjQSxZQVBGO0FBUVpDLGdCQUFjQSxZQVJGO0FBU1pDLGVBQWFBLFdBVEQ7QUFVWkMsZ0JBQWNBO0FBVkYsQ0FBZDs7QUFhQUUsT0FBT0MsT0FBUCxHQUFpQkYsS0FBakI7O0FBRUEsU0FBU1osMEJBQVQsQ0FBb0NILE9BQXBDLEVBQTZDa0IsS0FBN0MsRUFBb0Q7QUFDbEQsTUFBTUMsV0FBV0QsTUFBTUUsS0FBdkI7QUFBQSxNQUErQjtBQUN6QkMsY0FBWUgsTUFBTUksS0FEeEI7QUFBQSxNQUMrQjtBQUN6QkMsZ0JBQWNMLE1BQU1NLE1BRjFCO0FBQUEsTUFFa0M7QUFDNUJDLG1CQUFpQnpCLFFBQVFtQixRQUFSLEVBQWtCRSxTQUFsQixFQUE2QkUsV0FBN0IsQ0FIdkI7O0FBS0EsU0FBT0UsY0FBUDtBQUNEIiwiZmlsZSI6Im1vdXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBvbk1vdXNlVXAoaGFuZGxlcikge1xuICBpZiAoaGFuZGxlci5pbnRlcm1lZGlhdGVIYW5kbGVyID09PSB1bmRlZmluZWQpIHtcbiAgICBoYW5kbGVyLmludGVybWVkaWF0ZUhhbmRsZXIgPSBkZWZhdWx0SW50ZXJtZWRpYXRlSGFuZGxlcjtcbiAgfVxuICBcbiAgdGhpcy5vbignbW91c2V1cCcsIGhhbmRsZXIpOyBcbn1cblxuZnVuY3Rpb24gb25Nb3VzZURvd24oaGFuZGxlcikge1xuICBpZiAoaGFuZGxlci5pbnRlcm1lZGlhdGVIYW5kbGVyID09PSB1bmRlZmluZWQpIHtcbiAgICBoYW5kbGVyLmludGVybWVkaWF0ZUhhbmRsZXIgPSBkZWZhdWx0SW50ZXJtZWRpYXRlSGFuZGxlcjtcbiAgfVxuXG4gIHRoaXMub24oJ21vdXNlZG93bicsIGhhbmRsZXIpOyBcbn1cblxuZnVuY3Rpb24gb25Nb3VzZU92ZXIoaGFuZGxlcikge1xuICBpZiAoaGFuZGxlci5pbnRlcm1lZGlhdGVIYW5kbGVyID09PSB1bmRlZmluZWQpIHtcbiAgICBoYW5kbGVyLmludGVybWVkaWF0ZUhhbmRsZXIgPSBkZWZhdWx0SW50ZXJtZWRpYXRlSGFuZGxlcjtcbiAgfVxuXG4gIHRoaXMub24oJ21vdXNlb3ZlcicsIGhhbmRsZXIpOyBcbn1cblxuZnVuY3Rpb24gb25Nb3VzZU91dChoYW5kbGVyKSB7XG4gIGlmIChoYW5kbGVyLmludGVybWVkaWF0ZUhhbmRsZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIGhhbmRsZXIuaW50ZXJtZWRpYXRlSGFuZGxlciA9IGRlZmF1bHRJbnRlcm1lZGlhdGVIYW5kbGVyO1xuICB9XG5cbiAgdGhpcy5vbignbW91c2VvdXQnLCBoYW5kbGVyKTsgXG59XG5cbmZ1bmN0aW9uIG9uTW91c2VNb3ZlKGhhbmRsZXIpIHtcbiAgaWYgKGhhbmRsZXIuaW50ZXJtZWRpYXRlSGFuZGxlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaGFuZGxlci5pbnRlcm1lZGlhdGVIYW5kbGVyID0gZGVmYXVsdEludGVybWVkaWF0ZUhhbmRsZXI7XG4gIH1cblxuICB0aGlzLm9uKCdtb3VzZW1vdmUnLCBoYW5kbGVyKTsgXG59XG5cbmZ1bmN0aW9uIG9mZk1vdXNlVXAoaGFuZGxlcikgeyB0aGlzLm9mZignbW91c2V1cCcsIGhhbmRsZXIpOyB9XG5cbmZ1bmN0aW9uIG9mZk1vdXNlRG93bihoYW5kbGVyKSB7IHRoaXMub2ZmKCdtb3VzZWRvd24nLCBoYW5kbGVyKTsgfVxuXG5mdW5jdGlvbiBvZmZNb3VzZU92ZXIoaGFuZGxlcikgeyB0aGlzLm9mZignbW91c2VvdmVyJywgaGFuZGxlcik7IH1cblxuZnVuY3Rpb24gb2ZmTW91c2VPdXQoaGFuZGxlcikgeyB0aGlzLm9mZignbW91c2VvdXQnLCBoYW5kbGVyKTsgfVxuXG5mdW5jdGlvbiBvZmZNb3VzZU1vdmUoaGFuZGxlcikgeyB0aGlzLm9mZignbW91c2Vtb3ZlJywgaGFuZGxlcik7IH1cblxuY29uc3QgbW91c2UgPSB7XG4gIG9uTW91c2VVcDogb25Nb3VzZVVwLFxuICBvbk1vdXNlRG93bjogb25Nb3VzZURvd24sXG4gIG9uTW91c2VPdmVyOiBvbk1vdXNlT3ZlcixcbiAgb25Nb3VzZU91dDogb25Nb3VzZU91dCxcbiAgb25Nb3VzZU1vdmU6IG9uTW91c2VNb3ZlLFxuICBvZmZNb3VzZVVwOiBvZmZNb3VzZVVwLFxuICBvZmZNb3VzZURvd246IG9mZk1vdXNlRG93bixcbiAgb2ZmTW91c2VPdmVyOiBvZmZNb3VzZU92ZXIsXG4gIG9mZk1vdXNlT3V0OiBvZmZNb3VzZU91dCxcbiAgb2ZmTW91c2VNb3ZlOiBvZmZNb3VzZU1vdmVcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbW91c2U7XG5cbmZ1bmN0aW9uIGRlZmF1bHRJbnRlcm1lZGlhdGVIYW5kbGVyKGhhbmRsZXIsIGV2ZW50KSB7XG4gIGNvbnN0IG1vdXNlVG9wID0gZXZlbnQucGFnZVksICAvLy9cbiAgICAgICAgbW91c2VMZWZ0ID0gZXZlbnQucGFnZVgsIC8vL1xuICAgICAgICBtb3VzZUJ1dHRvbiA9IGV2ZW50LmJ1dHRvbiwgLy8vXG4gICAgICAgIHByZXZlbnREZWZhdWx0ID0gaGFuZGxlcihtb3VzZVRvcCwgbW91c2VMZWZ0LCBtb3VzZUJ1dHRvbik7XG5cbiAgcmV0dXJuIHByZXZlbnREZWZhdWx0O1xufVxuIl19