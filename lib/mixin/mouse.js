'use strict';

function onMouseUp(handler) {
  if (handler.intermediateHandler === undefined) {
    handler.intermediateHandler = defaultIntermediateHandler;
  }

  this.on('mouseup', handler);
}

function onMouseDown(handler) {
  if (handler.intermediateHandler === undefined) {
    handler.intermediateHandler = defaultIntermediateHandler;
  }

  this.on('mousedown', handler);
}

function onMouseOver(handler) {
  if (handler.intermediateHandler === undefined) {
    handler.intermediateHandler = defaultIntermediateHandler;
  }

  this.on('mouseover', handler);
}

function onMouseOut(handler) {
  if (handler.intermediateHandler === undefined) {
    handler.intermediateHandler = defaultIntermediateHandler;
  }

  this.on('mouseout', handler);
}

function onMouseMove(handler) {
  if (handler.intermediateHandler === undefined) {
    handler.intermediateHandler = defaultIntermediateHandler;
  }

  this.on('mousemove', handler);
}

function offMouseUp(handler) {
  this.off('mouseup', handler);
}

function offMouseDown(handler) {
  this.off('mousedown', handler);
}

function offMouseOver(handler) {
  this.off('mouseover', handler);
}

function offMouseOut(handler) {
  this.off('mouseout', handler);
}

function offMouseMove(handler) {
  this.off('mousemove', handler);
}

var mouseMixin = {
  onMouseUp: onMouseUp,
  onMouseDown: onMouseDown,
  onMouseOver: onMouseOver,
  onMouseOut: onMouseOut,
  onMouseMove: onMouseMove,
  offMouseUp: offMouseUp,
  offMouseDown: offMouseDown,
  offMouseOver: offMouseOver,
  offMouseOut: offMouseOut,
  offMouseMove: offMouseMove
};

module.exports = mouseMixin;

function defaultIntermediateHandler(handler, event) {
  var mouseTop = event.pageY,
      ///
  mouseLeft = event.pageX,
      ///
  mouseButton = event.button,
      ///
  preventDefault = handler(mouseTop, mouseLeft, mouseButton);

  return preventDefault;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbi9tb3VzZS5qcyJdLCJuYW1lcyI6WyJvbk1vdXNlVXAiLCJoYW5kbGVyIiwiaW50ZXJtZWRpYXRlSGFuZGxlciIsInVuZGVmaW5lZCIsImRlZmF1bHRJbnRlcm1lZGlhdGVIYW5kbGVyIiwib24iLCJvbk1vdXNlRG93biIsIm9uTW91c2VPdmVyIiwib25Nb3VzZU91dCIsIm9uTW91c2VNb3ZlIiwib2ZmTW91c2VVcCIsIm9mZiIsIm9mZk1vdXNlRG93biIsIm9mZk1vdXNlT3ZlciIsIm9mZk1vdXNlT3V0Iiwib2ZmTW91c2VNb3ZlIiwibW91c2VNaXhpbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJldmVudCIsIm1vdXNlVG9wIiwicGFnZVkiLCJtb3VzZUxlZnQiLCJwYWdlWCIsIm1vdXNlQnV0dG9uIiwiYnV0dG9uIiwicHJldmVudERlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFNBQVNBLFNBQVQsQ0FBbUJDLE9BQW5CLEVBQTRCO0FBQzFCLE1BQUlBLFFBQVFDLG1CQUFSLEtBQWdDQyxTQUFwQyxFQUErQztBQUM3Q0YsWUFBUUMsbUJBQVIsR0FBOEJFLDBCQUE5QjtBQUNEOztBQUVELE9BQUtDLEVBQUwsQ0FBUSxTQUFSLEVBQW1CSixPQUFuQjtBQUNEOztBQUVELFNBQVNLLFdBQVQsQ0FBcUJMLE9BQXJCLEVBQThCO0FBQzVCLE1BQUlBLFFBQVFDLG1CQUFSLEtBQWdDQyxTQUFwQyxFQUErQztBQUM3Q0YsWUFBUUMsbUJBQVIsR0FBOEJFLDBCQUE5QjtBQUNEOztBQUVELE9BQUtDLEVBQUwsQ0FBUSxXQUFSLEVBQXFCSixPQUFyQjtBQUNEOztBQUVELFNBQVNNLFdBQVQsQ0FBcUJOLE9BQXJCLEVBQThCO0FBQzVCLE1BQUlBLFFBQVFDLG1CQUFSLEtBQWdDQyxTQUFwQyxFQUErQztBQUM3Q0YsWUFBUUMsbUJBQVIsR0FBOEJFLDBCQUE5QjtBQUNEOztBQUVELE9BQUtDLEVBQUwsQ0FBUSxXQUFSLEVBQXFCSixPQUFyQjtBQUNEOztBQUVELFNBQVNPLFVBQVQsQ0FBb0JQLE9BQXBCLEVBQTZCO0FBQzNCLE1BQUlBLFFBQVFDLG1CQUFSLEtBQWdDQyxTQUFwQyxFQUErQztBQUM3Q0YsWUFBUUMsbUJBQVIsR0FBOEJFLDBCQUE5QjtBQUNEOztBQUVELE9BQUtDLEVBQUwsQ0FBUSxVQUFSLEVBQW9CSixPQUFwQjtBQUNEOztBQUVELFNBQVNRLFdBQVQsQ0FBcUJSLE9BQXJCLEVBQThCO0FBQzVCLE1BQUlBLFFBQVFDLG1CQUFSLEtBQWdDQyxTQUFwQyxFQUErQztBQUM3Q0YsWUFBUUMsbUJBQVIsR0FBOEJFLDBCQUE5QjtBQUNEOztBQUVELE9BQUtDLEVBQUwsQ0FBUSxXQUFSLEVBQXFCSixPQUFyQjtBQUNEOztBQUVELFNBQVNTLFVBQVQsQ0FBb0JULE9BQXBCLEVBQTZCO0FBQUUsT0FBS1UsR0FBTCxDQUFTLFNBQVQsRUFBb0JWLE9BQXBCO0FBQStCOztBQUU5RCxTQUFTVyxZQUFULENBQXNCWCxPQUF0QixFQUErQjtBQUFFLE9BQUtVLEdBQUwsQ0FBUyxXQUFULEVBQXNCVixPQUF0QjtBQUFpQzs7QUFFbEUsU0FBU1ksWUFBVCxDQUFzQlosT0FBdEIsRUFBK0I7QUFBRSxPQUFLVSxHQUFMLENBQVMsV0FBVCxFQUFzQlYsT0FBdEI7QUFBaUM7O0FBRWxFLFNBQVNhLFdBQVQsQ0FBcUJiLE9BQXJCLEVBQThCO0FBQUUsT0FBS1UsR0FBTCxDQUFTLFVBQVQsRUFBcUJWLE9BQXJCO0FBQWdDOztBQUVoRSxTQUFTYyxZQUFULENBQXNCZCxPQUF0QixFQUErQjtBQUFFLE9BQUtVLEdBQUwsQ0FBUyxXQUFULEVBQXNCVixPQUF0QjtBQUFpQzs7QUFFbEUsSUFBTWUsYUFBYTtBQUNqQmhCLGFBQVdBLFNBRE07QUFFakJNLGVBQWFBLFdBRkk7QUFHakJDLGVBQWFBLFdBSEk7QUFJakJDLGNBQVlBLFVBSks7QUFLakJDLGVBQWFBLFdBTEk7QUFNakJDLGNBQVlBLFVBTks7QUFPakJFLGdCQUFjQSxZQVBHO0FBUWpCQyxnQkFBY0EsWUFSRztBQVNqQkMsZUFBYUEsV0FUSTtBQVVqQkMsZ0JBQWNBO0FBVkcsQ0FBbkI7O0FBYUFFLE9BQU9DLE9BQVAsR0FBaUJGLFVBQWpCOztBQUVBLFNBQVNaLDBCQUFULENBQW9DSCxPQUFwQyxFQUE2Q2tCLEtBQTdDLEVBQW9EO0FBQ2xELE1BQU1DLFdBQVdELE1BQU1FLEtBQXZCO0FBQUEsTUFBK0I7QUFDekJDLGNBQVlILE1BQU1JLEtBRHhCO0FBQUEsTUFDK0I7QUFDekJDLGdCQUFjTCxNQUFNTSxNQUYxQjtBQUFBLE1BRWtDO0FBQzVCQyxtQkFBaUJ6QixRQUFRbUIsUUFBUixFQUFrQkUsU0FBbEIsRUFBNkJFLFdBQTdCLENBSHZCOztBQUtBLFNBQU9FLGNBQVA7QUFDRCIsImZpbGUiOiJtb3VzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gb25Nb3VzZVVwKGhhbmRsZXIpIHtcbiAgaWYgKGhhbmRsZXIuaW50ZXJtZWRpYXRlSGFuZGxlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaGFuZGxlci5pbnRlcm1lZGlhdGVIYW5kbGVyID0gZGVmYXVsdEludGVybWVkaWF0ZUhhbmRsZXI7XG4gIH1cbiAgXG4gIHRoaXMub24oJ21vdXNldXAnLCBoYW5kbGVyKTsgXG59XG5cbmZ1bmN0aW9uIG9uTW91c2VEb3duKGhhbmRsZXIpIHtcbiAgaWYgKGhhbmRsZXIuaW50ZXJtZWRpYXRlSGFuZGxlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaGFuZGxlci5pbnRlcm1lZGlhdGVIYW5kbGVyID0gZGVmYXVsdEludGVybWVkaWF0ZUhhbmRsZXI7XG4gIH1cblxuICB0aGlzLm9uKCdtb3VzZWRvd24nLCBoYW5kbGVyKTsgXG59XG5cbmZ1bmN0aW9uIG9uTW91c2VPdmVyKGhhbmRsZXIpIHtcbiAgaWYgKGhhbmRsZXIuaW50ZXJtZWRpYXRlSGFuZGxlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaGFuZGxlci5pbnRlcm1lZGlhdGVIYW5kbGVyID0gZGVmYXVsdEludGVybWVkaWF0ZUhhbmRsZXI7XG4gIH1cblxuICB0aGlzLm9uKCdtb3VzZW92ZXInLCBoYW5kbGVyKTsgXG59XG5cbmZ1bmN0aW9uIG9uTW91c2VPdXQoaGFuZGxlcikge1xuICBpZiAoaGFuZGxlci5pbnRlcm1lZGlhdGVIYW5kbGVyID09PSB1bmRlZmluZWQpIHtcbiAgICBoYW5kbGVyLmludGVybWVkaWF0ZUhhbmRsZXIgPSBkZWZhdWx0SW50ZXJtZWRpYXRlSGFuZGxlcjtcbiAgfVxuXG4gIHRoaXMub24oJ21vdXNlb3V0JywgaGFuZGxlcik7IFxufVxuXG5mdW5jdGlvbiBvbk1vdXNlTW92ZShoYW5kbGVyKSB7XG4gIGlmIChoYW5kbGVyLmludGVybWVkaWF0ZUhhbmRsZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIGhhbmRsZXIuaW50ZXJtZWRpYXRlSGFuZGxlciA9IGRlZmF1bHRJbnRlcm1lZGlhdGVIYW5kbGVyO1xuICB9XG5cbiAgdGhpcy5vbignbW91c2Vtb3ZlJywgaGFuZGxlcik7IFxufVxuXG5mdW5jdGlvbiBvZmZNb3VzZVVwKGhhbmRsZXIpIHsgdGhpcy5vZmYoJ21vdXNldXAnLCBoYW5kbGVyKTsgfVxuXG5mdW5jdGlvbiBvZmZNb3VzZURvd24oaGFuZGxlcikgeyB0aGlzLm9mZignbW91c2Vkb3duJywgaGFuZGxlcik7IH1cblxuZnVuY3Rpb24gb2ZmTW91c2VPdmVyKGhhbmRsZXIpIHsgdGhpcy5vZmYoJ21vdXNlb3ZlcicsIGhhbmRsZXIpOyB9XG5cbmZ1bmN0aW9uIG9mZk1vdXNlT3V0KGhhbmRsZXIpIHsgdGhpcy5vZmYoJ21vdXNlb3V0JywgaGFuZGxlcik7IH1cblxuZnVuY3Rpb24gb2ZmTW91c2VNb3ZlKGhhbmRsZXIpIHsgdGhpcy5vZmYoJ21vdXNlbW92ZScsIGhhbmRsZXIpOyB9XG5cbmNvbnN0IG1vdXNlTWl4aW4gPSB7XG4gIG9uTW91c2VVcDogb25Nb3VzZVVwLFxuICBvbk1vdXNlRG93bjogb25Nb3VzZURvd24sXG4gIG9uTW91c2VPdmVyOiBvbk1vdXNlT3ZlcixcbiAgb25Nb3VzZU91dDogb25Nb3VzZU91dCxcbiAgb25Nb3VzZU1vdmU6IG9uTW91c2VNb3ZlLFxuICBvZmZNb3VzZVVwOiBvZmZNb3VzZVVwLFxuICBvZmZNb3VzZURvd246IG9mZk1vdXNlRG93bixcbiAgb2ZmTW91c2VPdmVyOiBvZmZNb3VzZU92ZXIsXG4gIG9mZk1vdXNlT3V0OiBvZmZNb3VzZU91dCxcbiAgb2ZmTW91c2VNb3ZlOiBvZmZNb3VzZU1vdmVcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbW91c2VNaXhpbjtcblxuZnVuY3Rpb24gZGVmYXVsdEludGVybWVkaWF0ZUhhbmRsZXIoaGFuZGxlciwgZXZlbnQpIHtcbiAgY29uc3QgbW91c2VUb3AgPSBldmVudC5wYWdlWSwgIC8vL1xuICAgICAgICBtb3VzZUxlZnQgPSBldmVudC5wYWdlWCwgLy8vXG4gICAgICAgIG1vdXNlQnV0dG9uID0gZXZlbnQuYnV0dG9uLCAvLy9cbiAgICAgICAgcHJldmVudERlZmF1bHQgPSBoYW5kbGVyKG1vdXNlVG9wLCBtb3VzZUxlZnQsIG1vdXNlQnV0dG9uKTtcblxuICByZXR1cm4gcHJldmVudERlZmF1bHQ7XG59XG4iXX0=