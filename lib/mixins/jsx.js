'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var constants = require('../constants'),
    nameUtilities = require('../utilities/name'),
    arrayUtilities = require('../utilities/array'),
    objectUtilities = require('../utilities/object'),
    elementsUtilities = require('../utilities/elements');

var combine = objectUtilities.combine,
    prune = objectUtilities.prune,
    first = arrayUtilities.first,
    guarantee = arrayUtilities.guarantee,
    SVG_NAMESPACE_URI = constants.SVG_NAMESPACE_URI,
    isHTMLAttributeName = nameUtilities.isHTMLAttributeName,
    isSVGAttributeName = nameUtilities.isSVGAttributeName,
    removeFalseyElements = elementsUtilities.removeFalseyElements,
    replaceStringsWithTextElements = elementsUtilities.replaceStringsWithTextElements;


function applyProperties() {
  var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var tagName = arguments[1];

  var _this = this;

  var defaultProperties = arguments[2];
  var ignoredProperties = arguments[3];

  combine(properties, defaultProperties);

  var childElements = childElementsFromElementAndProperties(this, properties) || properties.childElements; ///

  prune(properties, ignoredProperties);

  var svg = tagName !== 'iframe' && this.domElement.namespaceURI === SVG_NAMESPACE_URI,
      ///
  names = Object.keys(properties); ///

  names.forEach(function (name) {
    var value = properties[name];

    if (false) {
      ///
    } else if (isHandlerName(name)) {
      addHandler(_this, name, value);
    } else if (isAttributeName(name, svg)) {
      addAttribute(_this, name, value);
    } else {
      if (!_this.hasOwnProperty('properties')) {
        var _properties = {};

        Object.assign(_this, {
          properties: _properties
        });
      }

      _this.properties[name] = value;
    }
  });

  var context = {};

  childElements.forEach(function (childElement) {
    updateContext(childElement, context);

    childElement.addTo(_this);
  });

  Object.assign(this, {
    context: context
  });
}

function getProperties() {
  return this.properties;
}

function getContext() {
  return this.context;
}

function assignContext(names, thenDelete) {
  var _this2 = this;

  var argumentsLength = arguments.length;

  if (argumentsLength === 1) {
    var firstArgument = first(arguments);

    if (typeof firstArgument === 'boolean') {
      names = Object.keys(this.context);

      thenDelete = firstArgument;
    } else {
      thenDelete = true;
    }
  }

  if (argumentsLength === 0) {
    names = Object.keys(this.context);

    thenDelete = true;
  }

  names.forEach(function (name) {
    var value = _this2.context[name],
        propertyName = name,
        ///
    descriptor = {
      value: value
    };

    Object.defineProperty(_this2, propertyName, descriptor);

    if (thenDelete) {
      delete _this2.context[name];
    }
  }, []);
}

module.exports = {
  applyProperties: applyProperties,
  getProperties: getProperties,
  getContext: getContext,
  assignContext: assignContext
};

function childElementsFromElementAndProperties(element, properties) {
  var childElements = null;

  if (typeof element.childElements === 'function') {
    childElements = element.childElements(properties);

    childElements = guarantee(childElements);

    childElements = removeFalseyElements(childElements);

    childElements = replaceStringsWithTextElements(childElements);
  }

  return childElements;
}

function updateContext(childElement, context) {
  var parentContext = typeof childElement.parentContext === 'function' ? childElement.parentContext() : childElement.context; ///

  Object.assign(context, parentContext);

  delete childElement.context;
}

function addHandler(element, name, value) {
  var eventType = name.substr(2).toLowerCase(),
      ///
  handler = value; ///

  element.on(eventType, handler);
}

function addAttribute(element, name, value) {
  if (name === 'className') {
    name = 'class';
  }

  if (name === 'htmlFor') {
    name = 'for';
  }

  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
    var keys = Object.keys(value);

    keys.forEach(function (key) {
      element.domElement[name][key] = value[key];
    });
  } else if (typeof value === 'boolean') {
    if (value) {
      value = name; ///

      element.addAttribute(name, value);
    }
  } else {
    element.addAttribute(name, value);
  }
}

function isHandlerName(name) {
  return name.match(/^on/);
}

function isAttributeName(name, svg) {
  return svg ? isSVGAttributeName(name) : isHTMLAttributeName(name);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbnMvanN4LmpzIl0sIm5hbWVzIjpbImNvbnN0YW50cyIsInJlcXVpcmUiLCJuYW1lVXRpbGl0aWVzIiwiYXJyYXlVdGlsaXRpZXMiLCJvYmplY3RVdGlsaXRpZXMiLCJlbGVtZW50c1V0aWxpdGllcyIsImNvbWJpbmUiLCJwcnVuZSIsImZpcnN0IiwiZ3VhcmFudGVlIiwiU1ZHX05BTUVTUEFDRV9VUkkiLCJpc0hUTUxBdHRyaWJ1dGVOYW1lIiwiaXNTVkdBdHRyaWJ1dGVOYW1lIiwicmVtb3ZlRmFsc2V5RWxlbWVudHMiLCJyZXBsYWNlU3RyaW5nc1dpdGhUZXh0RWxlbWVudHMiLCJhcHBseVByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwidGFnTmFtZSIsImRlZmF1bHRQcm9wZXJ0aWVzIiwiaWdub3JlZFByb3BlcnRpZXMiLCJjaGlsZEVsZW1lbnRzIiwiY2hpbGRFbGVtZW50c0Zyb21FbGVtZW50QW5kUHJvcGVydGllcyIsInN2ZyIsImRvbUVsZW1lbnQiLCJuYW1lc3BhY2VVUkkiLCJuYW1lcyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwibmFtZSIsInZhbHVlIiwiaXNIYW5kbGVyTmFtZSIsImFkZEhhbmRsZXIiLCJpc0F0dHJpYnV0ZU5hbWUiLCJhZGRBdHRyaWJ1dGUiLCJoYXNPd25Qcm9wZXJ0eSIsImFzc2lnbiIsImNvbnRleHQiLCJjaGlsZEVsZW1lbnQiLCJ1cGRhdGVDb250ZXh0IiwiYWRkVG8iLCJnZXRQcm9wZXJ0aWVzIiwiZ2V0Q29udGV4dCIsImFzc2lnbkNvbnRleHQiLCJ0aGVuRGVsZXRlIiwiYXJndW1lbnRzTGVuZ3RoIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZmlyc3RBcmd1bWVudCIsInByb3BlcnR5TmFtZSIsImRlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0eSIsIm1vZHVsZSIsImV4cG9ydHMiLCJlbGVtZW50IiwicGFyZW50Q29udGV4dCIsImV2ZW50VHlwZSIsInN1YnN0ciIsInRvTG93ZXJD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SUEsS0FBSixFQUFXO0FBQ1RBLGNBQVFELElBQVIsQ0FEUyxDQUNLOztBQUVkeUIsY0FBUXBCLFlBQVIsQ0FBcUJMLElBQXJCLEVBQTJCQyxLQUEzQjtBQUNEO0FBQ0YsR0FOTSxNQU1BO0FBQ0x3QixZQUFRcEIsWUFBUixDQUFxQkwsSUFBckIsRUFBMkJDLEtBQTNCO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTQyxhQUFULENBQXVCRixJQUF2QixFQUE2QjtBQUMzQixTQUFPQSxLQUFLaUMsS0FBTCxDQUFXLEtBQVgsQ0FBUDtBQUNEOztBQUVELFNBQVM3QixlQUFULENBQXlCSixJQUF6QixFQUErQlAsR0FBL0IsRUFBb0M7QUFDbEMsU0FBT0EsTUFBTVYsbUJBQW1CaUIsSUFBbkIsQ0FBTixHQUFpQ2xCLG9CQUFvQmtCLElBQXBCLENBQXhDO0FBQ0QiLCJmaWxlIjoianN4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKSxcbiAgICAgIG5hbWVVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvbmFtZScpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKSxcbiAgICAgIG9iamVjdFV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9vYmplY3QnKSxcbiAgICAgIGVsZW1lbnRzVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2VsZW1lbnRzJyk7XG5cbmNvbnN0IHsgY29tYmluZSwgcHJ1bmUgfSA9IG9iamVjdFV0aWxpdGllcyxcbiAgICAgIHsgZmlyc3QsIGd1YXJhbnRlZSB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IFNWR19OQU1FU1BBQ0VfVVJJIH0gPSBjb25zdGFudHMsXG4gICAgICB7IGlzSFRNTEF0dHJpYnV0ZU5hbWUsIGlzU1ZHQXR0cmlidXRlTmFtZSB9ID0gbmFtZVV0aWxpdGllcyxcbiAgICAgIHsgcmVtb3ZlRmFsc2V5RWxlbWVudHMsIHJlcGxhY2VTdHJpbmdzV2l0aFRleHRFbGVtZW50cyB9ID0gZWxlbWVudHNVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGFwcGx5UHJvcGVydGllcyhwcm9wZXJ0aWVzID0ge30sIHRhZ05hbWUsIGRlZmF1bHRQcm9wZXJ0aWVzLCBpZ25vcmVkUHJvcGVydGllcykge1xuICBjb21iaW5lKHByb3BlcnRpZXMsIGRlZmF1bHRQcm9wZXJ0aWVzKTtcblxuICBjb25zdCBjaGlsZEVsZW1lbnRzID0gY2hpbGRFbGVtZW50c0Zyb21FbGVtZW50QW5kUHJvcGVydGllcyh0aGlzLCBwcm9wZXJ0aWVzKSB8fCBwcm9wZXJ0aWVzLmNoaWxkRWxlbWVudHM7ICAvLy9cblxuICBwcnVuZShwcm9wZXJ0aWVzLCBpZ25vcmVkUHJvcGVydGllcyk7XG5cbiAgY29uc3Qgc3ZnID0gKHRhZ05hbWUgIT09ICdpZnJhbWUnKSAmJiAodGhpcy5kb21FbGVtZW50Lm5hbWVzcGFjZVVSSSA9PT0gU1ZHX05BTUVTUEFDRV9VUkkpLCAvLy9cbiAgICAgICAgbmFtZXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKTsgIC8vL1xuXG4gIG5hbWVzLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IHByb3BlcnRpZXNbbmFtZV07XG5cbiAgICBpZiAoZmFsc2UpIHtcbiAgICAgIC8vL1xuICAgIH0gZWxzZSBpZiAoaXNIYW5kbGVyTmFtZShuYW1lKSkge1xuICAgICAgYWRkSGFuZGxlcih0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChpc0F0dHJpYnV0ZU5hbWUobmFtZSwgc3ZnKSkge1xuICAgICAgYWRkQXR0cmlidXRlKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KCdwcm9wZXJ0aWVzJykpIHtcbiAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHt9O1xuXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywge1xuICAgICAgICAgIHByb3BlcnRpZXNcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJvcGVydGllc1tuYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgY29udGV4dCA9IHt9O1xuXG4gIGNoaWxkRWxlbWVudHMuZm9yRWFjaCgoY2hpbGRFbGVtZW50KSA9PiB7XG4gICAgdXBkYXRlQ29udGV4dChjaGlsZEVsZW1lbnQsIGNvbnRleHQpO1xuXG4gICAgY2hpbGRFbGVtZW50LmFkZFRvKHRoaXMpO1xuICB9KTtcblxuICBPYmplY3QuYXNzaWduKHRoaXMsIHtcbiAgICBjb250ZXh0XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9wZXJ0aWVzKCkge1xuICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzO1xufVxuXG5mdW5jdGlvbiBnZXRDb250ZXh0KCkge1xuICByZXR1cm4gdGhpcy5jb250ZXh0O1xufVxuXG5mdW5jdGlvbiBhc3NpZ25Db250ZXh0KG5hbWVzLCB0aGVuRGVsZXRlKSB7XG4gIGNvbnN0IGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cbiAgaWYgKGFyZ3VtZW50c0xlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IGZpcnN0QXJndW1lbnQgPSBmaXJzdChhcmd1bWVudHMpO1xuXG4gICAgaWYgKHR5cGVvZiBmaXJzdEFyZ3VtZW50ID09PSAnYm9vbGVhbicpIHtcbiAgICAgIG5hbWVzID0gT2JqZWN0LmtleXModGhpcy5jb250ZXh0KTtcblxuICAgICAgdGhlbkRlbGV0ZSA9IGZpcnN0QXJndW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoZW5EZWxldGUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDApIHtcbiAgICBuYW1lcyA9IE9iamVjdC5rZXlzKHRoaXMuY29udGV4dCk7XG5cbiAgICB0aGVuRGVsZXRlID0gdHJ1ZTtcbiAgfVxuXG4gIG5hbWVzLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuY29udGV4dFtuYW1lXSxcbiAgICAgICAgICBwcm9wZXJ0eU5hbWUgPSBuYW1lLCAgLy8vXG4gICAgICAgICAgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgIH07XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgcHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yKTtcblxuICAgIGlmICh0aGVuRGVsZXRlKSB7XG4gICAgICBkZWxldGUgdGhpcy5jb250ZXh0W25hbWVdO1xuICAgIH1cbiAgfSwgW10pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXBwbHlQcm9wZXJ0aWVzLFxuICBnZXRQcm9wZXJ0aWVzLFxuICBnZXRDb250ZXh0LFxuICBhc3NpZ25Db250ZXh0XG59O1xuXG5mdW5jdGlvbiBjaGlsZEVsZW1lbnRzRnJvbUVsZW1lbnRBbmRQcm9wZXJ0aWVzKGVsZW1lbnQsIHByb3BlcnRpZXMpIHtcbiAgbGV0IGNoaWxkRWxlbWVudHMgPSBudWxsO1xuXG4gIGlmICh0eXBlb2YgZWxlbWVudC5jaGlsZEVsZW1lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2hpbGRFbGVtZW50cyA9IGVsZW1lbnQuY2hpbGRFbGVtZW50cyhwcm9wZXJ0aWVzKTtcblxuICAgIGNoaWxkRWxlbWVudHMgPSBndWFyYW50ZWUoY2hpbGRFbGVtZW50cyk7XG5cbiAgICBjaGlsZEVsZW1lbnRzID0gcmVtb3ZlRmFsc2V5RWxlbWVudHMoY2hpbGRFbGVtZW50cyk7XG5cbiAgICBjaGlsZEVsZW1lbnRzID0gcmVwbGFjZVN0cmluZ3NXaXRoVGV4dEVsZW1lbnRzKGNoaWxkRWxlbWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkRWxlbWVudHM7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNvbnRleHQoY2hpbGRFbGVtZW50LCBjb250ZXh0KSB7XG4gIGNvbnN0IHBhcmVudENvbnRleHQgPSAodHlwZW9mIGNoaWxkRWxlbWVudC5wYXJlbnRDb250ZXh0ID09PSAnZnVuY3Rpb24nKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkRWxlbWVudC5wYXJlbnRDb250ZXh0KCkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkRWxlbWVudC5jb250ZXh0OyAvLy9cblxuICBPYmplY3QuYXNzaWduKGNvbnRleHQsIHBhcmVudENvbnRleHQpO1xuXG4gIGRlbGV0ZSBjaGlsZEVsZW1lbnQuY29udGV4dDtcbn1cblxuZnVuY3Rpb24gYWRkSGFuZGxlcihlbGVtZW50LCBuYW1lLCB2YWx1ZSkge1xuICBjb25zdCBldmVudFR5cGUgPSBuYW1lLnN1YnN0cigyKS50b0xvd2VyQ2FzZSgpLCAvLy9cbiAgICAgICAgaGFuZGxlciA9IHZhbHVlOyAgLy8vXG5cbiAgZWxlbWVudC5vbihldmVudFR5cGUsIGhhbmRsZXIpO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRyaWJ1dGUoZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgaWYgKG5hbWUgPT09ICdjbGFzc05hbWUnKSB7XG4gICAgbmFtZSA9ICdjbGFzcyc7XG4gIH1cblxuICBpZiAobmFtZSA9PT0gJ2h0bWxGb3InKSB7XG4gICAgbmFtZSA9ICdmb3InO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuXG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgZWxlbWVudC5kb21FbGVtZW50W25hbWVdW2tleV0gPSB2YWx1ZVtrZXldO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB2YWx1ZSA9IG5hbWU7IC8vL1xuXG4gICAgICBlbGVtZW50LmFkZEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGVsZW1lbnQuYWRkQXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0hhbmRsZXJOYW1lKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUubWF0Y2goL15vbi8pO1xufVxuXG5mdW5jdGlvbiBpc0F0dHJpYnV0ZU5hbWUobmFtZSwgc3ZnKSB7XG4gIHJldHVybiBzdmcgPyBpc1NWR0F0dHJpYnV0ZU5hbWUobmFtZSkgOiBpc0hUTUxBdHRyaWJ1dGVOYW1lKG5hbWUpXG59XG4iXX0=