"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyProperties = applyProperties;
exports.getProperties = getProperties;
exports.getContext = getContext;
exports.assignContext = assignContext;

var _object = require("../utilities/object");

var _array = require("../utilities/array");

var _constants = require("../constants");

var _name = require("../utilities/name");

var _elements = require("../utilities/elements");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function applyProperties() {
  var _this = this;

  var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var defaultProperties = arguments.length > 1 ? arguments[1] : undefined;
  var ignoredProperties = arguments.length > 2 ? arguments[2] : undefined;
  (0, _object.combine)(properties, defaultProperties);
  var childElements = childElementsFromElementAndProperties(this, properties) || properties.childElements; ///

  (0, _object.prune)(properties, ignoredProperties);
  var svg = this.domElement.namespaceURI === _constants.SVG_NAMESPACE_URI,
      ///
  names = Object.keys(properties); ///

  names.forEach(function (name) {
    var value = properties[name];

    if (false) {///
    } else if (isHandlerName(name)) {
      addHandler(_this, name, value);
    } else if (isAttributeName(name, svg)) {
      addAttribute(_this, name, value);
    } else {
      if (!_this.hasOwnProperty("properties")) {
        var _properties = {};
        Object.assign(_this, {
          properties: _properties
        });
      }

      _this.properties[name] = value;
    }
  });
  var context = {};
  childElements.forEach(function (childElement) {
    updateContext(childElement, context);
    childElement.addTo(_this);
  });
  Object.assign(this, {
    context: context
  });
}

function getProperties() {
  return this.properties;
}

function getContext() {
  return this.context;
}

function assignContext(names, thenDelete) {
  var _this2 = this;

  var argumentsLength = arguments.length;

  if (argumentsLength === 1) {
    var firstArgument = (0, _array.first)(arguments);

    if (typeof firstArgument === "boolean") {
      names = Object.keys(this.context);
      thenDelete = firstArgument;
    } else {
      thenDelete = true;
    }
  }

  if (argumentsLength === 0) {
    names = Object.keys(this.context);
    thenDelete = true;
  }

  names.forEach(function (name) {
    var value = _this2.context[name],
        propertyName = name,
        ///
    descriptor = {
      value: value
    };
    Object.defineProperty(_this2, propertyName, descriptor);

    if (thenDelete) {
      delete _this2.context[name];
    }
  }, []);
}

function childElementsFromElementAndProperties(element, properties) {
  var childElements = null;

  if (typeof element.childElements === "function") {
    childElements = element.childElements(properties);
    childElements = (0, _array.guarantee)(childElements);
    childElements = (0, _elements.removeFalseyElements)(childElements);
    childElements = (0, _elements.replaceStringsWithTextElements)(childElements);
  }

  return childElements;
}

function updateContext(childElement, context) {
  var parentContext = typeof childElement.parentContext === "function" ? childElement.parentContext() : childElement.context; ///

  Object.assign(context, parentContext);
  delete childElement.context;
}

function addHandler(element, name, value) {
  var eventType = name.substr(2).toLowerCase(),
      ///
  handler = value; ///

  element.on(eventType, handler);
}

function addAttribute(element, name, value) {
  if (name === "className") {
    name = "class";
  }

  if (name === "htmlFor") {
    name = "for";
  }

  if (_typeof(value) === "object") {
    var keys = Object.keys(value);
    keys.forEach(function (key) {
      element.domElement[name][key] = value[key];
    });
  } else if (typeof value === "boolean") {
    if (value) {
      value = name; ///

      element.addAttribute(name, value);
    }
  } else {
    element.addAttribute(name, value);
  }
}

function isHandlerName(name) {
  return name.match(/^on/);
}

function isAttributeName(name, svg) {
  return svg ? (0, _name.isSVGAttributeName)(name) : (0, _name.isHTMLAttributeName)(name);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzeC5qcyJdLCJuYW1lcyI6WyJhcHBseVByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwiZGVmYXVsdFByb3BlcnRpZXMiLCJpZ25vcmVkUHJvcGVydGllcyIsImNoaWxkRWxlbWVudHMiLCJjaGlsZEVsZW1lbnRzRnJvbUVsZW1lbnRBbmRQcm9wZXJ0aWVzIiwic3ZnIiwiZG9tRWxlbWVudCIsIm5hbWVzcGFjZVVSSSIsIlNWR19OQU1FU1BBQ0VfVVJJIiwibmFtZXMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsIm5hbWUiLCJ2YWx1ZSIsImlzSGFuZGxlck5hbWUiLCJhZGRIYW5kbGVyIiwiaXNBdHRyaWJ1dGVOYW1lIiwiYWRkQXR0cmlidXRlIiwiaGFzT3duUHJvcGVydHkiLCJhc3NpZ24iLCJjb250ZXh0IiwiY2hpbGRFbGVtZW50IiwidXBkYXRlQ29udGV4dCIsImFkZFRvIiwiZ2V0UHJvcGVydGllcyIsImdldENvbnRleHQiLCJhc3NpZ25Db250ZXh0IiwidGhlbkRlbGV0ZSIsImFyZ3VtZW50c0xlbmd0aCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZpcnN0QXJndW1lbnQiLCJwcm9wZXJ0eU5hbWUiLCJkZXNjcmlwdG9yIiwiZGVmaW5lUHJvcGVydHkiLCJlbGVtZW50IiwicGFyZW50Q29udGV4dCIsImV2ZW50VHlwZSIsInN1YnN0ciIsInRvTG93ZXJDYXNlIiwiaGFuZGxlciIsIm9uIiwia2V5IiwibWF0Y2giXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFTyxTQUFTQSxlQUFULEdBQWdGO0FBQUE7O0FBQUEsTUFBdkRDLFVBQXVELHVFQUExQyxFQUEwQztBQUFBLE1BQXRDQyxpQkFBc0M7QUFBQSxNQUFuQkMsaUJBQW1CO0FBQ3JGLHVCQUFRRixVQUFSLEVBQW9CQyxpQkFBcEI7QUFFQSxNQUFNRSxhQUFhLEdBQUdDLHFDQUFxQyxDQUFDLElBQUQsRUFBT0osVUFBUCxDQUFy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QUFPQSxJQUFJLENBQUMrQixLQUFMLENBQVcsS0FBWCxDQUFQO0FBQ0Q7O0FBRUQsU0FBUzNCLGVBQVQsQ0FBeUJKLElBQXpCLEVBQStCUixHQUEvQixFQUFvQztBQUNsQyxTQUFPQSxHQUFHLEdBQUcsOEJBQW1CUSxJQUFuQixDQUFILEdBQThCLCtCQUFvQkEsSUFBcEIsQ0FBeEM7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBjb21iaW5lLCBwcnVuZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvb2JqZWN0XCI7XG5pbXBvcnQgeyBmaXJzdCwgZ3VhcmFudGVlIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hcnJheVwiO1xuaW1wb3J0IHsgU1ZHX05BTUVTUEFDRV9VUkkgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBpc0hUTUxBdHRyaWJ1dGVOYW1lLCBpc1NWR0F0dHJpYnV0ZU5hbWUgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL25hbWVcIjtcbmltcG9ydCB7IHJlbW92ZUZhbHNleUVsZW1lbnRzLCByZXBsYWNlU3RyaW5nc1dpdGhUZXh0RWxlbWVudHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2VsZW1lbnRzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVByb3BlcnRpZXMocHJvcGVydGllcyA9IHt9LCBkZWZhdWx0UHJvcGVydGllcywgaWdub3JlZFByb3BlcnRpZXMpIHtcbiAgY29tYmluZShwcm9wZXJ0aWVzLCBkZWZhdWx0UHJvcGVydGllcyk7XG5cbiAgY29uc3QgY2hpbGRFbGVtZW50cyA9IGNoaWxkRWxlbWVudHNGcm9tRWxlbWVudEFuZFByb3BlcnRpZXModGhpcywgcHJvcGVydGllcykgfHwgcHJvcGVydGllcy5jaGlsZEVsZW1lbnRzOyAgLy8vXG5cbiAgcHJ1bmUocHJvcGVydGllcywgaWdub3JlZFByb3BlcnRpZXMpO1xuXG4gIGNvbnN0IHN2ZyA9ICh0aGlzLmRvbUVsZW1lbnQubmFtZXNwYWNlVVJJID09PSBTVkdfTkFNRVNQQUNFX1VSSSksIC8vL1xuICAgICAgICBuYW1lcyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpOyAgLy8vXG5cbiAgbmFtZXMuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gcHJvcGVydGllc1tuYW1lXTtcblxuICAgIGlmIChmYWxzZSkge1xuICAgICAgLy8vXG4gICAgfSBlbHNlIGlmIChpc0hhbmRsZXJOYW1lKG5hbWUpKSB7XG4gICAgICBhZGRIYW5kbGVyKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGlzQXR0cmlidXRlTmFtZShuYW1lLCBzdmcpKSB7XG4gICAgICBhZGRBdHRyaWJ1dGUodGhpcywgbmFtZSwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoXCJwcm9wZXJ0aWVzXCIpKSB7XG4gICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7fTtcblxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHtcbiAgICAgICAgICBwcm9wZXJ0aWVzXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnByb3BlcnRpZXNbbmFtZV0gPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IGNvbnRleHQgPSB7fTtcblxuICBjaGlsZEVsZW1lbnRzLmZvckVhY2goKGNoaWxkRWxlbWVudCkgPT4ge1xuICAgIHVwZGF0ZUNvbnRleHQoY2hpbGRFbGVtZW50LCBjb250ZXh0KTtcblxuICAgIGNoaWxkRWxlbWVudC5hZGRUbyh0aGlzKTtcbiAgfSk7XG5cbiAgT2JqZWN0LmFzc2lnbih0aGlzLCB7XG4gICAgY29udGV4dFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFByb3BlcnRpZXMoKSB7XG4gIHJldHVybiB0aGlzLnByb3BlcnRpZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250ZXh0KCkge1xuICByZXR1cm4gdGhpcy5jb250ZXh0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzaWduQ29udGV4dChuYW1lcywgdGhlbkRlbGV0ZSkge1xuICBjb25zdCBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDEpIHtcbiAgICBjb25zdCBmaXJzdEFyZ3VtZW50ID0gZmlyc3QoYXJndW1lbnRzKTtcblxuICAgIGlmICh0eXBlb2YgZmlyc3RBcmd1bWVudCA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIG5hbWVzID0gT2JqZWN0LmtleXModGhpcy5jb250ZXh0KTtcblxuICAgICAgdGhlbkRlbGV0ZSA9IGZpcnN0QXJndW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoZW5EZWxldGUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDApIHtcbiAgICBuYW1lcyA9IE9iamVjdC5rZXlzKHRoaXMuY29udGV4dCk7XG5cbiAgICB0aGVuRGVsZXRlID0gdHJ1ZTtcbiAgfVxuXG4gIG5hbWVzLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuY29udGV4dFtuYW1lXSxcbiAgICAgICAgICBwcm9wZXJ0eU5hbWUgPSBuYW1lLCAgLy8vXG4gICAgICAgICAgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgIH07XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgcHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yKTtcblxuICAgIGlmICh0aGVuRGVsZXRlKSB7XG4gICAgICBkZWxldGUgdGhpcy5jb250ZXh0W25hbWVdO1xuICAgIH1cbiAgfSwgW10pO1xufVxuXG5mdW5jdGlvbiBjaGlsZEVsZW1lbnRzRnJvbUVsZW1lbnRBbmRQcm9wZXJ0aWVzKGVsZW1lbnQsIHByb3BlcnRpZXMpIHtcbiAgbGV0IGNoaWxkRWxlbWVudHMgPSBudWxsO1xuXG4gIGlmICh0eXBlb2YgZWxlbWVudC5jaGlsZEVsZW1lbnRzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjaGlsZEVsZW1lbnRzID0gZWxlbWVudC5jaGlsZEVsZW1lbnRzKHByb3BlcnRpZXMpO1xuXG4gICAgY2hpbGRFbGVtZW50cyA9IGd1YXJhbnRlZShjaGlsZEVsZW1lbnRzKTtcblxuICAgIGNoaWxkRWxlbWVudHMgPSByZW1vdmVGYWxzZXlFbGVtZW50cyhjaGlsZEVsZW1lbnRzKTtcblxuICAgIGNoaWxkRWxlbWVudHMgPSByZXBsYWNlU3RyaW5nc1dpdGhUZXh0RWxlbWVudHMoY2hpbGRFbGVtZW50cyk7XG4gIH1cblxuICByZXR1cm4gY2hpbGRFbGVtZW50cztcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29udGV4dChjaGlsZEVsZW1lbnQsIGNvbnRleHQpIHtcbiAgY29uc3QgcGFyZW50Q29udGV4dCA9ICh0eXBlb2YgY2hpbGRFbGVtZW50LnBhcmVudENvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEVsZW1lbnQucGFyZW50Q29udGV4dCgpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEVsZW1lbnQuY29udGV4dDsgLy8vXG5cbiAgT2JqZWN0LmFzc2lnbihjb250ZXh0LCBwYXJlbnRDb250ZXh0KTtcblxuICBkZWxldGUgY2hpbGRFbGVtZW50LmNvbnRleHQ7XG59XG5cbmZ1bmN0aW9uIGFkZEhhbmRsZXIoZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgY29uc3QgZXZlbnRUeXBlID0gbmFtZS5zdWJzdHIoMikudG9Mb3dlckNhc2UoKSwgLy8vXG4gICAgICAgIGhhbmRsZXIgPSB2YWx1ZTsgIC8vL1xuXG4gIGVsZW1lbnQub24oZXZlbnRUeXBlLCBoYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gYWRkQXR0cmlidXRlKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gIGlmIChuYW1lID09PSBcImNsYXNzTmFtZVwiKSB7XG4gICAgbmFtZSA9IFwiY2xhc3NcIjtcbiAgfVxuXG4gIGlmIChuYW1lID09PSBcImh0bWxGb3JcIikge1xuICAgIG5hbWUgPSBcImZvclwiO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG5cbiAgICBrZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgZWxlbWVudC5kb21FbGVtZW50W25hbWVdW2tleV0gPSB2YWx1ZVtrZXldO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHZhbHVlID0gbmFtZTsgLy8vXG5cbiAgICAgIGVsZW1lbnQuYWRkQXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZWxlbWVudC5hZGRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzSGFuZGxlck5hbWUobmFtZSkge1xuICByZXR1cm4gbmFtZS5tYXRjaCgvXm9uLyk7XG59XG5cbmZ1bmN0aW9uIGlzQXR0cmlidXRlTmFtZShuYW1lLCBzdmcpIHtcbiAgcmV0dXJuIHN2ZyA/IGlzU1ZHQXR0cmlidXRlTmFtZShuYW1lKSA6IGlzSFRNTEF0dHJpYnV0ZU5hbWUobmFtZSlcbn1cbiJdfQ==