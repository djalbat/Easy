"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.on = on;
exports.off = off;
exports.addEventListener = addEventListener;
exports.removeEventListener = removeEventListener;

function on(eventTypes, handler) {
  var _this = this;

  eventTypes = eventTypes.split(" "); ///

  eventTypes.forEach(function (eventType) {
    var eventListener = _this.addEventListener(eventType, handler);

    _this.domElement.addEventListener(eventType, eventListener);
  });
}

function off(eventTypes, handler) {
  var _this2 = this;

  eventTypes = eventTypes.split(" "); ///

  eventTypes.forEach(function (eventType) {
    var eventListener = _this2.removeEventListener(eventType, handler);

    _this2.domElement.removeEventListener(eventType, eventListener);
  });
}

function addEventListener(eventType, handler) {
  if (!this.hasOwnProperty("eventListeners")) {
    this.eventListeners = [];
  }

  var eventListeners = this.eventListeners,
      eventListener = createEventListener(eventType, handler, this);
  eventListeners.push(eventListener);
  return eventListener;
}

function removeEventListener(eventType, handler) {
  var _this3 = this;

  var eventListeners = this.eventListeners,
      eventListener = eventListeners.find(function (eventListener) {
    return eventListener.eventType === eventType && eventListener.handler === handler && eventListener.element === _this3;
  }),
      index = eventListeners.indexOf(eventListener),
      start = index,
      ///
  deleteCount = 1;
  eventListeners.splice(start, deleteCount);

  if (eventListeners.length === 0) {
    delete this.eventListeners;
  }

  return eventListener;
}

function createEventListener(eventType, handler, element) {
  var eventListener;

  eventListener = function eventListener(event) {
    handler.call(element, event, element);
  };

  Object.assign(eventListener, {
    eventType: eventType,
    handler: handler,
    element: element
  });
  return eventListener;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV2ZW50LmpzIl0sIm5hbWVzIjpbIm9uIiwiZXZlbnRUeXBlcyIsImhhbmRsZXIiLCJzcGxpdCIsImZvckVhY2giLCJldmVudFR5cGUiLCJldmVudExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRvbUVsZW1lbnQiLCJvZmYiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaGFzT3duUHJvcGVydHkiLCJldmVudExpc3RlbmVycyIsImNyZWF0ZUV2ZW50TGlzdGVuZXIiLCJwdXNoIiwiZmluZCIsImVsZW1lbnQiLCJpbmRleCIsImluZGV4T2YiLCJzdGFydCIsImRlbGV0ZUNvdW50Iiwic3BsaWNlIiwibGVuZ3RoIiwiZXZlbnQiLCJjYWxsIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQUVPLFNBQVNBLEVBQVQsQ0FBWUMsVUFBWixFQUF3QkMsT0FBeEIsRUFBaUM7QUFBQTs7QUFDdENELEVBQUFBLFVBQVUsR0FBR0EsVUFBVSxDQUFDRSxLQUFYLENBQWlCLEdBQWpCLENBQWIsQ0FEc0MsQ0FDRjs7QUFFcENGLEVBQUFBLFVBQVUsQ0FBQ0csT0FBWCxDQUFtQixVQUFDQyxTQUFELEVBQWU7QUFDaEMsUUFBTUMsYUFBYSxHQUFHLEtBQUksQ0FBQ0MsZ0JBQUwsQ0FBc0JGLFNBQXRCLEVBQWlDSCxPQUFqQyxDQUF0Qjs7QUFFQSxJQUFBLEtBQUksQ0FBQ00sVUFBTCxDQUFnQkQsZ0JBQWhCLENBQWlDRixTQUFqQyxFQUE0Q0MsYUFBNUM7QUFDRCxHQUpEO0FBS0Q7O0FBRU0sU0FBU0csR0FBVCxDQUFhUixVQUFiLEVBQXlCQyxPQUF6QixFQUFrQztBQUFBOztBQUN2Q0QsRUFBQUEsVUFBVSxHQUFHQSxVQUFVLENBQUNFLEtBQVgsQ0FBaUIsR0FBakIsQ0FBYixDQUR1QyxDQUNIOztBQUVwQ0YsRUFBQUEsVUFBVSxDQUFDRyxPQUFYLENBQW1CLFVBQUNDLFNBQUQsRUFBZTtBQUNoQyxRQUFNQyxhQUFhLEdBQUcsTUFBSSxDQUFDSSxtQkFBTCxDQUF5QkwsU0FBekIsRUFBb0NILE9BQXBDLENBQXRCOztBQUVBLElBQUEsTUFBSSxDQUFDTSxVQUFMLENBQWdCRSxtQkFBaEIsQ0FBb0NMLFNBQXBDLEVBQStDQyxhQUEvQztBQUNELEdBSkQ7QUFLRDs7QUFFTSxTQUFTQyxnQkFBVCxDQUEwQkYsU0FBMUIsRUFBcUNILE9BQXJDLEVBQThDO0FBQ25ELE1BQUksQ0FBQyxLQUFLUyxjQUFMLENBQW9CLGdCQUFwQixDQUFMLEVBQTRDO0FBQzFDLFNBQUtDLGNBQUwsR0FBc0IsRUFBdEI7QUFDRDs7QUFFRCxNQUFNQSxjQUFjLEdBQUcsS0FBS0EsY0FBNUI7QUFBQSxNQUNNTixhQUFhLEdBQUdPLG1CQUFtQixDQUFDUixTQUFELEVBQVlILE9BQVosRUFBcUIsSUFBckIsQ0FEekM7QUFHQVUsRUFBQUEsY0FBYyxDQUFDRSxJQUFmLENBQW9CUixhQUFwQjtBQUVBLFNBQU9BLGFBQVA7QUFDRDs7QUFFTSxTQUFTSSxtQkFBVCxDQUE2QkwsU0FBN0IsRUFBd0NILE9BQXhDLEVBQWlEO0FBQUE7O0FBQ3RELE1BQU1VLGNBQWMsR0FBRyxLQUFLQSxjQUE1QjtBQUFBLE1BQ01OLGFBQWEsR0FBR00sY0FBYyxDQUFDRyxJQUFmLENBQW9CLFVBQUNULGFBQUQ7QUFBQSxXQUFxQkEsYUFBYSxDQUFDRCxTQUFkLEtBQTRCQSxTQUE3QixJQUE0Q0MsYUFBYSxDQUFDSixPQUFkLEtBQTBCQSxPQUF0RSxJQUFtRkksYUFBYSxDQUFDVSxPQUFkLEtBQTBCLE1BQWpJO0FBQUEsR0FBcEIsQ0FEdEI7QUFBQSxNQUVNQyxLQUFLLEdBQUdMLGNBQWMsQ0FBQ00sT0FBZixDQUF1QlosYUFBdkIsQ0FGZDtBQUFBLE1BR01hLEtBQUssR0FBR0YsS0FIZDtBQUFBLE1BR3NCO0FBQ2hCRyxFQUFBQSxXQUFXLEdBQUcsQ0FKcEI7QUFNQVIsRUFBQUEsY0FBYyxDQUFDUyxNQUFmLENBQXNCRixLQUF0QixFQUE2QkMsV0FBN0I7O0FBRUEsTUFBSVIsY0FBYyxDQUFDVSxNQUFmLEtBQTBCLENBQTlCLEVBQWlDO0FBQy9CLFdBQU8sS0FBS1YsY0FBWjtBQUNEOztBQUVELFNBQU9OLGFBQVA7QUFDRDs7QUFFRCxTQUFTTyxtQkFBVCxDQUE2QlIsU0FBN0IsRUFBd0NILE9BQXhDLEVBQWlEYyxPQUFqRCxFQUEwRDtBQUN4RCxNQUFJVixhQUFKOztBQUVBQSxFQUFBQSxhQUFhLEdBQUcsdUJBQUNpQixLQUFELEVBQVc7QUFDekJyQixJQUFBQSxPQUFPLENBQUNzQixJQUFSLENBQWFSLE9BQWIsRUFBc0JPLEtBQXRCLEVBQTZCUCxPQUE3QjtBQUNELEdBRkQ7O0FBSUFTLEVBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjcEIsYUFBZCxFQUE2QjtBQUMzQkQsSUFBQUEsU0FBUyxFQUFUQSxTQUQyQjtBQUUzQkgsSUFBQUEsT0FBTyxFQUFQQSxPQUYyQjtBQUczQmMsSUFBQUEsT0FBTyxFQUFQQTtBQUgyQixHQUE3QjtBQU1BLFNBQU9WLGFBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gb24oZXZlbnRUeXBlcywgaGFuZGxlcikge1xuICBldmVudFR5cGVzID0gZXZlbnRUeXBlcy5zcGxpdChcIiBcIik7IC8vL1xuXG4gIGV2ZW50VHlwZXMuZm9yRWFjaCgoZXZlbnRUeXBlKSA9PiB7XG4gICAgY29uc3QgZXZlbnRMaXN0ZW5lciA9IHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIpO1xuICAgIFxuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgZXZlbnRMaXN0ZW5lcik7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb2ZmKGV2ZW50VHlwZXMsIGhhbmRsZXIpIHtcbiAgZXZlbnRUeXBlcyA9IGV2ZW50VHlwZXMuc3BsaXQoXCIgXCIpOyAvLy9cblxuICBldmVudFR5cGVzLmZvckVhY2goKGV2ZW50VHlwZSkgPT4ge1xuICAgIGNvbnN0IGV2ZW50TGlzdGVuZXIgPSB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyKTtcblxuICAgIHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgZXZlbnRMaXN0ZW5lcik7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIpIHtcbiAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KFwiZXZlbnRMaXN0ZW5lcnNcIikpIHtcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXJzID0gW107XG4gIH1cblxuICBjb25zdCBldmVudExpc3RlbmVycyA9IHRoaXMuZXZlbnRMaXN0ZW5lcnMsXG4gICAgICAgIGV2ZW50TGlzdGVuZXIgPSBjcmVhdGVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgdGhpcyk7XG5cbiAgZXZlbnRMaXN0ZW5lcnMucHVzaChldmVudExpc3RlbmVyKTtcblxuICByZXR1cm4gZXZlbnRMaXN0ZW5lcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyKSB7XG4gIGNvbnN0IGV2ZW50TGlzdGVuZXJzID0gdGhpcy5ldmVudExpc3RlbmVycyxcbiAgICAgICAgZXZlbnRMaXN0ZW5lciA9IGV2ZW50TGlzdGVuZXJzLmZpbmQoKGV2ZW50TGlzdGVuZXIpID0+ICgoZXZlbnRMaXN0ZW5lci5ldmVudFR5cGUgPT09IGV2ZW50VHlwZSkgJiYgKGV2ZW50TGlzdGVuZXIuaGFuZGxlciA9PT0gaGFuZGxlcikgJiYgKGV2ZW50TGlzdGVuZXIuZWxlbWVudCA9PT0gdGhpcykpKSxcbiAgICAgICAgaW5kZXggPSBldmVudExpc3RlbmVycy5pbmRleE9mKGV2ZW50TGlzdGVuZXIpLFxuICAgICAgICBzdGFydCA9IGluZGV4LCAgLy8vXG4gICAgICAgIGRlbGV0ZUNvdW50ID0gMTtcblxuICBldmVudExpc3RlbmVycy5zcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50KTtcblxuICBpZiAoZXZlbnRMaXN0ZW5lcnMubGVuZ3RoID09PSAwKSB7XG4gICAgZGVsZXRlIHRoaXMuZXZlbnRMaXN0ZW5lcnM7XG4gIH1cblxuICByZXR1cm4gZXZlbnRMaXN0ZW5lcjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgbGV0IGV2ZW50TGlzdGVuZXI7XG5cbiAgZXZlbnRMaXN0ZW5lciA9IChldmVudCkgPT4ge1xuICAgIGhhbmRsZXIuY2FsbChlbGVtZW50LCBldmVudCwgZWxlbWVudClcbiAgfTtcblxuICBPYmplY3QuYXNzaWduKGV2ZW50TGlzdGVuZXIsIHtcbiAgICBldmVudFR5cGUsXG4gICAgaGFuZGxlcixcbiAgICBlbGVtZW50XG4gIH0pO1xuXG4gIHJldHVybiBldmVudExpc3RlbmVyO1xufVxuIl19