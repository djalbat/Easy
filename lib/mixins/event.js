"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.on = on;
exports.off = off;
exports.addEventListener = addEventListener;
exports.removeEventListener = removeEventListener;

function on(eventTypes, handler) {
  var _this = this;

  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;
  eventTypes = eventTypes.split(" "); ///

  eventTypes.forEach(function (eventType) {
    var eventListener = _this.addEventListener(eventType, handler, element);

    _this.domElement.addEventListener(eventType, eventListener);
  });
}

function off(eventTypes, handler) {
  var _this2 = this;

  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;
  eventTypes = eventTypes.split(" "); ///

  eventTypes.forEach(function (eventType) {
    var eventListener = _this2.removeEventListener(eventType, handler, element);

    _this2.domElement.removeEventListener(eventType, eventListener);
  });
}

function addEventListener(eventType, handler, element) {
  if (!this.hasOwnProperty("eventListeners")) {
    this.eventListeners = [];
  }

  var eventListeners = this.eventListeners,
      eventListener = createEventListener(eventType, handler, element);
  eventListeners.push(eventListener);
  return eventListener;
}

function removeEventListener(eventType, handler, element) {
  var eventListeners = this.eventListeners,
      eventListener = eventListeners.find(function (eventListener) {
    return eventListener.eventType === eventType && eventListener.element === element && eventListener.handler === handler;
  }),
      index = eventListeners.indexOf(eventListener),
      start = index,
      ///
  deleteCount = 1;
  eventListeners.splice(start, deleteCount);

  if (eventListeners.length === 0) {
    delete this.eventListeners;
  }

  return eventListener;
}

function createEventListener(eventType, handler, element) {
  var eventListener;

  eventListener = function eventListener(event) {
    handler.call(element, event, element);
  };

  Object.assign(eventListener, {
    eventType: eventType,
    handler: handler,
    element: element
  });
  return eventListener;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV2ZW50LmpzIl0sIm5hbWVzIjpbIm9uIiwiZXZlbnRUeXBlcyIsImhhbmRsZXIiLCJlbGVtZW50Iiwic3BsaXQiLCJmb3JFYWNoIiwiZXZlbnRUeXBlIiwiZXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJkb21FbGVtZW50Iiwib2ZmIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImhhc093blByb3BlcnR5IiwiZXZlbnRMaXN0ZW5lcnMiLCJjcmVhdGVFdmVudExpc3RlbmVyIiwicHVzaCIsImZpbmQiLCJpbmRleCIsImluZGV4T2YiLCJzdGFydCIsImRlbGV0ZUNvdW50Iiwic3BsaWNlIiwibGVuZ3RoIiwiZXZlbnQiLCJjYWxsIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQUVPLFNBQVNBLEVBQVQsQ0FBWUMsVUFBWixFQUF3QkMsT0FBeEIsRUFBaUQ7QUFBQTs7QUFBQSxNQUFoQkMsT0FBZ0IsdUVBQU4sSUFBTTtBQUN0REYsRUFBQUEsVUFBVSxHQUFHQSxVQUFVLENBQUNHLEtBQVgsQ0FBaUIsR0FBakIsQ0FBYixDQURzRCxDQUNsQjs7QUFFcENILEVBQUFBLFVBQVUsQ0FBQ0ksT0FBWCxDQUFtQixVQUFDQyxTQUFELEVBQWU7QUFDaEMsUUFBTUMsYUFBYSxHQUFHLEtBQUksQ0FBQ0MsZ0JBQUwsQ0FBc0JGLFNBQXRCLEVBQWlDSixPQUFqQyxFQUEwQ0MsT0FBMUMsQ0FBdEI7O0FBRUEsSUFBQSxLQUFJLENBQUNNLFVBQUwsQ0FBZ0JELGdCQUFoQixDQUFpQ0YsU0FBakMsRUFBNENDLGFBQTVDO0FBQ0QsR0FKRDtBQUtEOztBQUVNLFNBQVNHLEdBQVQsQ0FBYVQsVUFBYixFQUF5QkMsT0FBekIsRUFBa0Q7QUFBQTs7QUFBQSxNQUFoQkMsT0FBZ0IsdUVBQU4sSUFBTTtBQUN2REYsRUFBQUEsVUFBVSxHQUFHQSxVQUFVLENBQUNHLEtBQVgsQ0FBaUIsR0FBakIsQ0FBYixDQUR1RCxDQUNuQjs7QUFFcENILEVBQUFBLFVBQVUsQ0FBQ0ksT0FBWCxDQUFtQixVQUFDQyxTQUFELEVBQWU7QUFDaEMsUUFBTUMsYUFBYSxHQUFHLE1BQUksQ0FBQ0ksbUJBQUwsQ0FBeUJMLFNBQXpCLEVBQW9DSixPQUFwQyxFQUE2Q0MsT0FBN0MsQ0FBdEI7O0FBRUEsSUFBQSxNQUFJLENBQUNNLFVBQUwsQ0FBZ0JFLG1CQUFoQixDQUFvQ0wsU0FBcEMsRUFBK0NDLGFBQS9DO0FBQ0QsR0FKRDtBQUtEOztBQUVNLFNBQVNDLGdCQUFULENBQTBCRixTQUExQixFQUFxQ0osT0FBckMsRUFBOENDLE9BQTlDLEVBQXVEO0FBQzVELE1BQUksQ0FBQyxLQUFLUyxjQUFMLENBQW9CLGdCQUFwQixDQUFMLEVBQTRDO0FBQzFDLFNBQUtDLGNBQUwsR0FBc0IsRUFBdEI7QUFDRDs7QUFFRCxNQUFNQSxjQUFjLEdBQUcsS0FBS0EsY0FBNUI7QUFBQSxNQUNNTixhQUFhLEdBQUdPLG1CQUFtQixDQUFDUixTQUFELEVBQVlKLE9BQVosRUFBcUJDLE9BQXJCLENBRHpDO0FBR0FVLEVBQUFBLGNBQWMsQ0FBQ0UsSUFBZixDQUFvQlIsYUFBcEI7QUFFQSxTQUFPQSxhQUFQO0FBQ0Q7O0FBRU0sU0FBU0ksbUJBQVQsQ0FBNkJMLFNBQTdCLEVBQXdDSixPQUF4QyxFQUFpREMsT0FBakQsRUFBMEQ7QUFDL0QsTUFBTVUsY0FBYyxHQUFHLEtBQUtBLGNBQTVCO0FBQUEsTUFDTU4sYUFBYSxHQUFHTSxjQUFjLENBQUNHLElBQWYsQ0FBb0IsVUFBQ1QsYUFBRDtBQUFBLFdBQXFCQSxhQUFhLENBQUNELFNBQWQsS0FBNEJBLFNBQTdCLElBQTRDQyxhQUFhLENBQUNKLE9BQWQsS0FBMEJBLE9BQXRFLElBQW1GSSxhQUFhLENBQUNMLE9BQWQsS0FBMEJBLE9BQWpJO0FBQUEsR0FBcEIsQ0FEdEI7QUFBQSxNQUVNZSxLQUFLLEdBQUdKLGNBQWMsQ0FBQ0ssT0FBZixDQUF1QlgsYUFBdkIsQ0FGZDtBQUFBLE1BR01ZLEtBQUssR0FBR0YsS0FIZDtBQUFBLE1BR3NCO0FBQ2hCRyxFQUFBQSxXQUFXLEdBQUcsQ0FKcEI7QUFNQVAsRUFBQUEsY0FBYyxDQUFDUSxNQUFmLENBQXNCRixLQUF0QixFQUE2QkMsV0FBN0I7O0FBRUEsTUFBSVAsY0FBYyxDQUFDUyxNQUFmLEtBQTBCLENBQTlCLEVBQWlDO0FBQy9CLFdBQU8sS0FBS1QsY0FBWjtBQUNEOztBQUVELFNBQU9OLGFBQVA7QUFDRDs7QUFFRCxTQUFTTyxtQkFBVCxDQUE2QlIsU0FBN0IsRUFBd0NKLE9BQXhDLEVBQWlEQyxPQUFqRCxFQUEwRDtBQUN4RCxNQUFJSSxhQUFKOztBQUVBQSxFQUFBQSxhQUFhLEdBQUcsdUJBQUNnQixLQUFELEVBQVc7QUFDekJyQixJQUFBQSxPQUFPLENBQUNzQixJQUFSLENBQWFyQixPQUFiLEVBQXNCb0IsS0FBdEIsRUFBNkJwQixPQUE3QjtBQUNELEdBRkQ7O0FBSUFzQixFQUFBQSxNQUFNLENBQUNDLE1BQVAsQ0FBY25CLGFBQWQsRUFBNkI7QUFDM0JELElBQUFBLFNBQVMsRUFBVEEsU0FEMkI7QUFFM0JKLElBQUFBLE9BQU8sRUFBUEEsT0FGMkI7QUFHM0JDLElBQUFBLE9BQU8sRUFBUEE7QUFIMkIsR0FBN0I7QUFNQSxTQUFPSSxhQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG9uKGV2ZW50VHlwZXMsIGhhbmRsZXIsIGVsZW1lbnQgPSB0aGlzKSB7XG4gIGV2ZW50VHlwZXMgPSBldmVudFR5cGVzLnNwbGl0KFwiIFwiKTsgLy8vXG5cbiAgZXZlbnRUeXBlcy5mb3JFYWNoKChldmVudFR5cGUpID0+IHtcbiAgICBjb25zdCBldmVudExpc3RlbmVyID0gdGhpcy5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCk7XG4gICAgXG4gICAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBldmVudExpc3RlbmVyKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvZmYoZXZlbnRUeXBlcywgaGFuZGxlciwgZWxlbWVudCA9IHRoaXMpIHtcbiAgZXZlbnRUeXBlcyA9IGV2ZW50VHlwZXMuc3BsaXQoXCIgXCIpOyAvLy9cblxuICBldmVudFR5cGVzLmZvckVhY2goKGV2ZW50VHlwZSkgPT4ge1xuICAgIGNvbnN0IGV2ZW50TGlzdGVuZXIgPSB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KTtcblxuICAgIHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgZXZlbnRMaXN0ZW5lcik7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KFwiZXZlbnRMaXN0ZW5lcnNcIikpIHtcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXJzID0gW107XG4gIH1cblxuICBjb25zdCBldmVudExpc3RlbmVycyA9IHRoaXMuZXZlbnRMaXN0ZW5lcnMsXG4gICAgICAgIGV2ZW50TGlzdGVuZXIgPSBjcmVhdGVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCk7XG5cbiAgZXZlbnRMaXN0ZW5lcnMucHVzaChldmVudExpc3RlbmVyKTtcblxuICByZXR1cm4gZXZlbnRMaXN0ZW5lcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KSB7XG4gIGNvbnN0IGV2ZW50TGlzdGVuZXJzID0gdGhpcy5ldmVudExpc3RlbmVycyxcbiAgICAgICAgZXZlbnRMaXN0ZW5lciA9IGV2ZW50TGlzdGVuZXJzLmZpbmQoKGV2ZW50TGlzdGVuZXIpID0+ICgoZXZlbnRMaXN0ZW5lci5ldmVudFR5cGUgPT09IGV2ZW50VHlwZSkgJiYgKGV2ZW50TGlzdGVuZXIuZWxlbWVudCA9PT0gZWxlbWVudCkgJiYgKGV2ZW50TGlzdGVuZXIuaGFuZGxlciA9PT0gaGFuZGxlcikpKSxcbiAgICAgICAgaW5kZXggPSBldmVudExpc3RlbmVycy5pbmRleE9mKGV2ZW50TGlzdGVuZXIpLFxuICAgICAgICBzdGFydCA9IGluZGV4LCAgLy8vXG4gICAgICAgIGRlbGV0ZUNvdW50ID0gMTtcblxuICBldmVudExpc3RlbmVycy5zcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50KTtcblxuICBpZiAoZXZlbnRMaXN0ZW5lcnMubGVuZ3RoID09PSAwKSB7XG4gICAgZGVsZXRlIHRoaXMuZXZlbnRMaXN0ZW5lcnM7XG4gIH1cblxuICByZXR1cm4gZXZlbnRMaXN0ZW5lcjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgbGV0IGV2ZW50TGlzdGVuZXI7XG5cbiAgZXZlbnRMaXN0ZW5lciA9IChldmVudCkgPT4ge1xuICAgIGhhbmRsZXIuY2FsbChlbGVtZW50LCBldmVudCwgZWxlbWVudClcbiAgfTtcblxuICBPYmplY3QuYXNzaWduKGV2ZW50TGlzdGVuZXIsIHtcbiAgICBldmVudFR5cGUsXG4gICAgaGFuZGxlcixcbiAgICBlbGVtZW50XG4gIH0pO1xuXG4gIHJldHVybiBldmVudExpc3RlbmVyO1xufVxuIl19