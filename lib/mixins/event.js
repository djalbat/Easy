'use strict';

function on(eventTypes, handler) {
  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;
  var intermediateHandler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var eventListener = this.addEventListener(eventType, handler, element, intermediateHandler);

    this.domElement.addEventListener(eventType, eventListener);
  }.bind(this));
}

function off(eventTypes, handler) {
  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;

  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var eventListener = this.removeEventListener(eventType, handler, element);

    this.domElement.removeEventListener(eventType, eventListener);
  }.bind(this));
}

module.exports = {
  on: on,
  off: off,
  addEventListener: addEventListener,
  removeEventListener: removeEventListener
};

function addEventListener(eventType, handler, element, intermediateHandler) {
  if (!this.hasOwnProperty('eventListeners')) {
    this.eventListeners = [];
  }

  var eventListeners = this.eventListeners,
      eventListener = createEventListener(eventType, handler, element, intermediateHandler);

  eventListeners.push(eventListener);

  return eventListener;
}

function removeEventListener(eventType, handler, element) {
  var eventListeners = this.eventListeners,
      eventListener = findEventListener(eventListeners, eventType, handler, element),
      index = eventListeners.indexOf(eventListener),
      start = index,
      ///
  deleteCount = 1;

  eventListeners.splice(start, deleteCount);

  if (eventListeners.length === 0) {
    delete this.eventListeners;
  }

  return eventListener;
}

function createEventListener(eventType, handler, element, intermediateHandler) {
  var eventListener = void 0;

  if (intermediateHandler === null) {
    eventListener = function eventListener(event) {
      handler.call(element, event);
    };
  } else {
    eventListener = function eventListener(event) {
      intermediateHandler(function (event) {
        handler.call.apply(handler, [element].concat(Array.prototype.slice.call(arguments)));
      }, event, element);
    };
  }

  Object.assign(eventListener, {
    eventType: eventType,
    handler: handler,
    element: element
  });

  return eventListener;
}

function findEventListener(eventListeners, eventType, handler, element) {
  var eventListener = eventListeners.find(function (eventListener) {
    var found = eventListener.element === element && eventListener.handler === handler && eventListener.eventType === eventType; ///

    return found;
  });

  return eventListener;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbnMvZXZlbnQuanMiXSwibmFtZXMiOlsib24iLCJldmVudFR5cGVzIiwiaGFuZGxlciIsImVsZW1lbnQiLCJpbnRlcm1lZGlhdGVIYW5kbGVyIiwic3BsaXQiLCJmb3JFYWNoIiwiZXZlbnRUeXBlIiwiZXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJkb21FbGVtZW50IiwiYmluZCIsIm9mZiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiaGFzT3duUHJvcGVydHkiLCJldmVudExpc3RlbmVycyIsImNyZWF0ZUV2ZW50TGlzdGVuZXIiLCJwdXNoIiwiZmluZEV2ZW50TGlzdGVuZXIiLCJpbmRleCIsImluZGV4T2YiLCJzdGFydCIsImRlbGV0ZUNvdW50Iiwic3BsaWNlIiwibGVuZ3RoIiwiZXZlbnQiLCJjYWxsIiwiYXJndW1lbnRzIiwiT2JqZWN0IiwiYXNzaWduIiwiZmluZCIsImZvdW5kIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSxFQUFULENBQVlDLFVBQVosRUFBd0JDLE9BQXhCLEVBQTZFO0FBQUEsTUFBNUNDLE9BQTRDLHVFQUFsQyxJQUFrQztBQUFBLE1BQTVCQyxtQkFBNEIsdUVBQU4sSUFBTTs7QUFDM0VILGVBQWFBLFdBQVdJLEtBQVgsQ0FBaUIsR0FBakIsQ0FBYixDQUQyRSxDQUN2Qzs7QUFFcENKLGFBQVdLLE9BQVgsQ0FBbUIsVUFBU0MsU0FBVCxFQUFvQjtBQUNyQyxRQUFNQyxnQkFBZ0IsS0FBS0MsZ0JBQUwsQ0FBc0JGLFNBQXRCLEVBQWlDTCxPQUFqQyxFQUEwQ0MsT0FBMUMsRUFBbURDLG1CQUFuRCxDQUF0Qjs7QUFFQSxTQUFLTSxVQUFMLENBQWdCRCxnQkFBaEIsQ0FBaUNGLFNBQWpDLEVBQTRDQyxhQUE1QztBQUNELEdBSmtCLENBSWpCRyxJQUppQixDQUlaLElBSlksQ0FBbkI7QUFLRDs7QUFFRCxTQUFTQyxHQUFULENBQWFYLFVBQWIsRUFBeUJDLE9BQXpCLEVBQWtEO0FBQUEsTUFBaEJDLE9BQWdCLHVFQUFOLElBQU07O0FBQ2hERixlQUFhQSxXQUFXSSxLQUFYLENBQWlCLEdBQWpCLENBQWIsQ0FEZ0QsQ0FDWjs7QUFFcENKLGFBQVdLLE9BQVgsQ0FBbUIsVUFBU0MsU0FBVCxFQUFvQjtBQUNyQyxRQUFNQyxnQkFBZ0IsS0FBS0ssbUJBQUwsQ0FBeUJOLFNBQXpCLEVBQW9DTCxPQUFwQyxFQUE2Q0MsT0FBN0MsQ0FBdEI7O0FBRUEsU0FBS08sVUFBTCxDQUFnQkcsbUJBQWhCLENBQW9DTixTQUFwQyxFQUErQ0MsYUFBL0M7QUFDRCxHQUprQixDQUlqQkcsSUFKaUIsQ0FJWixJQUpZLENBQW5CO0FBS0Q7O0FBRURHLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmYsUUFEZTtBQUVmWSxVQUZlO0FBR2ZILG9DQUhlO0FBSWZJO0FBSmUsQ0FBakI7O0FBT0EsU0FBU0osZ0JBQVQsQ0FBMEJGLFNBQTFCLEVBQXFDTCxPQUFyQyxFQUE4Q0MsT0FBOUMsRUFBdURDLG1CQUF2RCxFQUE0RTtBQUMxRSxNQUFJLENBQUMsS0FBS1ksY0FBTCxDQUFvQixnQkFBcEIsQ0FBTCxFQUE0QztBQUMxQyxTQUFLQyxjQUFMLEdBQXNCLEVBQXRCO0FBQ0Q7O0FBRUQsTUFBTUEsaUJBQWlCLEtBQUtBLGNBQTVCO0FBQUEsTUFDTVQsZ0JBQWdCVSxvQkFBb0JYLFNBQXBCLEVBQStCTCxPQUEvQixFQUF3Q0MsT0FBeEMsRUFBaURDLG1CQUFqRCxDQUR0Qjs7QUFHQWEsaUJBQWVFLElBQWYsQ0FBb0JYLGFBQXBCOztBQUVBLFNBQU9BLGFBQVA7QUFDRDs7QUFFRCxTQUFTSyxtQkFBVCxDQUE2Qk4sU0FBN0IsRUFBd0NMLE9BQXhDLEVBQWlEQyxPQUFqRCxFQUEwRDtBQUN4RCxNQUFNYyxpQkFBaUIsS0FBS0EsY0FBNUI7QUFBQSxNQUNNVCxnQkFBZ0JZLGtCQUFrQkgsY0FBbEIsRUFBa0NWLFNBQWxDLEVBQTZDTCxPQUE3QyxFQUFzREMsT0FBdEQsQ0FEdEI7QUFBQSxNQUVNa0IsUUFBUUosZUFBZUssT0FBZixDQUF1QmQsYUFBdkIsQ0FGZDtBQUFBLE1BR01lLFFBQVFGLEtBSGQ7QUFBQSxNQUdzQjtBQUNoQkcsZ0JBQWMsQ0FKcEI7O0FBTUFQLGlCQUFlUSxNQUFmLENBQXNCRixLQUF0QixFQUE2QkMsV0FBN0I7O0FBRUEsTUFBSVAsZUFBZVMsTUFBZixLQUEwQixDQUE5QixFQUFpQztBQUMvQixXQUFPLEtBQUtULGNBQVo7QUFDRDs7QUFFRCxTQUFPVCxhQUFQO0FBQ0Q7O0FBRUQsU0FBU1UsbUJBQVQsQ0FBNkJYLFNBQTdCLEVBQXdDTCxPQUF4QyxFQUFpREMsT0FBakQsRUFBMERDLG1CQUExRCxFQUErRTtBQUM3RSxNQUFJSSxzQkFBSjs7QUFFQSxNQUFJSix3QkFBd0IsSUFBNUIsRUFBa0M7QUFDaENJLG9CQUFnQix1QkFBU21CLEtBQVQsRUFBZ0I7QUFDOUJ6QixjQUFRMEIsSUFBUixDQUFhekIsT0FBYixFQUFzQndCLEtBQXRCO0FBQ0QsS0FGRDtBQUdELEdBSkQsTUFJTztBQUNMbkIsb0JBQWdCLHVCQUFTbUIsS0FBVCxFQUFnQjtBQUM5QnZCLDBCQUFvQixVQUFTdUIsS0FBVCxFQUFnQjtBQUNsQ3pCLGdCQUFRMEIsSUFBUixpQkFBYXpCLE9BQWIsb0NBQXlCMEIsU0FBekI7QUFDRCxPQUZELEVBRUdGLEtBRkgsRUFFVXhCLE9BRlY7QUFHRCxLQUpEO0FBS0Q7O0FBRUQyQixTQUFPQyxNQUFQLENBQWN2QixhQUFkLEVBQTZCO0FBQzNCRCx3QkFEMkI7QUFFM0JMLG9CQUYyQjtBQUczQkM7QUFIMkIsR0FBN0I7O0FBTUEsU0FBT0ssYUFBUDtBQUNEOztBQUVELFNBQVNZLGlCQUFULENBQTJCSCxjQUEzQixFQUEyQ1YsU0FBM0MsRUFBc0RMLE9BQXRELEVBQStEQyxPQUEvRCxFQUF3RTtBQUN0RSxNQUFNSyxnQkFBZ0JTLGVBQWVlLElBQWYsQ0FBb0IsVUFBU3hCLGFBQVQsRUFBd0I7QUFDaEUsUUFBTXlCLFFBQVd6QixjQUFjTCxPQUFkLEtBQTBCQSxPQUEzQixJQUNDSyxjQUFjTixPQUFkLEtBQTBCQSxPQUQzQixJQUVDTSxjQUFjRCxTQUFkLEtBQTRCQSxTQUY3QyxDQURnRSxDQUdKOztBQUU1RCxXQUFPMEIsS0FBUDtBQUNELEdBTnFCLENBQXRCOztBQVFBLFNBQU96QixhQUFQO0FBQ0QiLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIG9uKGV2ZW50VHlwZXMsIGhhbmRsZXIsIGVsZW1lbnQgPSB0aGlzLCBpbnRlcm1lZGlhdGVIYW5kbGVyID0gbnVsbCkge1xuICBldmVudFR5cGVzID0gZXZlbnRUeXBlcy5zcGxpdCgnICcpOyAvLy9cblxuICBldmVudFR5cGVzLmZvckVhY2goZnVuY3Rpb24oZXZlbnRUeXBlKSB7XG4gICAgY29uc3QgZXZlbnRMaXN0ZW5lciA9IHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQsIGludGVybWVkaWF0ZUhhbmRsZXIpO1xuICAgIFxuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgZXZlbnRMaXN0ZW5lcik7XG4gIH0uYmluZCh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIG9mZihldmVudFR5cGVzLCBoYW5kbGVyLCBlbGVtZW50ID0gdGhpcykge1xuICBldmVudFR5cGVzID0gZXZlbnRUeXBlcy5zcGxpdCgnICcpOyAvLy9cblxuICBldmVudFR5cGVzLmZvckVhY2goZnVuY3Rpb24oZXZlbnRUeXBlKSB7XG4gICAgY29uc3QgZXZlbnRMaXN0ZW5lciA9IHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpO1xuXG4gICAgdGhpcy5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBldmVudExpc3RlbmVyKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG9uLFxuICBvZmYsXG4gIGFkZEV2ZW50TGlzdGVuZXIsXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXJcbn07XG5cbmZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50LCBpbnRlcm1lZGlhdGVIYW5kbGVyKSB7XG4gIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eSgnZXZlbnRMaXN0ZW5lcnMnKSkge1xuICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgfVxuICBcbiAgY29uc3QgZXZlbnRMaXN0ZW5lcnMgPSB0aGlzLmV2ZW50TGlzdGVuZXJzLFxuICAgICAgICBldmVudExpc3RlbmVyID0gY3JlYXRlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQsIGludGVybWVkaWF0ZUhhbmRsZXIpO1xuXG4gIGV2ZW50TGlzdGVuZXJzLnB1c2goZXZlbnRMaXN0ZW5lcik7XG5cbiAgcmV0dXJuIGV2ZW50TGlzdGVuZXI7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KSB7XG4gIGNvbnN0IGV2ZW50TGlzdGVuZXJzID0gdGhpcy5ldmVudExpc3RlbmVycyxcbiAgICAgICAgZXZlbnRMaXN0ZW5lciA9IGZpbmRFdmVudExpc3RlbmVyKGV2ZW50TGlzdGVuZXJzLCBldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpLFxuICAgICAgICBpbmRleCA9IGV2ZW50TGlzdGVuZXJzLmluZGV4T2YoZXZlbnRMaXN0ZW5lciksXG4gICAgICAgIHN0YXJ0ID0gaW5kZXgsICAvLy9cbiAgICAgICAgZGVsZXRlQ291bnQgPSAxO1xuXG4gIGV2ZW50TGlzdGVuZXJzLnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQpO1xuXG4gIGlmIChldmVudExpc3RlbmVycy5sZW5ndGggPT09IDApIHtcbiAgICBkZWxldGUgdGhpcy5ldmVudExpc3RlbmVycztcbiAgfVxuICBcbiAgcmV0dXJuIGV2ZW50TGlzdGVuZXI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50LCBpbnRlcm1lZGlhdGVIYW5kbGVyKSB7XG4gIGxldCBldmVudExpc3RlbmVyO1xuICBcbiAgaWYgKGludGVybWVkaWF0ZUhhbmRsZXIgPT09IG51bGwpIHtcbiAgICBldmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGhhbmRsZXIuY2FsbChlbGVtZW50LCBldmVudClcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgaW50ZXJtZWRpYXRlSGFuZGxlcihmdW5jdGlvbihldmVudCkge1xuICAgICAgICBoYW5kbGVyLmNhbGwoZWxlbWVudCwgLi4uYXJndW1lbnRzKTtcbiAgICAgIH0sIGV2ZW50LCBlbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICBPYmplY3QuYXNzaWduKGV2ZW50TGlzdGVuZXIsIHtcbiAgICBldmVudFR5cGUsXG4gICAgaGFuZGxlcixcbiAgICBlbGVtZW50XG4gIH0pO1xuXG4gIHJldHVybiBldmVudExpc3RlbmVyO1xufVxuXG5mdW5jdGlvbiBmaW5kRXZlbnRMaXN0ZW5lcihldmVudExpc3RlbmVycywgZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KSB7XG4gIGNvbnN0IGV2ZW50TGlzdGVuZXIgPSBldmVudExpc3RlbmVycy5maW5kKGZ1bmN0aW9uKGV2ZW50TGlzdGVuZXIpIHtcbiAgICBjb25zdCBmb3VuZCA9ICggKGV2ZW50TGlzdGVuZXIuZWxlbWVudCA9PT0gZWxlbWVudCkgJiZcbiAgICAgICAgICAgICAgICAgICAgKGV2ZW50TGlzdGVuZXIuaGFuZGxlciA9PT0gaGFuZGxlcikgJiZcbiAgICAgICAgICAgICAgICAgICAgKGV2ZW50TGlzdGVuZXIuZXZlbnRUeXBlID09PSBldmVudFR5cGUpICk7ICAvLy9cbiAgICBcbiAgICByZXR1cm4gZm91bmQ7XG4gIH0pO1xuICBcbiAgcmV0dXJuIGV2ZW50TGlzdGVuZXI7XG59XG4iXX0=