'use strict';

function on(eventTypes, handler) {
  var _this = this;

  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;
  var intermediateHandler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var eventListener = _this.addEventListener(eventType, handler, element, intermediateHandler);

    _this.domElement.addEventListener(eventType, eventListener);
  });
}

function off(eventTypes, handler) {
  var _this2 = this;

  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;

  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var eventListener = _this2.removeEventListener(eventType, handler, element);

    _this2.domElement.removeEventListener(eventType, eventListener);
  });
}

module.exports = {
  on: on,
  off: off,
  addEventListener: addEventListener,
  removeEventListener: removeEventListener
};

function addEventListener(eventType, handler, element, intermediateHandler) {
  if (!this.hasOwnProperty('eventListeners')) {
    this.eventListeners = [];
  }

  var eventListeners = this.eventListeners,
      eventListener = createEventListener(eventType, handler, element, intermediateHandler);

  eventListeners.push(eventListener);

  return eventListener;
}

function removeEventListener(eventType, handler, element) {
  var eventListeners = this.eventListeners,
      eventListener = findEventListener(eventListeners, eventType, handler, element),
      index = eventListeners.indexOf(eventListener),
      start = index,
      ///
  deleteCount = 1;

  eventListeners.splice(start, deleteCount);

  if (eventListeners.length === 0) {
    delete this.eventListeners;
  }

  return eventListener;
}

function createEventListener(eventType, handler, element, intermediateHandler) {
  var eventListener = void 0;

  if (intermediateHandler === null) {
    eventListener = function eventListener(event) {
      handler.call(element, event, element);
    };
  } else {
    eventListener = function eventListener(event) {
      intermediateHandler(handler, event, element);
    };
  }

  Object.assign(eventListener, {
    eventType: eventType,
    handler: handler,
    element: element
  });

  return eventListener;
}

function findEventListener(eventListeners, eventType, handler, element) {
  var eventListener = eventListeners.find(function (eventListener) {
    if (eventListener.eventType === eventType && eventListener.element === element && eventListener.handler === handler) {
      return true;
    }
  });

  return eventListener;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbnMvZXZlbnQuanMiXSwibmFtZXMiOlsib24iLCJldmVudFR5cGVzIiwiaGFuZGxlciIsImVsZW1lbnQiLCJpbnRlcm1lZGlhdGVIYW5kbGVyIiwic3BsaXQiLCJmb3JFYWNoIiwiZXZlbnRUeXBlIiwiZXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJkb21FbGVtZW50Iiwib2ZmIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm1vZHVsZSIsImV4cG9ydHMiLCJoYXNPd25Qcm9wZXJ0eSIsImV2ZW50TGlzdGVuZXJzIiwiY3JlYXRlRXZlbnRMaXN0ZW5lciIsInB1c2giLCJmaW5kRXZlbnRMaXN0ZW5lciIsImluZGV4IiwiaW5kZXhPZiIsInN0YXJ0IiwiZGVsZXRlQ291bnQiLCJzcGxpY2UiLCJsZW5ndGgiLCJldmVudCIsImNhbGwiLCJPYmplY3QiLCJhc3NpZ24iLCJmaW5kIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSxFQUFULENBQVlDLFVBQVosRUFBd0JDLE9BQXhCLEVBQTZFO0FBQUE7O0FBQUEsTUFBNUNDLE9BQTRDLHVFQUFsQyxJQUFrQztBQUFBLE1BQTVCQyxtQkFBNEIsdUVBQU4sSUFBTTs7QUFDM0VILGVBQWFBLFdBQVdJLEtBQVgsQ0FBaUIsR0FBakIsQ0FBYixDQUQyRSxDQUN2Qzs7QUFFcENKLGFBQVdLLE9BQVgsQ0FBbUIsVUFBQ0MsU0FBRCxFQUFlO0FBQ2hDLFFBQU1DLGdCQUFnQixNQUFLQyxnQkFBTCxDQUFzQkYsU0FBdEIsRUFBaUNMLE9BQWpDLEVBQTBDQyxPQUExQyxFQUFtREMsbUJBQW5ELENBQXRCOztBQUVBLFVBQUtNLFVBQUwsQ0FBZ0JELGdCQUFoQixDQUFpQ0YsU0FBakMsRUFBNENDLGFBQTVDO0FBQ0QsR0FKRDtBQUtEOztBQUVELFNBQVNHLEdBQVQsQ0FBYVYsVUFBYixFQUF5QkMsT0FBekIsRUFBa0Q7QUFBQTs7QUFBQSxNQUFoQkMsT0FBZ0IsdUVBQU4sSUFBTTs7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dmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gb24oZXZlbnRUeXBlcywgaGFuZGxlciwgZWxlbWVudCA9IHRoaXMsIGludGVybWVkaWF0ZUhhbmRsZXIgPSBudWxsKSB7XG4gIGV2ZW50VHlwZXMgPSBldmVudFR5cGVzLnNwbGl0KCcgJyk7IC8vL1xuXG4gIGV2ZW50VHlwZXMuZm9yRWFjaCgoZXZlbnRUeXBlKSA9PiB7XG4gICAgY29uc3QgZXZlbnRMaXN0ZW5lciA9IHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQsIGludGVybWVkaWF0ZUhhbmRsZXIpO1xuICAgIFxuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgZXZlbnRMaXN0ZW5lcik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvZmYoZXZlbnRUeXBlcywgaGFuZGxlciwgZWxlbWVudCA9IHRoaXMpIHtcbiAgZXZlbnRUeXBlcyA9IGV2ZW50VHlwZXMuc3BsaXQoJyAnKTsgLy8vXG5cbiAgZXZlbnRUeXBlcy5mb3JFYWNoKChldmVudFR5cGUpID0+IHtcbiAgICBjb25zdCBldmVudExpc3RlbmVyID0gdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCk7XG5cbiAgICB0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGV2ZW50TGlzdGVuZXIpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG9uLFxuICBvZmYsXG4gIGFkZEV2ZW50TGlzdGVuZXIsXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXJcbn07XG5cbmZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50LCBpbnRlcm1lZGlhdGVIYW5kbGVyKSB7XG4gIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eSgnZXZlbnRMaXN0ZW5lcnMnKSkge1xuICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgfVxuICBcbiAgY29uc3QgZXZlbnRMaXN0ZW5lcnMgPSB0aGlzLmV2ZW50TGlzdGVuZXJzLFxuICAgICAgICBldmVudExpc3RlbmVyID0gY3JlYXRlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQsIGludGVybWVkaWF0ZUhhbmRsZXIpO1xuXG4gIGV2ZW50TGlzdGVuZXJzLnB1c2goZXZlbnRMaXN0ZW5lcik7XG5cbiAgcmV0dXJuIGV2ZW50TGlzdGVuZXI7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KSB7XG4gIGNvbnN0IGV2ZW50TGlzdGVuZXJzID0gdGhpcy5ldmVudExpc3RlbmVycyxcbiAgICAgICAgZXZlbnRMaXN0ZW5lciA9IGZpbmRFdmVudExpc3RlbmVyKGV2ZW50TGlzdGVuZXJzLCBldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpLFxuICAgICAgICBpbmRleCA9IGV2ZW50TGlzdGVuZXJzLmluZGV4T2YoZXZlbnRMaXN0ZW5lciksXG4gICAgICAgIHN0YXJ0ID0gaW5kZXgsICAvLy9cbiAgICAgICAgZGVsZXRlQ291bnQgPSAxO1xuXG4gIGV2ZW50TGlzdGVuZXJzLnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQpO1xuXG4gIGlmIChldmVudExpc3RlbmVycy5sZW5ndGggPT09IDApIHtcbiAgICBkZWxldGUgdGhpcy5ldmVudExpc3RlbmVycztcbiAgfVxuICBcbiAgcmV0dXJuIGV2ZW50TGlzdGVuZXI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50LCBpbnRlcm1lZGlhdGVIYW5kbGVyKSB7XG4gIGxldCBldmVudExpc3RlbmVyO1xuXG4gIGlmIChpbnRlcm1lZGlhdGVIYW5kbGVyID09PSBudWxsKSB7XG4gICAgZXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBoYW5kbGVyLmNhbGwoZWxlbWVudCwgZXZlbnQsIGVsZW1lbnQpXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBldmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGludGVybWVkaWF0ZUhhbmRsZXIoaGFuZGxlciwgZXZlbnQsIGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5hc3NpZ24oZXZlbnRMaXN0ZW5lciwge1xuICAgIGV2ZW50VHlwZSxcbiAgICBoYW5kbGVyLFxuICAgIGVsZW1lbnRcbiAgfSk7XG5cbiAgcmV0dXJuIGV2ZW50TGlzdGVuZXI7XG59XG5cbmZ1bmN0aW9uIGZpbmRFdmVudExpc3RlbmVyKGV2ZW50TGlzdGVuZXJzLCBldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgY29uc3QgZXZlbnRMaXN0ZW5lciA9IGV2ZW50TGlzdGVuZXJzLmZpbmQoZnVuY3Rpb24oZXZlbnRMaXN0ZW5lcikge1xuICAgIGlmICggKGV2ZW50TGlzdGVuZXIuZXZlbnRUeXBlID09PSBldmVudFR5cGUpICYmIChldmVudExpc3RlbmVyLmVsZW1lbnQgPT09IGVsZW1lbnQpICYmIChldmVudExpc3RlbmVyLmhhbmRsZXIgPT09IGhhbmRsZXIpICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbiAgXG4gIHJldHVybiBldmVudExpc3RlbmVyO1xufVxuIl19