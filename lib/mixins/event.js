"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.on = on;
exports.off = off;
exports.addEventListener = addEventListener;
exports.removeEventListener = removeEventListener;
exports.findEventListener = findEventListener;
exports.findEventListeners = findEventListeners;

function on(eventTypes, handler, element) {
  var _this = this;

  eventTypes = eventTypes.split(" "); ///

  eventTypes.forEach(function (eventType) {
    var eventListener = _this.addEventListener(eventType, handler, element);

    _this.domElement.addEventListener(eventType, eventListener);
  });
}

function off(eventTypes, handler, element) {
  var _this2 = this;

  eventTypes = eventTypes.split(" "); ///

  eventTypes.forEach(function (eventType) {
    var eventListener = _this2.removeEventListener(eventType, handler, element);

    _this2.domElement.removeEventListener(eventType, eventListener);
  });
}

function addEventListener(eventType, handler) {
  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;

  if (!this.hasOwnProperty("eventListeners")) {
    this.eventListeners = [];
  }

  var eventListener = createEventListener(eventType, handler, element);
  this.eventListeners.push(eventListener);
  return eventListener;
}

function removeEventListener(eventType, handler) {
  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;
  var eventListener = this.findEventListener(eventType, handler, element),
      index = this.eventListeners.indexOf(eventListener),
      start = index,
      ///
  deleteCount = 1;
  this.eventListeners.splice(start, deleteCount);

  if (this.eventListeners.length === 0) {
    delete this.eventListeners;
  }

  return eventListener;
}

function findEventListener(eventTYpe, handler, element) {
  var eventListener = this.eventListeners.find(function (eventListener) {
    return eventListener.eventType === eventType && eventListener.handler === handler && eventListener.element === element;
  });
  return eventListener;
}

function findEventListeners(eventType) {
  var _this3 = this;

  var eventListeners = [];

  if (this.hasOwnProperty("eventListeners")) {
    this.eventListeners.forEach(function (eventListener) {
      if (eventListener.eventType === eventType) {
        var _eventListener = _eventListener;

        _this3.eventListeners.push(_eventListener);
      }
    });
  }

  return eventListeners;
}

function createEventListener(eventType, handler, element) {
  var eventListener;

  eventListener = function eventListener(event) {
    handler.call(element, event, element);
  };

  Object.assign(eventListener, {
    eventType: eventType,
    handler: handler,
    element: element
  });
  return eventListener;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV2ZW50LmpzIl0sIm5hbWVzIjpbIm9uIiwiZXZlbnRUeXBlcyIsImhhbmRsZXIiLCJlbGVtZW50Iiwic3BsaXQiLCJmb3JFYWNoIiwiZXZlbnRUeXBlIiwiZXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJkb21FbGVtZW50Iiwib2ZmIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImhhc093blByb3BlcnR5IiwiZXZlbnRMaXN0ZW5lcnMiLCJjcmVhdGVFdmVudExpc3RlbmVyIiwicHVzaCIsImZpbmRFdmVudExpc3RlbmVyIiwiaW5kZXgiLCJpbmRleE9mIiwic3RhcnQiLCJkZWxldGVDb3VudCIsInNwbGljZSIsImxlbmd0aCIsImV2ZW50VFlwZSIsImZpbmQiLCJmaW5kRXZlbnRMaXN0ZW5lcnMiLCJldmVudCIsImNhbGwiLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7QUFFTyxTQUFTQSxFQUFULENBQVlDLFVBQVosRUFBd0JDLE9BQXhCLEVBQWlDQyxPQUFqQyxFQUEwQztBQUFBOztBQUMvQ0YsRUFBQUEsVUFBVSxHQUFHQSxVQUFVLENBQUNHLEtBQVgsQ0FBaUIsR0FBakIsQ0FBYixDQUQrQyxDQUNYOztBQUVwQ0gsRUFBQUEsVUFBVSxDQUFDSSxPQUFYLENBQW1CLFVBQUNDLFNBQUQsRUFBZTtBQUNoQyxRQUFNQyxhQUFhLEdBQUcsS0FBSSxDQUFDQyxnQkFBTCxDQUFzQkYsU0FBdEIsRUFBaUNKLE9BQWpDLEVBQTBDQyxPQUExQyxDQUF0Qjs7QUFFQSxJQUFBLEtBQUksQ0FBQ00sVUFBTCxDQUFnQkQsZ0JBQWhCLENBQWlDRixTQUFqQyxFQUE0Q0MsYUFBNUM7QUFDRCxHQUpEO0FBS0Q7O0FBRU0sU0FBU0csR0FBVCxDQUFhVCxVQUFiLEVBQXlCQyxPQUF6QixFQUFrQ0MsT0FBbEMsRUFBMkM7QUFBQTs7QUFDaERGLEVBQUFBLFVBQVUsR0FBR0EsVUFBVSxDQUFDRyxLQUFYLENBQWlCLEdBQWpC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RkQ7O0FBSUF5QixFQUFBQSxNQUFNLENBQUNDLE1BQVAsQ0FBY3RCLGFBQWQsRUFBNkI7QUFDM0JELElBQUFBLFNBQVMsRUFBVEEsU0FEMkI7QUFFM0JKLElBQUFBLE9BQU8sRUFBUEEsT0FGMkI7QUFHM0JDLElBQUFBLE9BQU8sRUFBUEE7QUFIMkIsR0FBN0I7QUFNQSxTQUFPSSxhQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG9uKGV2ZW50VHlwZXMsIGhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgZXZlbnRUeXBlcyA9IGV2ZW50VHlwZXMuc3BsaXQoXCIgXCIpOyAvLy9cblxuICBldmVudFR5cGVzLmZvckVhY2goKGV2ZW50VHlwZSkgPT4ge1xuICAgIGNvbnN0IGV2ZW50TGlzdGVuZXIgPSB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KTtcbiAgICBcbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGV2ZW50TGlzdGVuZXIpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9mZihldmVudFR5cGVzLCBoYW5kbGVyLCBlbGVtZW50KSB7XG4gIGV2ZW50VHlwZXMgPSBldmVudFR5cGVzLnNwbGl0KFwiIFwiKTsgLy8vXG5cbiAgZXZlbnRUeXBlcy5mb3JFYWNoKChldmVudFR5cGUpID0+IHtcbiAgICBjb25zdCBldmVudExpc3RlbmVyID0gdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCk7XG5cbiAgICB0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGV2ZW50TGlzdGVuZXIpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50ID0gdGhpcykge1xuICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoXCJldmVudExpc3RlbmVyc1wiKSkge1xuICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgfVxuXG4gIGNvbnN0IGV2ZW50TGlzdGVuZXIgPSBjcmVhdGVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCk7XG5cbiAgdGhpcy5ldmVudExpc3RlbmVycy5wdXNoKGV2ZW50TGlzdGVuZXIpO1xuXG4gIHJldHVybiBldmVudExpc3RlbmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQgPSB0aGlzKSB7XG4gIGNvbnN0IGV2ZW50TGlzdGVuZXIgPSB0aGlzLmZpbmRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCksXG4gICAgICAgIGluZGV4ID0gdGhpcy5ldmVudExpc3RlbmVycy5pbmRleE9mKGV2ZW50TGlzdGVuZXIpLFxuICAgICAgICBzdGFydCA9IGluZGV4LCAgLy8vXG4gICAgICAgIGRlbGV0ZUNvdW50ID0gMTtcblxuICB0aGlzLmV2ZW50TGlzdGVuZXJzLnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQpO1xuXG4gIGlmICh0aGlzLmV2ZW50TGlzdGVuZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgIGRlbGV0ZSB0aGlzLmV2ZW50TGlzdGVuZXJzO1xuICB9XG5cbiAgcmV0dXJuIGV2ZW50TGlzdGVuZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kRXZlbnRMaXN0ZW5lcihldmVudFRZcGUsIGhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgY29uc3QgZXZlbnRMaXN0ZW5lciA9IHRoaXMuZXZlbnRMaXN0ZW5lcnMuZmluZCgoZXZlbnRMaXN0ZW5lcikgPT4gKChldmVudExpc3RlbmVyLmV2ZW50VHlwZSA9PT0gZXZlbnRUeXBlKSAmJiAoZXZlbnRMaXN0ZW5lci5oYW5kbGVyID09PSBoYW5kbGVyKSAmJiAoZXZlbnRMaXN0ZW5lci5lbGVtZW50ID09PSBlbGVtZW50KSkpO1xuXG4gIHJldHVybiBldmVudExpc3RlbmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZEV2ZW50TGlzdGVuZXJzKGV2ZW50VHlwZSkge1xuICBjb25zdCBldmVudExpc3RlbmVycyA9IFtdO1xuXG4gIGlmICh0aGlzLmhhc093blByb3BlcnR5KFwiZXZlbnRMaXN0ZW5lcnNcIikpIHtcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLmZvckVhY2goKGV2ZW50TGlzdGVuZXIpID0+IHtcbiAgICAgIGlmIChldmVudExpc3RlbmVyLmV2ZW50VHlwZSA9PT0gZXZlbnRUeXBlKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50TGlzdGVuZXIgPSBldmVudExpc3RlbmVyO1xuXG4gICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMucHVzaChldmVudExpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBldmVudExpc3RlbmVycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgbGV0IGV2ZW50TGlzdGVuZXI7XG5cbiAgZXZlbnRMaXN0ZW5lciA9IChldmVudCkgPT4ge1xuICAgIGhhbmRsZXIuY2FsbChlbGVtZW50LCBldmVudCwgZWxlbWVudClcbiAgfTtcblxuICBPYmplY3QuYXNzaWduKGV2ZW50TGlzdGVuZXIsIHtcbiAgICBldmVudFR5cGUsXG4gICAgaGFuZGxlcixcbiAgICBlbGVtZW50XG4gIH0pO1xuXG4gIHJldHVybiBldmVudExpc3RlbmVyO1xufVxuIl19