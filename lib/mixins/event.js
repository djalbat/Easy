"use strict";

function on(eventTypes, handler) {
  var _this = this;

  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;
  var intermediateHandler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  eventTypes = eventTypes.split(" "); ///

  eventTypes.forEach(function (eventType) {
    var eventListener = _this.addEventListener(eventType, handler, element, intermediateHandler);

    _this.domElement.addEventListener(eventType, eventListener);
  });
}

function off(eventTypes, handler) {
  var _this2 = this;

  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;
  eventTypes = eventTypes.split(" "); ///

  eventTypes.forEach(function (eventType) {
    var eventListener = _this2.removeEventListener(eventType, handler, element);

    _this2.domElement.removeEventListener(eventType, eventListener);
  });
}

module.exports = {
  on: on,
  off: off,
  addEventListener: addEventListener,
  removeEventListener: removeEventListener
};

function addEventListener(eventType, handler, element, intermediateHandler) {
  if (!this.hasOwnProperty("eventListeners")) {
    this.eventListeners = [];
  }

  var eventListeners = this.eventListeners,
      eventListener = createEventListener(eventType, handler, element, intermediateHandler);
  eventListeners.push(eventListener);
  return eventListener;
}

function removeEventListener(eventType, handler, element) {
  var eventListeners = this.eventListeners,
      eventListener = findEventListener(eventListeners, eventType, handler, element),
      index = eventListeners.indexOf(eventListener),
      start = index,
      ///
  deleteCount = 1;
  eventListeners.splice(start, deleteCount);

  if (eventListeners.length === 0) {
    delete this.eventListeners;
  }

  return eventListener;
}

function createEventListener(eventType, handler, element, intermediateHandler) {
  var eventListener;

  if (intermediateHandler === null) {
    eventListener = function eventListener(event) {
      handler.call(element, event, element);
    };
  } else {
    eventListener = function eventListener(event) {
      intermediateHandler(handler, event, element);
    };
  }

  Object.assign(eventListener, {
    eventType: eventType,
    handler: handler,
    element: element
  });
  return eventListener;
}

function findEventListener(eventListeners, eventType, handler, element) {
  var eventListener = eventListeners.find(function (eventListener) {
    if (eventListener.eventType === eventType && eventListener.element === element && eventListener.handler === handler) {
      return true;
    }
  });
  return eventListener;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV2ZW50LmpzIl0sIm5hbWVzIjpbIm9uIiwiZXZlbnRUeXBlcyIsImhhbmRsZXIiLCJlbGVtZW50IiwiaW50ZXJtZWRpYXRlSGFuZGxlciIsInNwbGl0IiwiZm9yRWFjaCIsImV2ZW50VHlwZSIsImV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZG9tRWxlbWVudCIsIm9mZiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiaGFzT3duUHJvcGVydHkiLCJldmVudExpc3RlbmVycyIsImNyZWF0ZUV2ZW50TGlzdGVuZXIiLCJwdXNoIiwiZmluZEV2ZW50TGlzdGVuZXIiLCJpbmRleCIsImluZGV4T2YiLCJzdGFydCIsImRlbGV0ZUNvdW50Iiwic3BsaWNlIiwibGVuZ3RoIiwiZXZlbnQiLCJjYWxsIiwiT2JqZWN0IiwiYXNzaWduIiwiZmluZCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsU0FBU0EsRUFBVCxDQUFZQyxVQUFaLEVBQXdCQyxPQUF4QixFQUE2RTtBQUFBOztBQUFBLE1BQTVDQyxPQUE0Qyx1RUFBbEMsSUFBa0M7QUFBQSxNQUE1QkMsbUJBQTRCLHVFQUFOLElBQU07QUFDM0VILEVBQUFBLFVBQVUsR0FBR0EsVUFBVSxDQUFDSSxLQUFYLENBQWlCLEdBQWpCLENBQWIsQ0FEMkUsQ0FDdkM7O0FBRXBDSixFQUFBQSxVQUFVLENBQUNLLE9BQVgsQ0FBbUIsVUFBQ0MsU0FBRCxFQUFlO0FBQ2hDLFFBQU1DLGFBQWEsR0FBRyxLQUFJLENBQUNDLGdCQUFMLENBQXNCRixTQUF0QixFQUFpQ0wsT0FBakMsRUFBMENDLE9BQTFDLEVBQW1EQyxtQkFBbkQsQ0FBdEI7O0FBRUEsSUFBQSxLQUFJLENBQUNNLFVBQUwsQ0FBZ0JELGdCQUFoQixDQUFpQ0YsU0FBakMsRUFBNENDLGFBQTVDO0FBQ0QsR0FKRDtBQUtEOztBQUVELFNBQVNHLEdBQVQsQ0FBYVYsVUFBYixFQUF5QkMsT0FBekIsRUFBa0Q7QUFBQTs7QUFB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U0FBT0ssYUFBUDtBQUNEOztBQUVELFNBQVNXLGlCQUFULENBQTJCSCxjQUEzQixFQUEyQ1QsU0FBM0MsRUFBc0RMLE9BQXRELEVBQStEQyxPQUEvRCxFQUF3RTtBQUN0RSxNQUFNSyxhQUFhLEdBQUdRLGNBQWMsQ0FBQ2MsSUFBZixDQUFvQixVQUFTdEIsYUFBVCxFQUF3QjtBQUNoRSxRQUFNQSxhQUFhLENBQUNELFNBQWQsS0FBNEJBLFNBQTdCLElBQTRDQyxhQUFhLENBQUNMLE9BQWQsS0FBMEJBLE9BQXRFLElBQW1GSyxhQUFhLENBQUNOLE9BQWQsS0FBMEJBLE9BQWxILEVBQTZIO0FBQzNILGFBQU8sSUFBUDtBQUNEO0FBQ0YsR0FKcUIsQ0FBdEI7QUFNQSxTQUFPTSxhQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gb24oZXZlbnRUeXBlcywgaGFuZGxlciwgZWxlbWVudCA9IHRoaXMsIGludGVybWVkaWF0ZUhhbmRsZXIgPSBudWxsKSB7XG4gIGV2ZW50VHlwZXMgPSBldmVudFR5cGVzLnNwbGl0KFwiIFwiKTsgLy8vXG5cbiAgZXZlbnRUeXBlcy5mb3JFYWNoKChldmVudFR5cGUpID0+IHtcbiAgICBjb25zdCBldmVudExpc3RlbmVyID0gdGhpcy5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCwgaW50ZXJtZWRpYXRlSGFuZGxlcik7XG4gICAgXG4gICAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBldmVudExpc3RlbmVyKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9mZihldmVudFR5cGVzLCBoYW5kbGVyLCBlbGVtZW50ID0gdGhpcykge1xuICBldmVudFR5cGVzID0gZXZlbnRUeXBlcy5zcGxpdChcIiBcIik7IC8vL1xuXG4gIGV2ZW50VHlwZXMuZm9yRWFjaCgoZXZlbnRUeXBlKSA9PiB7XG4gICAgY29uc3QgZXZlbnRMaXN0ZW5lciA9IHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpO1xuXG4gICAgdGhpcy5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBldmVudExpc3RlbmVyKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBvbixcbiAgb2ZmLFxuICBhZGRFdmVudExpc3RlbmVyLFxuICByZW1vdmVFdmVudExpc3RlbmVyXG59O1xuXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCwgaW50ZXJtZWRpYXRlSGFuZGxlcikge1xuICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoXCJldmVudExpc3RlbmVyc1wiKSkge1xuICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgfVxuICBcbiAgY29uc3QgZXZlbnRMaXN0ZW5lcnMgPSB0aGlzLmV2ZW50TGlzdGVuZXJzLFxuICAgICAgICBldmVudExpc3RlbmVyID0gY3JlYXRlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQsIGludGVybWVkaWF0ZUhhbmRsZXIpO1xuXG4gIGV2ZW50TGlzdGVuZXJzLnB1c2goZXZlbnRMaXN0ZW5lcik7XG5cbiAgcmV0dXJuIGV2ZW50TGlzdGVuZXI7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KSB7XG4gIGNvbnN0IGV2ZW50TGlzdGVuZXJzID0gdGhpcy5ldmVudExpc3RlbmVycyxcbiAgICAgICAgZXZlbnRMaXN0ZW5lciA9IGZpbmRFdmVudExpc3RlbmVyKGV2ZW50TGlzdGVuZXJzLCBldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpLFxuICAgICAgICBpbmRleCA9IGV2ZW50TGlzdGVuZXJzLmluZGV4T2YoZXZlbnRMaXN0ZW5lciksXG4gICAgICAgIHN0YXJ0ID0gaW5kZXgsICAvLy9cbiAgICAgICAgZGVsZXRlQ291bnQgPSAxO1xuXG4gIGV2ZW50TGlzdGVuZXJzLnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQpO1xuXG4gIGlmIChldmVudExpc3RlbmVycy5sZW5ndGggPT09IDApIHtcbiAgICBkZWxldGUgdGhpcy5ldmVudExpc3RlbmVycztcbiAgfVxuICBcbiAgcmV0dXJuIGV2ZW50TGlzdGVuZXI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50LCBpbnRlcm1lZGlhdGVIYW5kbGVyKSB7XG4gIGxldCBldmVudExpc3RlbmVyO1xuXG4gIGlmIChpbnRlcm1lZGlhdGVIYW5kbGVyID09PSBudWxsKSB7XG4gICAgZXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBoYW5kbGVyLmNhbGwoZWxlbWVudCwgZXZlbnQsIGVsZW1lbnQpXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBldmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGludGVybWVkaWF0ZUhhbmRsZXIoaGFuZGxlciwgZXZlbnQsIGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5hc3NpZ24oZXZlbnRMaXN0ZW5lciwge1xuICAgIGV2ZW50VHlwZSxcbiAgICBoYW5kbGVyLFxuICAgIGVsZW1lbnRcbiAgfSk7XG5cbiAgcmV0dXJuIGV2ZW50TGlzdGVuZXI7XG59XG5cbmZ1bmN0aW9uIGZpbmRFdmVudExpc3RlbmVyKGV2ZW50TGlzdGVuZXJzLCBldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgY29uc3QgZXZlbnRMaXN0ZW5lciA9IGV2ZW50TGlzdGVuZXJzLmZpbmQoZnVuY3Rpb24oZXZlbnRMaXN0ZW5lcikge1xuICAgIGlmICggKGV2ZW50TGlzdGVuZXIuZXZlbnRUeXBlID09PSBldmVudFR5cGUpICYmIChldmVudExpc3RlbmVyLmVsZW1lbnQgPT09IGVsZW1lbnQpICYmIChldmVudExpc3RlbmVyLmhhbmRsZXIgPT09IGhhbmRsZXIpICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbiAgXG4gIHJldHVybiBldmVudExpc3RlbmVyO1xufVxuIl19