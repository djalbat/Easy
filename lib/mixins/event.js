"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.on = on;
exports.off = off;
exports.addEventListener = addEventListener;
exports.removeEventListener = removeEventListener;

function on(eventTypes, handler) {
  var _this = this;

  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;
  var intermediateHandler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  eventTypes = eventTypes.split(" "); ///

  eventTypes.forEach(function (eventType) {
    var eventListener = _this.addEventListener(eventType, handler, element, intermediateHandler);

    _this.domElement.addEventListener(eventType, eventListener);
  });
}

function off(eventTypes, handler) {
  var _this2 = this;

  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;
  eventTypes = eventTypes.split(" "); ///

  eventTypes.forEach(function (eventType) {
    var eventListener = _this2.removeEventListener(eventType, handler, element);

    _this2.domElement.removeEventListener(eventType, eventListener);
  });
}

function addEventListener(eventType, handler, element, intermediateHandler) {
  if (!this.hasOwnProperty("eventListeners")) {
    this.eventListeners = [];
  }

  var eventListeners = this.eventListeners,
      eventListener = createEventListener(eventType, handler, element, intermediateHandler);
  eventListeners.push(eventListener);
  return eventListener;
}

function removeEventListener(eventType, handler, element) {
  var eventListeners = this.eventListeners,
      eventListener = findEventListener(eventListeners, eventType, handler, element),
      index = eventListeners.indexOf(eventListener),
      start = index,
      ///
  deleteCount = 1;
  eventListeners.splice(start, deleteCount);

  if (eventListeners.length === 0) {
    delete this.eventListeners;
  }

  return eventListener;
}

function createEventListener(eventType, handler, element, intermediateHandler) {
  var eventListener;

  if (intermediateHandler === null) {
    eventListener = function eventListener(event) {
      handler.call(element, event, element);
    };
  } else {
    eventListener = function eventListener(event) {
      intermediateHandler(handler, event, element);
    };
  }

  Object.assign(eventListener, {
    eventType: eventType,
    handler: handler,
    element: element
  });
  return eventListener;
}

function findEventListener(eventListeners, eventType, handler, element) {
  var eventListener = eventListeners.find(function (eventListener) {
    return eventListener.eventType === eventType && eventListener.element === element && eventListener.handler === handler;
  });
  return eventListener;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV2ZW50LmpzIl0sIm5hbWVzIjpbIm9uIiwiZXZlbnRUeXBlcyIsImhhbmRsZXIiLCJlbGVtZW50IiwiaW50ZXJtZWRpYXRlSGFuZGxlciIsInNwbGl0IiwiZm9yRWFjaCIsImV2ZW50VHlwZSIsImV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZG9tRWxlbWVudCIsIm9mZiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJoYXNPd25Qcm9wZXJ0eSIsImV2ZW50TGlzdGVuZXJzIiwiY3JlYXRlRXZlbnRMaXN0ZW5lciIsInB1c2giLCJmaW5kRXZlbnRMaXN0ZW5lciIsImluZGV4IiwiaW5kZXhPZiIsInN0YXJ0IiwiZGVsZXRlQ291bnQiLCJzcGxpY2UiLCJsZW5ndGgiLCJldmVudCIsImNhbGwiLCJPYmplY3QiLCJhc3NpZ24iLCJmaW5kIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQUVPLFNBQVNBLEVBQVQsQ0FBWUMsVUFBWixFQUF3QkMsT0FBeEIsRUFBNkU7QUFBQTs7QUFBQSxNQUE1Q0MsT0FBNEMsdUVBQWxDLElBQWtDO0FBQUEsTUFBNUJDLG1CQUE0Qix1RUFBTixJQUFNO0FBQ2xGSCxFQUFBQSxVQUFVLEdBQUdBLFVBQVUsQ0FBQ0ksS0FBWCxDQUFpQixHQUFqQixDQUFiLENBRGtGLENBQzlDOztBQUVwQ0osRUFBQUEsVUFBVSxDQUFDSyxPQUFYLENBQW1CLFVBQUNDLFNBQUQsRUFBZTtBQUNoQyxRQUFNQyxhQUFhLEdBQUcsS0FBSSxDQUFDQyxnQkFBTCxDQUFzQkYsU0FBdEIsRUFBaUNMLE9BQWpDLEVBQTBDQyxPQUExQyxFQUFtREMsbUJBQW5ELENBQXRCOztBQUVBLElBQUEsS0FBSSxDQUFDTSxVQUFMLENBQWdCRCxnQkFBaEIsQ0FBaUNGLFNBQWpDLEVBQTRDQyxhQUE1QztBQUNELEdBSkQ7QUFLRDs7QUFFTSxTQUFTRyxHQUFULENBQWFWLFVBQWIsRUFBeUJDLE9BQXpCLEVBQWtEO0FBQUE7O0FBQUEsTUFBaEJDLE9B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QUFDRCxTQUFkLEtBQTRCQSxTQUE3QixJQUE0Q0MsYUFBYSxDQUFDTCxPQUFkLEtBQTBCQSxPQUF0RSxJQUFtRkssYUFBYSxDQUFDTixPQUFkLEtBQTBCQSxPQUFqSTtBQUFBLEdBQXBCLENBQXRCO0FBRUEsU0FBT00sYUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBvbihldmVudFR5cGVzLCBoYW5kbGVyLCBlbGVtZW50ID0gdGhpcywgaW50ZXJtZWRpYXRlSGFuZGxlciA9IG51bGwpIHtcbiAgZXZlbnRUeXBlcyA9IGV2ZW50VHlwZXMuc3BsaXQoXCIgXCIpOyAvLy9cblxuICBldmVudFR5cGVzLmZvckVhY2goKGV2ZW50VHlwZSkgPT4ge1xuICAgIGNvbnN0IGV2ZW50TGlzdGVuZXIgPSB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50LCBpbnRlcm1lZGlhdGVIYW5kbGVyKTtcbiAgICBcbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGV2ZW50TGlzdGVuZXIpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9mZihldmVudFR5cGVzLCBoYW5kbGVyLCBlbGVtZW50ID0gdGhpcykge1xuICBldmVudFR5cGVzID0gZXZlbnRUeXBlcy5zcGxpdChcIiBcIik7IC8vL1xuXG4gIGV2ZW50VHlwZXMuZm9yRWFjaCgoZXZlbnRUeXBlKSA9PiB7XG4gICAgY29uc3QgZXZlbnRMaXN0ZW5lciA9IHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpO1xuXG4gICAgdGhpcy5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBldmVudExpc3RlbmVyKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCwgaW50ZXJtZWRpYXRlSGFuZGxlcikge1xuICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoXCJldmVudExpc3RlbmVyc1wiKSkge1xuICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgfVxuXG4gIGNvbnN0IGV2ZW50TGlzdGVuZXJzID0gdGhpcy5ldmVudExpc3RlbmVycyxcbiAgICAgICAgZXZlbnRMaXN0ZW5lciA9IGNyZWF0ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50LCBpbnRlcm1lZGlhdGVIYW5kbGVyKTtcblxuICBldmVudExpc3RlbmVycy5wdXNoKGV2ZW50TGlzdGVuZXIpO1xuXG4gIHJldHVybiBldmVudExpc3RlbmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgY29uc3QgZXZlbnRMaXN0ZW5lcnMgPSB0aGlzLmV2ZW50TGlzdGVuZXJzLFxuICAgICAgICBldmVudExpc3RlbmVyID0gZmluZEV2ZW50TGlzdGVuZXIoZXZlbnRMaXN0ZW5lcnMsIGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCksXG4gICAgICAgIGluZGV4ID0gZXZlbnRMaXN0ZW5lcnMuaW5kZXhPZihldmVudExpc3RlbmVyKSxcbiAgICAgICAgc3RhcnQgPSBpbmRleCwgIC8vL1xuICAgICAgICBkZWxldGVDb3VudCA9IDE7XG5cbiAgZXZlbnRMaXN0ZW5lcnMuc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCk7XG5cbiAgaWYgKGV2ZW50TGlzdGVuZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgIGRlbGV0ZSB0aGlzLmV2ZW50TGlzdGVuZXJzO1xuICB9XG5cbiAgcmV0dXJuIGV2ZW50TGlzdGVuZXI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50LCBpbnRlcm1lZGlhdGVIYW5kbGVyKSB7XG4gIGxldCBldmVudExpc3RlbmVyO1xuXG4gIGlmIChpbnRlcm1lZGlhdGVIYW5kbGVyID09PSBudWxsKSB7XG4gICAgZXZlbnRMaXN0ZW5lciA9IChldmVudCkgPT4ge1xuICAgICAgaGFuZGxlci5jYWxsKGVsZW1lbnQsIGV2ZW50LCBlbGVtZW50KVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZXZlbnRMaXN0ZW5lciA9IChldmVudCkgPT4ge1xuICAgICAgaW50ZXJtZWRpYXRlSGFuZGxlcihoYW5kbGVyLCBldmVudCwgZWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmFzc2lnbihldmVudExpc3RlbmVyLCB7XG4gICAgZXZlbnRUeXBlLFxuICAgIGhhbmRsZXIsXG4gICAgZWxlbWVudFxuICB9KTtcblxuICByZXR1cm4gZXZlbnRMaXN0ZW5lcjtcbn1cblxuZnVuY3Rpb24gZmluZEV2ZW50TGlzdGVuZXIoZXZlbnRMaXN0ZW5lcnMsIGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCkge1xuICBjb25zdCBldmVudExpc3RlbmVyID0gZXZlbnRMaXN0ZW5lcnMuZmluZCgoZXZlbnRMaXN0ZW5lcikgPT4gKChldmVudExpc3RlbmVyLmV2ZW50VHlwZSA9PT0gZXZlbnRUeXBlKSAmJiAoZXZlbnRMaXN0ZW5lci5lbGVtZW50ID09PSBlbGVtZW50KSAmJiAoZXZlbnRMaXN0ZW5lci5oYW5kbGVyID09PSBoYW5kbGVyKSkpO1xuICBcbiAgcmV0dXJuIGV2ZW50TGlzdGVuZXI7XG59XG4iXX0=