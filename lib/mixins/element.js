"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _array = require("../utilities/array");

var _dom = require("../utilities/dom");

function getDescendantElements() {
  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "*";
  var domNode = this.domElement,
      ///
  descendantDOMNodes = (0, _dom.descendantDOMNodesFromDOMNode)(domNode),
      descendantDOMElements = (0, _dom.filterDOMNodesBySelector)(descendantDOMNodes, selector),
      descendantElements = (0, _dom.elementsFromDOMElements)(descendantDOMElements);
  return descendantElements;
}

function getChildElements() {
  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "*";
  var childDOMNodes = this.domElement.childNodes,
      childDOMElements = (0, _dom.filterDOMNodesBySelector)(childDOMNodes, selector),
      childElements = (0, _dom.elementsFromDOMElements)(childDOMElements);
  return childElements;
}

function getParentElement() {
  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "*";
  var parentElement = null;
  var parentDOMElement = this.domElement.parentElement;

  if (parentDOMElement !== null) {
    if (parentDOMElement.matches(selector)) {
      var parentDOMElements = [parentDOMElement],
          parentElements = (0, _dom.elementsFromDOMElements)(parentDOMElements),
          firstParentElement = (0, _array.first)(parentElements);
      parentElement = firstParentElement || null;
    }
  }

  return parentElement;
}

function getAscendantElements() {
  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "*";
  var domNode = this.domElement,
      ///
  ascendantDOMNodes = (0, _dom.ascendantDOMNodesFromDOMNode)(domNode),
      ascendantDOMElements = (0, _dom.filterDOMNodesBySelector)(ascendantDOMNodes, selector),
      ascendantElements = (0, _dom.elementsFromDOMElements)(ascendantDOMElements);
  return ascendantElements;
}

function getPreviousSiblingElement() {
  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "*";
  var previousSiblingElement = null;
  var previousSiblingDOMNode = this.domElement.previousSibling; ///

  if (previousSiblingDOMNode !== null && (0, _dom.domNodeMatchesSelector)(previousSiblingDOMNode, selector)) {
    previousSiblingElement = previousSiblingDOMNode.__element__ || null;
  }

  return previousSiblingElement;
}

function getNextSiblingElement() {
  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "*";
  var nextSiblingElement = null;
  var nextSiblingDOMNode = this.domElement.nextSibling;

  if (nextSiblingDOMNode !== null && (0, _dom.domNodeMatchesSelector)(nextSiblingDOMNode, selector)) {
    nextSiblingElement = nextSiblingDOMNode.__element__ || null;
  }

  return nextSiblingElement;
}

var elementMixins = {
  getDescendantElements: getDescendantElements,
  getChildElements: getChildElements,
  getParentElement: getParentElement,
  getAscendantElements: getAscendantElements,
  getPreviousSiblingElement: getPreviousSiblingElement,
  getNextSiblingElement: getNextSiblingElement
};
var _default = elementMixins;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVsZW1lbnQuanMiXSwibmFtZXMiOlsiZ2V0RGVzY2VuZGFudEVsZW1lbnRzIiwic2VsZWN0b3IiLCJkb21Ob2RlIiwiZG9tRWxlbWVudCIsImRlc2NlbmRhbnRET01Ob2RlcyIsImRlc2NlbmRhbnRET01FbGVtZW50cyIsImRlc2NlbmRhbnRFbGVtZW50cyIsImdldENoaWxkRWxlbWVudHMiLCJjaGlsZERPTU5vZGVzIiwiY2hpbGROb2RlcyIsImNoaWxkRE9NRWxlbWVudHMiLCJjaGlsZEVsZW1lbnRzIiwiZ2V0UGFyZW50RWxlbWVudCIsInBhcmVudEVsZW1lbnQiLCJwYXJlbnRET01FbGVtZW50IiwibWF0Y2hlcyIsInBhcmVudERPTUVsZW1lbnRzIiwicGFyZW50RWxlbWVudHMiLCJmaXJzdFBhcmVudEVsZW1lbnQiLCJnZXRBc2NlbmRhbnRFbGVtZW50cyIsImFzY2VuZGFudERPTU5vZGVzIiwiYXNjZW5kYW50RE9NRWxlbWVudHMiLCJhc2NlbmRhbnRFbGVtZW50cyIsImdldFByZXZpb3VzU2libGluZ0VsZW1lbnQiLCJwcmV2aW91c1NpYmxpbmdFbGVtZW50IiwicHJldmlvdXNTaWJsaW5nRE9NTm9kZSIsInByZXZpb3VzU2libGluZyIsIl9fZWxlbWVudF9fIiwiZ2V0TmV4dFNpYmxpbmdFbGVtZW50IiwibmV4dFNpYmxpbmdFbGVtZW50IiwibmV4dFNpYmxpbmdET01Ob2RlIiwibmV4dFNpYmxpbmciLCJlbGVtZW50TWl4aW5zIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQUVBOztBQUNBOztBQUVBLFNBQVNBLHFCQUFULEdBQStDO0FBQUEsTUFBaEJDLFFBQWdCLHVFQUFMLEdBQUs7QUFDN0MsTUFBTUMsT0FBTyxHQUFHLEtBQUtDLFVBQXJCO0FBQUEsTUFBa0M7QUFDNUJDLEVBQUFBLGtCQUFrQixHQUFHLHdDQUE4QkYsT0FBOUIsQ0FEM0I7QUFBQSxNQUVNRyxxQkFBcUIsR0FBRyxtQ0FBeUJELGtCQUF6QixFQUE2Q0gsUUFBN0MsQ0FG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QkE7QUFOb0IsQ0FBdEI7ZUFTZUksYSIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBmaXJzdCB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXJyYXlcIjtcbmltcG9ydCB7IGFzY2VuZGFudERPTU5vZGVzRnJvbURPTU5vZGUsIGRlc2NlbmRhbnRET01Ob2Rlc0Zyb21ET01Ob2RlLCBkb21Ob2RlTWF0Y2hlc1NlbGVjdG9yLCBlbGVtZW50c0Zyb21ET01FbGVtZW50cywgZmlsdGVyRE9NTm9kZXNCeVNlbGVjdG9yIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9kb21cIjtcblxuZnVuY3Rpb24gZ2V0RGVzY2VuZGFudEVsZW1lbnRzKHNlbGVjdG9yID0gXCIqXCIpIHtcbiAgY29uc3QgZG9tTm9kZSA9IHRoaXMuZG9tRWxlbWVudCwgIC8vL1xuICAgICAgICBkZXNjZW5kYW50RE9NTm9kZXMgPSBkZXNjZW5kYW50RE9NTm9kZXNGcm9tRE9NTm9kZShkb21Ob2RlKSxcbiAgICAgICAgZGVzY2VuZGFudERPTUVsZW1lbnRzID0gZmlsdGVyRE9NTm9kZXNCeVNlbGVjdG9yKGRlc2NlbmRhbnRET01Ob2Rlcywgc2VsZWN0b3IpLFxuICAgICAgICBkZXNjZW5kYW50RWxlbWVudHMgPSBlbGVtZW50c0Zyb21ET01FbGVtZW50cyhkZXNjZW5kYW50RE9NRWxlbWVudHMpO1xuXG4gIHJldHVybiBkZXNjZW5kYW50RWxlbWVudHM7XG59XG5cbmZ1bmN0aW9uIGdldENoaWxkRWxlbWVudHMoc2VsZWN0b3IgPSBcIipcIikge1xuICBjb25zdCBjaGlsZERPTU5vZGVzID0gdGhpcy5kb21FbGVtZW50LmNoaWxkTm9kZXMsXG4gICAgICAgIGNoaWxkRE9NRWxlbWVudHMgPSBmaWx0ZXJET01Ob2Rlc0J5U2VsZWN0b3IoY2hpbGRET01Ob2Rlcywgc2VsZWN0b3IpLFxuICAgICAgICBjaGlsZEVsZW1lbnRzID0gZWxlbWVudHNGcm9tRE9NRWxlbWVudHMoY2hpbGRET01FbGVtZW50cyk7XG5cbiAgcmV0dXJuIGNoaWxkRWxlbWVudHM7XG59XG5cbmZ1bmN0aW9uIGdldFBhcmVudEVsZW1lbnQoc2VsZWN0b3IgPSBcIipcIikge1xuICBsZXQgcGFyZW50RWxlbWVudCA9IG51bGw7XG5cbiAgY29uc3QgcGFyZW50RE9NRWxlbWVudCA9IHRoaXMuZG9tRWxlbWVudC5wYXJlbnRFbGVtZW50O1xuXG4gIGlmIChwYXJlbnRET01FbGVtZW50ICE9PSBudWxsKSB7XG4gICAgaWYgKHBhcmVudERPTUVsZW1lbnQubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgIGNvbnN0IHBhcmVudERPTUVsZW1lbnRzID0gW3BhcmVudERPTUVsZW1lbnRdLFxuICAgICAgICAgICAgcGFyZW50RWxlbWVudHMgPSBlbGVtZW50c0Zyb21ET01FbGVtZW50cyhwYXJlbnRET01FbGVtZW50cyksXG4gICAgICAgICAgICBmaXJzdFBhcmVudEVsZW1lbnQgPSBmaXJzdChwYXJlbnRFbGVtZW50cyk7XG5cbiAgICAgIHBhcmVudEVsZW1lbnQgPSBmaXJzdFBhcmVudEVsZW1lbnQgfHwgbnVsbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFyZW50RWxlbWVudDtcbn1cblxuZnVuY3Rpb24gZ2V0QXNjZW5kYW50RWxlbWVudHMoc2VsZWN0b3IgPSBcIipcIikge1xuICBjb25zdCBkb21Ob2RlID0gdGhpcy5kb21FbGVtZW50LCAgLy8vXG4gICAgICAgIGFzY2VuZGFudERPTU5vZGVzID0gYXNjZW5kYW50RE9NTm9kZXNGcm9tRE9NTm9kZShkb21Ob2RlKSxcbiAgICAgICAgYXNjZW5kYW50RE9NRWxlbWVudHMgPSBmaWx0ZXJET01Ob2Rlc0J5U2VsZWN0b3IoYXNjZW5kYW50RE9NTm9kZXMsIHNlbGVjdG9yKSxcbiAgICAgICAgYXNjZW5kYW50RWxlbWVudHMgPSBlbGVtZW50c0Zyb21ET01FbGVtZW50cyhhc2NlbmRhbnRET01FbGVtZW50cyk7XG5cbiAgcmV0dXJuIGFzY2VuZGFudEVsZW1lbnRzO1xufVxuXG5mdW5jdGlvbiBnZXRQcmV2aW91c1NpYmxpbmdFbGVtZW50KHNlbGVjdG9yID0gXCIqXCIpIHtcbiAgbGV0IHByZXZpb3VzU2libGluZ0VsZW1lbnQgPSBudWxsO1xuXG4gIGNvbnN0IHByZXZpb3VzU2libGluZ0RPTU5vZGUgPSB0aGlzLmRvbUVsZW1lbnQucHJldmlvdXNTaWJsaW5nOyAgLy8vXG5cbiAgaWYgKChwcmV2aW91c1NpYmxpbmdET01Ob2RlICE9PSBudWxsKSAmJiBkb21Ob2RlTWF0Y2hlc1NlbGVjdG9yKHByZXZpb3VzU2libGluZ0RPTU5vZGUsIHNlbGVjdG9yKSkge1xuICAgIHByZXZpb3VzU2libGluZ0VsZW1lbnQgPSBwcmV2aW91c1NpYmxpbmdET01Ob2RlLl9fZWxlbWVudF9fIHx8IG51bGw7XG4gIH1cblxuICByZXR1cm4gcHJldmlvdXNTaWJsaW5nRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gZ2V0TmV4dFNpYmxpbmdFbGVtZW50KHNlbGVjdG9yID0gXCIqXCIpIHtcbiAgbGV0IG5leHRTaWJsaW5nRWxlbWVudCA9IG51bGw7XG5cbiAgY29uc3QgbmV4dFNpYmxpbmdET01Ob2RlID0gdGhpcy5kb21FbGVtZW50Lm5leHRTaWJsaW5nO1xuXG4gIGlmICgobmV4dFNpYmxpbmdET01Ob2RlICE9PSBudWxsKSAmJiBkb21Ob2RlTWF0Y2hlc1NlbGVjdG9yKG5leHRTaWJsaW5nRE9NTm9kZSwgc2VsZWN0b3IpKSB7XG4gICAgbmV4dFNpYmxpbmdFbGVtZW50ID0gbmV4dFNpYmxpbmdET01Ob2RlLl9fZWxlbWVudF9fIHx8IG51bGw7XG4gIH1cblxuICByZXR1cm4gbmV4dFNpYmxpbmdFbGVtZW50O1xufVxuXG5jb25zdCBlbGVtZW50TWl4aW5zID0ge1xuICBnZXREZXNjZW5kYW50RWxlbWVudHMsXG4gIGdldENoaWxkRWxlbWVudHMsXG4gIGdldFBhcmVudEVsZW1lbnQsXG4gIGdldEFzY2VuZGFudEVsZW1lbnRzLFxuICBnZXRQcmV2aW91c1NpYmxpbmdFbGVtZW50LFxuICBnZXROZXh0U2libGluZ0VsZW1lbnRcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGVsZW1lbnRNaXhpbnM7XG4iXX0=