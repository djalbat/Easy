"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _array = require("../utilities/array");
var _constants = require("../constants");
var _dom = require("../utilities/dom");
function getDescendantElements(param) {
    var selector = param === void 0 ? _constants.WILDCARD : param;
    var domNode = this.domElement, descendantDOMNodes = (0, _dom).descendantDOMNodesFromDOMNode(domNode), descendantDOMElements = (0, _dom).filterDOMNodesBySelector(descendantDOMNodes, selector), descendantElements = (0, _dom).elementsFromDOMElements(descendantDOMElements);
    return descendantElements;
}
function getChildElements(param) {
    var selector = param === void 0 ? _constants.WILDCARD : param;
    var childDOMNodes = this.domElement.childNodes, childDOMElements = (0, _dom).filterDOMNodesBySelector(childDOMNodes, selector), childElements = (0, _dom).elementsFromDOMElements(childDOMElements);
    return childElements;
}
function getParentElement(param) {
    var selector = param === void 0 ? _constants.WILDCARD : param;
    var parentElement = null;
    var parentDOMElement = this.domElement.parentElement;
    if (parentDOMElement !== null) {
        if (parentDOMElement.matches(selector)) {
            var parentDOMElements = [
                parentDOMElement
            ], parentElements = (0, _dom).elementsFromDOMElements(parentDOMElements), firstParentElement = (0, _array).first(parentElements);
            parentElement = firstParentElement || null;
        }
    }
    return parentElement;
}
function getAscendantElements(param) {
    var selector = param === void 0 ? _constants.WILDCARD : param;
    var domNode = this.domElement, ascendantDOMNodes = (0, _dom).ascendantDOMNodesFromDOMNode(domNode), ascendantDOMElements = (0, _dom).filterDOMNodesBySelector(ascendantDOMNodes, selector), ascendantElements = (0, _dom).elementsFromDOMElements(ascendantDOMElements);
    return ascendantElements;
}
function getPreviousSiblingElement(param) {
    var selector = param === void 0 ? _constants.WILDCARD : param;
    var previousSiblingElement = null;
    var previousSiblingDOMNode = this.domElement.previousSibling; ///
    if (previousSiblingDOMNode !== null && (0, _dom).domNodeMatchesSelector(previousSiblingDOMNode, selector)) {
        previousSiblingElement = previousSiblingDOMNode.__element__ || null;
    }
    return previousSiblingElement;
}
function getNextSiblingElement(param) {
    var selector = param === void 0 ? _constants.WILDCARD : param;
    var nextSiblingElement = null;
    var nextSiblingDOMNode = this.domElement.nextSibling;
    if (nextSiblingDOMNode !== null && (0, _dom).domNodeMatchesSelector(nextSiblingDOMNode, selector)) {
        nextSiblingElement = nextSiblingDOMNode.__element__ || null;
    }
    return nextSiblingElement;
}
var elementMixins = {
    getDescendantElements: getDescendantElements,
    getChildElements: getChildElements,
    getParentElement: getParentElement,
    getAscendantElements: getAscendantElements,
    getPreviousSiblingElement: getPreviousSiblingElement,
    getNextSiblingElement: getNextSiblingElement
};
var _default = elementMixins;
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvZWxlbWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgZmlyc3QgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FycmF5XCI7XG5pbXBvcnQgeyBXSUxEQ0FSRCB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IGFzY2VuZGFudERPTU5vZGVzRnJvbURPTU5vZGUsIGRlc2NlbmRhbnRET01Ob2Rlc0Zyb21ET01Ob2RlLCBkb21Ob2RlTWF0Y2hlc1NlbGVjdG9yLCBlbGVtZW50c0Zyb21ET01FbGVtZW50cywgZmlsdGVyRE9NTm9kZXNCeVNlbGVjdG9yIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9kb21cIjtcblxuZnVuY3Rpb24gZ2V0RGVzY2VuZGFudEVsZW1lbnRzKHNlbGVjdG9yID0gV0lMRENBUkQpIHtcbiAgY29uc3QgZG9tTm9kZSA9IHRoaXMuZG9tRWxlbWVudCwgIC8vL1xuICAgICAgICBkZXNjZW5kYW50RE9NTm9kZXMgPSBkZXNjZW5kYW50RE9NTm9kZXNGcm9tRE9NTm9kZShkb21Ob2RlKSxcbiAgICAgICAgZGVzY2VuZGFudERPTUVsZW1lbnRzID0gZmlsdGVyRE9NTm9kZXNCeVNlbGVjdG9yKGRlc2NlbmRhbnRET01Ob2Rlcywgc2VsZWN0b3IpLFxuICAgICAgICBkZXNjZW5kYW50RWxlbWVudHMgPSBlbGVtZW50c0Zyb21ET01FbGVtZW50cyhkZXNjZW5kYW50RE9NRWxlbWVudHMpO1xuXG4gIHJldHVybiBkZXNjZW5kYW50RWxlbWVudHM7XG59XG5cbmZ1bmN0aW9uIGdldENoaWxkRWxlbWVudHMoc2VsZWN0b3IgPSBXSUxEQ0FSRCkge1xuICBjb25zdCBjaGlsZERPTU5vZGVzID0gdGhpcy5kb21FbGVtZW50LmNoaWxkTm9kZXMsXG4gICAgICAgIGNoaWxkRE9NRWxlbWVudHMgPSBmaWx0ZXJET01Ob2Rlc0J5U2VsZWN0b3IoY2hpbGRET01Ob2Rlcywgc2VsZWN0b3IpLFxuICAgICAgICBjaGlsZEVsZW1lbnRzID0gZWxlbWVudHNGcm9tRE9NRWxlbWVudHMoY2hpbGRET01FbGVtZW50cyk7XG5cbiAgcmV0dXJuIGNoaWxkRWxlbWVudHM7XG59XG5cbmZ1bmN0aW9uIGdldFBhcmVudEVsZW1lbnQoc2VsZWN0b3IgPSBXSUxEQ0FSRCkge1xuICBsZXQgcGFyZW50RWxlbWVudCA9IG51bGw7XG5cbiAgY29uc3QgcGFyZW50RE9NRWxlbWVudCA9IHRoaXMuZG9tRWxlbWVudC5wYXJlbnRFbGVtZW50O1xuXG4gIGlmIChwYXJlbnRET01FbGVtZW50ICE9PSBudWxsKSB7XG4gICAgaWYgKHBhcmVudERPTUVsZW1lbnQubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgIGNvbnN0IHBhcmVudERPTUVsZW1lbnRzID0gW3BhcmVudERPTUVsZW1lbnRdLFxuICAgICAgICAgICAgcGFyZW50RWxlbWVudHMgPSBlbGVtZW50c0Zyb21ET01FbGVtZW50cyhwYXJlbnRET01FbGVtZW50cyksXG4gICAgICAgICAgICBmaXJzdFBhcmVudEVsZW1lbnQgPSBmaXJzdChwYXJlbnRFbGVtZW50cyk7XG5cbiAgICAgIHBhcmVudEVsZW1lbnQgPSBmaXJzdFBhcmVudEVsZW1lbnQgfHwgbnVsbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFyZW50RWxlbWVudDtcbn1cblxuZnVuY3Rpb24gZ2V0QXNjZW5kYW50RWxlbWVudHMoc2VsZWN0b3IgPSBXSUxEQ0FSRCkge1xuICBjb25zdCBkb21Ob2RlID0gdGhpcy5kb21FbGVtZW50LCAgLy8vXG4gICAgICAgIGFzY2VuZGFudERPTU5vZGVzID0gYXNjZW5kYW50RE9NTm9kZXNGcm9tRE9NTm9kZShkb21Ob2RlKSxcbiAgICAgICAgYXNjZW5kYW50RE9NRWxlbWVudHMgPSBmaWx0ZXJET01Ob2Rlc0J5U2VsZWN0b3IoYXNjZW5kYW50RE9NTm9kZXMsIHNlbGVjdG9yKSxcbiAgICAgICAgYXNjZW5kYW50RWxlbWVudHMgPSBlbGVtZW50c0Zyb21ET01FbGVtZW50cyhhc2NlbmRhbnRET01FbGVtZW50cyk7XG5cbiAgcmV0dXJuIGFzY2VuZGFudEVsZW1lbnRzO1xufVxuXG5mdW5jdGlvbiBnZXRQcmV2aW91c1NpYmxpbmdFbGVtZW50KHNlbGVjdG9yID0gV0lMRENBUkQpIHtcbiAgbGV0IHByZXZpb3VzU2libGluZ0VsZW1lbnQgPSBudWxsO1xuXG4gIGNvbnN0IHByZXZpb3VzU2libGluZ0RPTU5vZGUgPSB0aGlzLmRvbUVsZW1lbnQucHJldmlvdXNTaWJsaW5nOyAgLy8vXG5cbiAgaWYgKChwcmV2aW91c1NpYmxpbmdET01Ob2RlICE9PSBudWxsKSAmJiBkb21Ob2RlTWF0Y2hlc1NlbGVjdG9yKHByZXZpb3VzU2libGluZ0RPTU5vZGUsIHNlbGVjdG9yKSkge1xuICAgIHByZXZpb3VzU2libGluZ0VsZW1lbnQgPSBwcmV2aW91c1NpYmxpbmdET01Ob2RlLl9fZWxlbWVudF9fIHx8IG51bGw7XG4gIH1cblxuICByZXR1cm4gcHJldmlvdXNTaWJsaW5nRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gZ2V0TmV4dFNpYmxpbmdFbGVtZW50KHNlbGVjdG9yID0gV0lMRENBUkQpIHtcbiAgbGV0IG5leHRTaWJsaW5nRWxlbWVudCA9IG51bGw7XG5cbiAgY29uc3QgbmV4dFNpYmxpbmdET01Ob2RlID0gdGhpcy5kb21FbGVtZW50Lm5leHRTaWJsaW5nO1xuXG4gIGlmICgobmV4dFNpYmxpbmdET01Ob2RlICE9PSBudWxsKSAmJiBkb21Ob2RlTWF0Y2hlc1NlbGVjdG9yKG5leHRTaWJsaW5nRE9NTm9kZSwgc2VsZWN0b3IpKSB7XG4gICAgbmV4dFNpYmxpbmdFbGVtZW50ID0gbmV4dFNpYmxpbmdET01Ob2RlLl9fZWxlbWVudF9fIHx8IG51bGw7XG4gIH1cblxuICByZXR1cm4gbmV4dFNpYmxpbmdFbGVtZW50O1xufVxuXG5jb25zdCBlbGVtZW50TWl4aW5zID0ge1xuICBnZXREZXNjZW5kYW50RWxlbWVudHMsXG4gIGdldENoaWxkRWxlbWVudHMsXG4gIGdldFBhcmVudEVsZW1lbnQsXG4gIGdldEFzY2VuZGFudEVsZW1lbnRzLFxuICBnZXRQcmV2aW91c1NpYmxpbmdFbGVtZW50LFxuICBnZXROZXh0U2libGluZ0VsZW1lbnRcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGVsZW1lbnRNaXhpbnM7XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkNBQUEsVUFBWTs7Ozs7SUFFVSxNQUFvQjtJQUNqQixVQUFjO0lBQ2dILElBQWtCO1NBRWhLLHFCQUFxQixDQUFDLEtBQW1CO1FBQW5CLFFBQVEsR0FBUixLQUFtQixjQUh6QixVQUFjLFlBR1IsS0FBbUI7UUFDMUMsT0FBTyxRQUFRLFVBQVUsRUFDekIsa0JBQWtCLE9BSjZILElBQWtCLGdDQUk5RyxPQUFPLEdBQzFELHFCQUFxQixPQUwwSCxJQUFrQiwyQkFLaEgsa0JBQWtCLEVBQUUsUUFBUSxHQUM3RSxrQkFBa0IsT0FONkgsSUFBa0IsMEJBTXBILHFCQUFxQjtXQUVqRSxrQkFBa0I7O1NBR2xCLGdCQUFnQixDQUFDLEtBQW1CO1FBQW5CLFFBQVEsR0FBUixLQUFtQixjQVpwQixVQUFjLFlBWWIsS0FBbUI7UUFDckMsYUFBYSxRQUFRLFVBQVUsQ0FBQyxVQUFVLEVBQzFDLGdCQUFnQixPQWIrSCxJQUFrQiwyQkFhckgsYUFBYSxFQUFFLFFBQVEsR0FDbkUsYUFBYSxPQWRrSSxJQUFrQiwwQkFjekgsZ0JBQWdCO1dBRXZELGFBQWE7O1NBR2IsZ0JBQWdCLENBQUMsS0FBbUI7UUFBbkIsUUFBUSxHQUFSLEtBQW1CLGNBcEJwQixVQUFjLFlBb0JiLEtBQW1CO1FBQ3ZDLGFBQWEsR0FBRyxJQUFJO1FBRWxCLGdCQUFnQixRQUFRLFVBQVUsQ0FBQyxhQUFhO1FBRWxELGdCQUFnQixLQUFLLElBQUk7WUFDdkIsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFFBQVE7Z0JBQzdCLGlCQUFpQjtnQkFBSSxnQkFBZ0I7ZUFDckMsY0FBYyxPQTNCNkgsSUFBa0IsMEJBMkJwSCxpQkFBaUIsR0FDMUQsa0JBQWtCLE9BOUJSLE1BQW9CLFFBOEJILGNBQWM7WUFFL0MsYUFBYSxHQUFHLGtCQUFrQixJQUFJLElBQUk7OztXQUl2QyxhQUFhOztTQUdiLG9CQUFvQixDQUFDLEtBQW1CO1FBQW5CLFFBQVEsR0FBUixLQUFtQixjQXRDeEIsVUFBYyxZQXNDVCxLQUFtQjtRQUN6QyxPQUFPLFFBQVEsVUFBVSxFQUN6QixpQkFBaUIsT0F2QzhILElBQWtCLCtCQXVDaEgsT0FBTyxHQUN4RCxvQkFBb0IsT0F4QzJILElBQWtCLDJCQXdDakgsaUJBQWlCLEVBQUUsUUFBUSxHQUMzRSxpQkFBaUIsT0F6QzhILElBQWtCLDBCQXlDckgsb0JBQW9CO1dBRS9ELGlCQUFpQjs7U0FHakIseUJBQXlCLENBQUMsS0FBbUI7UUFBbkIsUUFBUSxHQUFSLEtBQW1CLGNBL0M3QixVQUFjLFlBK0NKLEtBQW1CO1FBQ2hELHNCQUFzQixHQUFHLElBQUk7UUFFM0Isc0JBQXNCLFFBQVEsVUFBVSxDQUFDLGVBQWUsQ0FBRyxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7UUFFL0Qsc0JBQXNCLEtBQUssSUFBSSxRQW5EaUgsSUFBa0IseUJBbUR2RyxzQkFBc0IsRUFBRSxRQUFRO1FBQzlGLHNCQUFzQixHQUFHLHNCQUFzQixDQUFDLFdBQVcsSUFBSSxJQUFJOztXQUc5RCxzQkFBc0I7O1NBR3RCLHFCQUFxQixDQUFDLEtBQW1CO1FBQW5CLFFBQVEsR0FBUixLQUFtQixjQTNEekIsVUFBYyxZQTJEUixLQUFtQjtRQUM1QyxrQkFBa0IsR0FBRyxJQUFJO1FBRXZCLGtCQUFrQixRQUFRLFVBQVUsQ0FBQyxXQUFXO1FBRWpELGtCQUFrQixLQUFLLElBQUksUUEvRHFILElBQWtCLHlCQStEM0csa0JBQWtCLEVBQUUsUUFBUTtRQUN0RixrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQyxXQUFXLElBQUksSUFBSTs7V0FHdEQsa0JBQWtCOztJQUdyQixhQUFhO0lBQ2pCLHFCQUFxQixFQUFyQixxQkFBcUI7SUFDckIsZ0JBQWdCLEVBQWhCLGdCQUFnQjtJQUNoQixnQkFBZ0IsRUFBaEIsZ0JBQWdCO0lBQ2hCLG9CQUFvQixFQUFwQixvQkFBb0I7SUFDcEIseUJBQXlCLEVBQXpCLHlCQUF5QjtJQUN6QixxQkFBcUIsRUFBckIscUJBQXFCOztlQUdSLGFBQWEifQ==