'use strict';

function onResize(handler, element) {
  var intermediateHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultIntermediateResizeHandler;

  var resizeEventListeners = findResizeEventListeners(element);

  if (resizeEventListeners.length === 0) {
    addResizeObject(element);
  }

  var eventType = 'resize';

  this.addEventListener(eventType, handler, element, intermediateHandler);
}

function offResize(handler, element) {
  var eventType = 'resize';

  this.removeEventListener(eventType, handler, element);

  var resizeEventListeners = findResizeEventListeners(element);

  if (resizeEventListeners.length === 0) {
    removeResizeObject(element);
  }
}

module.exports = {
  onResize: onResize,
  offResize: offResize
};

function addResizeObject(element) {
  var resizeObject = document.createElement('object'),
      domElement = element.getDOMElement(),
      style = 'display: block; \n                 position: absolute; \n                 top: 0; \n                 left: 0; \n                 height: 100%; \n                 width: 100%; \n                 overflow: hidden; \n                 pointer-events: none; \n                 z-index: -1;',
      data = 'about:blank',
      type = 'text/html';

  resizeObject.setAttribute('style', style);
  resizeObject.data = data;
  resizeObject.type = type;

  element.__resizeObject__ = resizeObject;

  resizeObject.onload = function () {
    resizeObjectLoadHandler(element);
  };

  domElement.appendChild(resizeObject);
}

function removeResizeObject(element) {
  var domElement = element.getDOMElement(),
      resizeObject = element.__resizeObject__,
      objectWindow = resizeObject.contentDocument.defaultView; ///

  objectWindow.removeEventListener('resize', resizeEventListener);

  domElement.removeChild(resizeObject);
}

function resizeObjectLoadHandler(element) {
  var resizeObject = element.__resizeObject__,
      resizeObjectWindow = resizeObject.contentDocument.defaultView; ///

  resizeObjectWindow.addEventListener('resize', function (event) {
    var resizeEventListeners = findResizeEventListeners(element);

    resizeEventListeners.forEach(function (resizeEventListener) {
      resizeEventListener(event);
    });
  });
}

function findResizeEventListeners(element) {
  var resizeEventListeners = [];

  if (element.hasOwnProperty('eventListeners')) {
    var eventListeners = element.eventListeners; ///

    eventListeners.forEach(function (eventListener) {
      if (eventListener.eventType === 'resize') {
        var _resizeEventListener = eventListener;

        resizeEventListeners.push(_resizeEventListener);
      }
    });
  }

  return resizeEventListeners;
}

function defaultIntermediateResizeHandler(handler, event, targetElement) {
  var window = targetElement,
      ///
  width = window.getWidth(),
      height = window.getHeight();

  handler(width, height, event, targetElement);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbnMvcmVzaXplLmpzIl0sIm5hbWVzIjpbIm9uUmVzaXplIiwiaGFuZGxlciIsImVsZW1lbnQiLCJpbnRlcm1lZGlhdGVIYW5kbGVyIiwiZGVmYXVsdEludGVybWVkaWF0ZVJlc2l6ZUhhbmRsZXIiLCJyZXNpemVFdmVudExpc3RlbmVycyIsImZpbmRSZXNpemVFdmVudExpc3RlbmVycyIsImxlbmd0aCIsImFkZFJlc2l6ZU9iamVjdCIsImV2ZW50VHlwZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJvZmZSZXNpemUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlUmVzaXplT2JqZWN0IiwibW9kdWxlIiwiZXhwb3J0cyIsInJlc2l6ZU9iamVjdCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImRvbUVsZW1lbnQiLCJnZXRET01FbGVtZW50Iiwic3R5bGUiLCJkYXRhIiwidHlwZSIsInNldEF0dHJpYnV0ZSIsIl9fcmVzaXplT2JqZWN0X18iLCJvbmxvYWQiLCJyZXNpemVPYmplY3RMb2FkSGFuZGxlciIsImFwcGVuZENoaWxkIiwib2JqZWN0V2luZG93IiwiY29udGVudERvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJyZXNpemVFdmVudExpc3RlbmVyIiwicmVtb3ZlQ2hpbGQiLCJyZXNpemVPYmplY3RXaW5kb3ciLCJldmVudCIsImZvckVhY2giLCJoYXNPd25Qcm9wZXJ0eSIsImV2ZW50TGlzdGVuZXJzIiwiZXZlbnRMaXN0ZW5lciIsInB1c2giLCJ0YXJnZXRFbGVtZW50Iiwid2luZG93Iiwid2lkdGgiLCJnZXRXaWR0aCIsImhlaWdodCIsImdldEhlaWdodCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsU0FBU0EsUUFBVCxDQUFrQkMsT0FBbEIsRUFBMkJDLE9BQTNCLEVBQTRGO0FBQUEsTUFBeERDLG1CQUF3RCx1RUFBbENDLGdDQUFrQzs7QUFDMUYsTUFBTUMsdUJBQXVCQyx5QkFBeUJKLE9BQXpCLENBQTdCOztBQUVB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QUFULENBQTBDSCxPQUExQyxFQUFtRGtDLEtBQW5ELEVBQTBETSxhQUExRCxFQUF5RTtBQUN2RSxNQUFNQyxTQUFTRCxhQUFmO0FBQUEsTUFBOEI7QUFDeEJFLFVBQVFELE9BQU9FLFFBQVAsRUFEZDtBQUFBLE1BRU1DLFNBQVNILE9BQU9JLFNBQVAsRUFGZjs7QUFJQTdDLFVBQVEwQyxLQUFSLEVBQWVFLE1BQWYsRUFBdUJWLEtBQXZCLEVBQThCTSxhQUE5QjtBQUNEIiwiZmlsZSI6InJlc2l6ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gb25SZXNpemUoaGFuZGxlciwgZWxlbWVudCwgaW50ZXJtZWRpYXRlSGFuZGxlciA9IGRlZmF1bHRJbnRlcm1lZGlhdGVSZXNpemVIYW5kbGVyKSB7XG4gIGNvbnN0IHJlc2l6ZUV2ZW50TGlzdGVuZXJzID0gZmluZFJlc2l6ZUV2ZW50TGlzdGVuZXJzKGVsZW1lbnQpO1xuXG4gIGlmIChyZXNpemVFdmVudExpc3RlbmVycy5sZW5ndGggPT09IDApIHtcbiAgICBhZGRSZXNpemVPYmplY3QoZWxlbWVudCk7XG4gIH1cblxuICBjb25zdCBldmVudFR5cGUgPSAncmVzaXplJztcblxuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50LCBpbnRlcm1lZGlhdGVIYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gb2ZmUmVzaXplKGhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgY29uc3QgZXZlbnRUeXBlID0gJ3Jlc2l6ZSc7XG5cbiAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCk7XG5cbiAgY29uc3QgcmVzaXplRXZlbnRMaXN0ZW5lcnMgPSBmaW5kUmVzaXplRXZlbnRMaXN0ZW5lcnMoZWxlbWVudCk7XG4gIFxuICBpZiAocmVzaXplRXZlbnRMaXN0ZW5lcnMubGVuZ3RoID09PSAwKSB7XG4gICAgcmVtb3ZlUmVzaXplT2JqZWN0KGVsZW1lbnQpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBvblJlc2l6ZSxcbiAgb2ZmUmVzaXplXG59O1xuXG5mdW5jdGlvbiBhZGRSZXNpemVPYmplY3QoZWxlbWVudCkge1xuICBjb25zdCByZXNpemVPYmplY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvYmplY3QnKSxcbiAgICAgICAgZG9tRWxlbWVudCA9IGVsZW1lbnQuZ2V0RE9NRWxlbWVudCgpLFxuICAgICAgICBzdHlsZSA9IGBkaXNwbGF5OiBibG9jazsgXG4gICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgXG4gICAgICAgICAgICAgICAgIHRvcDogMDsgXG4gICAgICAgICAgICAgICAgIGxlZnQ6IDA7IFxuICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7IFxuICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTsgXG4gICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47IFxuICAgICAgICAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTsgXG4gICAgICAgICAgICAgICAgIHotaW5kZXg6IC0xO2AsXG4gICAgICAgIGRhdGEgPSAnYWJvdXQ6YmxhbmsnLFxuICAgICAgICB0eXBlID0gJ3RleHQvaHRtbCc7XG5cbiAgcmVzaXplT2JqZWN0LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBzdHlsZSk7XG4gIHJlc2l6ZU9iamVjdC5kYXRhID0gZGF0YTtcbiAgcmVzaXplT2JqZWN0LnR5cGUgPSB0eXBlO1xuXG4gIGVsZW1lbnQuX19yZXNpemVPYmplY3RfXyA9IHJlc2l6ZU9iamVjdDtcblxuICByZXNpemVPYmplY3Qub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgcmVzaXplT2JqZWN0TG9hZEhhbmRsZXIoZWxlbWVudClcbiAgfTtcblxuICBkb21FbGVtZW50LmFwcGVuZENoaWxkKHJlc2l6ZU9iamVjdCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVJlc2l6ZU9iamVjdChlbGVtZW50KSB7XG4gIGNvbnN0IGRvbUVsZW1lbnQgPSBlbGVtZW50LmdldERPTUVsZW1lbnQoKSxcbiAgICAgICAgcmVzaXplT2JqZWN0ID0gZWxlbWVudC5fX3Jlc2l6ZU9iamVjdF9fLFxuICAgICAgICBvYmplY3RXaW5kb3cgPSByZXNpemVPYmplY3QuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3OyAgLy8vXG5cbiAgb2JqZWN0V2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUV2ZW50TGlzdGVuZXIpO1xuXG4gIGRvbUVsZW1lbnQucmVtb3ZlQ2hpbGQocmVzaXplT2JqZWN0KTtcbn1cblxuZnVuY3Rpb24gcmVzaXplT2JqZWN0TG9hZEhhbmRsZXIoZWxlbWVudCkge1xuICBjb25zdCByZXNpemVPYmplY3QgPSBlbGVtZW50Ll9fcmVzaXplT2JqZWN0X18sXG4gICAgICAgIHJlc2l6ZU9iamVjdFdpbmRvdyA9IHJlc2l6ZU9iamVjdC5jb250ZW50RG9jdW1lbnQuZGVmYXVsdFZpZXc7ICAvLy9cblxuICByZXNpemVPYmplY3RXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBjb25zdCByZXNpemVFdmVudExpc3RlbmVycyA9IGZpbmRSZXNpemVFdmVudExpc3RlbmVycyhlbGVtZW50KTtcblxuICAgIHJlc2l6ZUV2ZW50TGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24ocmVzaXplRXZlbnRMaXN0ZW5lcil7XG4gICAgICByZXNpemVFdmVudExpc3RlbmVyKGV2ZW50KTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGZpbmRSZXNpemVFdmVudExpc3RlbmVycyhlbGVtZW50KSB7XG4gIGNvbnN0IHJlc2l6ZUV2ZW50TGlzdGVuZXJzID0gW107XG4gIFxuICBpZiAoZWxlbWVudC5oYXNPd25Qcm9wZXJ0eSgnZXZlbnRMaXN0ZW5lcnMnKSkge1xuICAgIGNvbnN0IGV2ZW50TGlzdGVuZXJzID0gZWxlbWVudC5ldmVudExpc3RlbmVyczsgIC8vL1xuXG4gICAgZXZlbnRMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbihldmVudExpc3RlbmVyKSB7XG4gICAgICBpZiAoZXZlbnRMaXN0ZW5lci5ldmVudFR5cGUgPT09ICdyZXNpemUnKSB7XG4gICAgICAgIGNvbnN0IHJlc2l6ZUV2ZW50TGlzdGVuZXIgPSBldmVudExpc3RlbmVyO1xuXG4gICAgICAgIHJlc2l6ZUV2ZW50TGlzdGVuZXJzLnB1c2gocmVzaXplRXZlbnRMaXN0ZW5lcik7XG4gICAgICB9ICAgICAgXG4gICAgfSk7XG4gIH0gIFxuICBcbiAgcmV0dXJuIHJlc2l6ZUV2ZW50TGlzdGVuZXJzO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0SW50ZXJtZWRpYXRlUmVzaXplSGFuZGxlcihoYW5kbGVyLCBldmVudCwgdGFyZ2V0RWxlbWVudCkge1xuICBjb25zdCB3aW5kb3cgPSB0YXJnZXRFbGVtZW50LCAvLy9cbiAgICAgICAgd2lkdGggPSB3aW5kb3cuZ2V0V2lkdGgoKSxcbiAgICAgICAgaGVpZ2h0ID0gd2luZG93LmdldEhlaWdodCgpO1xuXG4gIGhhbmRsZXIod2lkdGgsIGhlaWdodCwgZXZlbnQsIHRhcmdldEVsZW1lbnQpO1xufVxuIl19