'use strict';

function onResize(handler, element) {
  var intermediateHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultIntermediateResizeHandler;

  var resizeEventListeners = findResizeEventListeners(element);

  if (resizeEventListeners.length === 0) {
    addResizeObject(element);
  }

  var eventType = 'resize';

  this.addEventListener(eventType, handler, element, intermediateHandler);
}

function offResize(handler, element) {
  var eventType = 'resize';

  this.removeEventListener(eventType, handler, element);

  var resizeEventListeners = findResizeEventListeners(element);

  if (resizeEventListeners.length === 0) {
    removeResizeObject(element);
  }
}

module.exports = {
  onResize: onResize,
  offResize: offResize
};

function addResizeObject(element) {
  var resizeObject = document.createElement('object'),
      domElement = element.getDOMElement(),
      style = 'display: block; \n                 position: absolute; \n                 top: 0; \n                 left: 0; \n                 height: 100%; \n                 width: 100%; \n                 overflow: hidden; \n                 pointer-events: none; \n                 z-index: -1;',
      data = 'about:blank',
      type = 'text/html';

  resizeObject.setAttribute('style', style);
  resizeObject.data = data;
  resizeObject.type = type;

  element.__resizeObject__ = resizeObject;

  resizeObject.onload = function () {
    resizeObjectLoadHandler(element);
  };

  domElement.appendChild(resizeObject);
}

function removeResizeObject(element) {
  var domElement = element.getDOMElement(),
      resizeObject = element.__resizeObject__,
      objectWindow = resizeObject.contentDocument.defaultView; ///

  objectWindow.removeEventListener('resize', resizeEventListener);

  domElement.removeChild(resizeObject);
}

function resizeObjectLoadHandler(element) {
  var resizeObject = element.__resizeObject__,
      resizeObjectWindow = resizeObject.contentDocument.defaultView; ///

  resizeObjectWindow.addEventListener('resize', function (event) {
    var resizeEventListeners = findResizeEventListeners(element);

    resizeEventListeners.forEach(function (resizeEventListener) {
      resizeEventListener(event);
    });
  });
}

function findResizeEventListeners(element) {
  var resizeEventListeners = [];

  if (element.hasOwnProperty('eventListeners')) {
    var eventListeners = element.eventListeners; ///

    eventListeners.forEach(function (eventListener) {
      if (eventListener.eventType === 'resize') {
        var _resizeEventListener = eventListener;

        resizeEventListeners.push(_resizeEventListener);
      }
    });
  }

  return resizeEventListeners;
}

function defaultIntermediateResizeHandler(handler, event, element) {
  var window = element,
      ///
  width = window.getWidth(),
      height = window.getHeight();

  handler.apply(element, width, height, event);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbnMvcmVzaXplLmpzIl0sIm5hbWVzIjpbIm9uUmVzaXplIiwiaGFuZGxlciIsImVsZW1lbnQiLCJpbnRlcm1lZGlhdGVIYW5kbGVyIiwiZGVmYXVsdEludGVybWVkaWF0ZVJlc2l6ZUhhbmRsZXIiLCJyZXNpemVFdmVudExpc3RlbmVycyIsImZpbmRSZXNpemVFdmVudExpc3RlbmVycyIsImxlbmd0aCIsImFkZFJlc2l6ZU9iamVjdCIsImV2ZW50VHlwZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJvZmZSZXNpemUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlUmVzaXplT2JqZWN0IiwibW9kdWxlIiwiZXhwb3J0cyIsInJlc2l6ZU9iamVjdCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImRvbUVsZW1lbnQiLCJnZXRET01FbGVtZW50Iiwic3R5bGUiLCJkYXRhIiwidHlwZSIsInNldEF0dHJpYnV0ZSIsIl9fcmVzaXplT2JqZWN0X18iLCJvbmxvYWQiLCJyZXNpemVPYmplY3RMb2FkSGFuZGxlciIsImFwcGVuZENoaWxkIiwib2JqZWN0V2luZG93IiwiY29udGVudERvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJyZXNpemVFdmVudExpc3RlbmVyIiwicmVtb3ZlQ2hpbGQiLCJyZXNpemVPYmplY3RXaW5kb3ciLCJldmVudCIsImZvckVhY2giLCJoYXNPd25Qcm9wZXJ0eSIsImV2ZW50TGlzdGVuZXJzIiwiZXZlbnRMaXN0ZW5lciIsInB1c2giLCJ3aW5kb3ciLCJ3aWR0aCIsImdldFdpZHRoIiwiaGVpZ2h0IiwiZ2V0SGVpZ2h0IiwiYXBwbHkiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFNBQVNBLFFBQVQsQ0FBa0JDLE9BQWxCLEVBQTJCQyxPQUEzQixFQUE0RjtBQUFBLE1BQXhEQyxtQkFBd0QsdUVBQWxDQyxnQ0FBa0M7O0FBQzFGLE1BQU1DLHVCQUF1QkMseUJBQXlCSixPQUF6QixDQUE3Qjs7QUFFQSxNQUFJRyxx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Q0gsT0FBMUMsRUFBbURrQyxLQUFuRCxFQUEwRGpDLE9BQTFELEVBQW1FO0FBQ2pFLE1BQU11QyxTQUFTdkMsT0FBZjtBQUFBLE1BQXdCO0FBQ2xCd0MsVUFBUUQsT0FBT0UsUUFBUCxFQURkO0FBQUEsTUFFTUMsU0FBU0gsT0FBT0ksU0FBUCxFQUZmOztBQUlBNUMsVUFBUTZDLEtBQVIsQ0FBYzVDLE9BQWQsRUFBdUJ3QyxLQUF2QixFQUE4QkUsTUFBOUIsRUFBc0NULEtBQXRDO0FBQ0QiLCJmaWxlIjoicmVzaXplLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBvblJlc2l6ZShoYW5kbGVyLCBlbGVtZW50LCBpbnRlcm1lZGlhdGVIYW5kbGVyID0gZGVmYXVsdEludGVybWVkaWF0ZVJlc2l6ZUhhbmRsZXIpIHtcbiAgY29uc3QgcmVzaXplRXZlbnRMaXN0ZW5lcnMgPSBmaW5kUmVzaXplRXZlbnRMaXN0ZW5lcnMoZWxlbWVudCk7XG5cbiAgaWYgKHJlc2l6ZUV2ZW50TGlzdGVuZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgIGFkZFJlc2l6ZU9iamVjdChlbGVtZW50KTtcbiAgfVxuXG4gIGNvbnN0IGV2ZW50VHlwZSA9ICdyZXNpemUnO1xuXG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQsIGludGVybWVkaWF0ZUhhbmRsZXIpO1xufVxuXG5mdW5jdGlvbiBvZmZSZXNpemUoaGFuZGxlciwgZWxlbWVudCkge1xuICBjb25zdCBldmVudFR5cGUgPSAncmVzaXplJztcblxuICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KTtcblxuICBjb25zdCByZXNpemVFdmVudExpc3RlbmVycyA9IGZpbmRSZXNpemVFdmVudExpc3RlbmVycyhlbGVtZW50KTtcbiAgXG4gIGlmIChyZXNpemVFdmVudExpc3RlbmVycy5sZW5ndGggPT09IDApIHtcbiAgICByZW1vdmVSZXNpemVPYmplY3QoZWxlbWVudCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG9uUmVzaXplLFxuICBvZmZSZXNpemVcbn07XG5cbmZ1bmN0aW9uIGFkZFJlc2l6ZU9iamVjdChlbGVtZW50KSB7XG4gIGNvbnN0IHJlc2l6ZU9iamVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29iamVjdCcpLFxuICAgICAgICBkb21FbGVtZW50ID0gZWxlbWVudC5nZXRET01FbGVtZW50KCksXG4gICAgICAgIHN0eWxlID0gYGRpc3BsYXk6IGJsb2NrOyBcbiAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOyBcbiAgICAgICAgICAgICAgICAgdG9wOiAwOyBcbiAgICAgICAgICAgICAgICAgbGVmdDogMDsgXG4gICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTsgXG4gICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOyBcbiAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsgXG4gICAgICAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lOyBcbiAgICAgICAgICAgICAgICAgei1pbmRleDogLTE7YCxcbiAgICAgICAgZGF0YSA9ICdhYm91dDpibGFuaycsXG4gICAgICAgIHR5cGUgPSAndGV4dC9odG1sJztcblxuICByZXNpemVPYmplY3Quc2V0QXR0cmlidXRlKCdzdHlsZScsIHN0eWxlKTtcbiAgcmVzaXplT2JqZWN0LmRhdGEgPSBkYXRhO1xuICByZXNpemVPYmplY3QudHlwZSA9IHR5cGU7XG5cbiAgZWxlbWVudC5fX3Jlc2l6ZU9iamVjdF9fID0gcmVzaXplT2JqZWN0O1xuXG4gIHJlc2l6ZU9iamVjdC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXNpemVPYmplY3RMb2FkSGFuZGxlcihlbGVtZW50KVxuICB9O1xuXG4gIGRvbUVsZW1lbnQuYXBwZW5kQ2hpbGQocmVzaXplT2JqZWN0KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlUmVzaXplT2JqZWN0KGVsZW1lbnQpIHtcbiAgY29uc3QgZG9tRWxlbWVudCA9IGVsZW1lbnQuZ2V0RE9NRWxlbWVudCgpLFxuICAgICAgICByZXNpemVPYmplY3QgPSBlbGVtZW50Ll9fcmVzaXplT2JqZWN0X18sXG4gICAgICAgIG9iamVjdFdpbmRvdyA9IHJlc2l6ZU9iamVjdC5jb250ZW50RG9jdW1lbnQuZGVmYXVsdFZpZXc7ICAvLy9cblxuICBvYmplY3RXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplRXZlbnRMaXN0ZW5lcik7XG5cbiAgZG9tRWxlbWVudC5yZW1vdmVDaGlsZChyZXNpemVPYmplY3QpO1xufVxuXG5mdW5jdGlvbiByZXNpemVPYmplY3RMb2FkSGFuZGxlcihlbGVtZW50KSB7XG4gIGNvbnN0IHJlc2l6ZU9iamVjdCA9IGVsZW1lbnQuX19yZXNpemVPYmplY3RfXyxcbiAgICAgICAgcmVzaXplT2JqZWN0V2luZG93ID0gcmVzaXplT2JqZWN0LmNvbnRlbnREb2N1bWVudC5kZWZhdWx0VmlldzsgIC8vL1xuXG4gIHJlc2l6ZU9iamVjdFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmdW5jdGlvbihldmVudCkge1xuICAgIGNvbnN0IHJlc2l6ZUV2ZW50TGlzdGVuZXJzID0gZmluZFJlc2l6ZUV2ZW50TGlzdGVuZXJzKGVsZW1lbnQpO1xuXG4gICAgcmVzaXplRXZlbnRMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbihyZXNpemVFdmVudExpc3RlbmVyKXtcbiAgICAgIHJlc2l6ZUV2ZW50TGlzdGVuZXIoZXZlbnQpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZmluZFJlc2l6ZUV2ZW50TGlzdGVuZXJzKGVsZW1lbnQpIHtcbiAgY29uc3QgcmVzaXplRXZlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgXG4gIGlmIChlbGVtZW50Lmhhc093blByb3BlcnR5KCdldmVudExpc3RlbmVycycpKSB7XG4gICAgY29uc3QgZXZlbnRMaXN0ZW5lcnMgPSBlbGVtZW50LmV2ZW50TGlzdGVuZXJzOyAgLy8vXG5cbiAgICBldmVudExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIGlmIChldmVudExpc3RlbmVyLmV2ZW50VHlwZSA9PT0gJ3Jlc2l6ZScpIHtcbiAgICAgICAgY29uc3QgcmVzaXplRXZlbnRMaXN0ZW5lciA9IGV2ZW50TGlzdGVuZXI7XG5cbiAgICAgICAgcmVzaXplRXZlbnRMaXN0ZW5lcnMucHVzaChyZXNpemVFdmVudExpc3RlbmVyKTtcbiAgICAgIH0gICAgICBcbiAgICB9KTtcbiAgfSAgXG4gIFxuICByZXR1cm4gcmVzaXplRXZlbnRMaXN0ZW5lcnM7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRJbnRlcm1lZGlhdGVSZXNpemVIYW5kbGVyKGhhbmRsZXIsIGV2ZW50LCBlbGVtZW50KSB7XG4gIGNvbnN0IHdpbmRvdyA9IGVsZW1lbnQsIC8vL1xuICAgICAgICB3aWR0aCA9IHdpbmRvdy5nZXRXaWR0aCgpLFxuICAgICAgICBoZWlnaHQgPSB3aW5kb3cuZ2V0SGVpZ2h0KCk7XG5cbiAgaGFuZGxlci5hcHBseShlbGVtZW50LCB3aWR0aCwgaGVpZ2h0LCBldmVudCk7XG59XG4iXX0=