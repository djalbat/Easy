"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onResize = onResize;
exports.offResize = offResize;

function onResize(resizeHandler, element) {
  var resizeEventListeners = this.findEventListeners("resize");

  if (resizeEventListeners.length === 0) {
    addResizeObject(this);
  }

  this.addEventListener("resize", resizeHandler, element);
}

function offResize(resizeHandler, element) {
  this.removeEventListener("resize", resizeHandler, element);
  var resizeEventListeners = this.findEventListeners("resize");

  if (resizeEventListeners.length === 0) {
    removeResizeObject(this);
  }
}

function addResizeObject(element) {
  var resizeObject = document.createElement("object"),
      domElement = element.getDOMElement(),
      style = "display: block; \n                 position: absolute; \n                 top: 0; \n                 left: 0; \n                 height: 100%; \n                 width: 100%; \n                 overflow: hidden; \n                 pointer-events: none; \n                 z-index: -1;",
      data = "about:blank",
      type = "text/html";
  resizeObject.setAttribute("style", style);
  resizeObject.data = data;
  resizeObject.type = type;
  element.__resizeObject__ = resizeObject;

  resizeObject.onload = function () {
    return resizeObjectLoadHandler(element);
  };

  domElement.appendChild(resizeObject);
}

function removeResizeObject(element) {
  var domElement = element.getDOMElement(),
      resizeObject = element.__resizeObject__,
      objectWindow = resizeObject.contentDocument.defaultView; ///

  objectWindow.removeEventListener("resize", resizeEventListener);
  domElement.removeChild(resizeObject);
}

function resizeObjectLoadHandler(element) {
  var resizeObject = element.__resizeObject__,
      resizeObjectWindow = resizeObject.contentDocument.defaultView; ///

  resizeObjectWindow.addEventListener("resize", function (event) {
    var resizeEventListeners = findEventListeners(element);
    resizeEventListeners.forEach(function (resizeEventListener) {
      return resizeEventListener(event);
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc2l6ZS5qcyJdLCJuYW1lcyI6WyJvblJlc2l6ZSIsInJlc2l6ZUhhbmRsZXIiLCJlbGVtZW50IiwicmVzaXplRXZlbnRMaXN0ZW5lcnMiLCJmaW5kRXZlbnRMaXN0ZW5lcnMiLCJsZW5ndGgiLCJhZGRSZXNpemVPYmplY3QiLCJhZGRFdmVudExpc3RlbmVyIiwib2ZmUmVzaXplIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbW92ZVJlc2l6ZU9iamVjdCIsInJlc2l6ZU9iamVjdCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImRvbUVsZW1lbnQiLCJnZXRET01FbGVtZW50Iiwic3R5bGUiLCJkYXRhIiwidHlwZSIsInNldEF0dHJpYnV0ZSIsIl9fcmVzaXplT2JqZWN0X18iLCJvbmxvYWQiLCJyZXNpemVPYmplY3RMb2FkSGFuZGxlciIsImFwcGVuZENoaWxkIiwib2JqZWN0V2luZG93IiwiY29udGVudERvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJyZXNpemVFdmVudExpc3RlbmVyIiwicmVtb3ZlQ2hpbGQiLCJyZXNpemVPYmplY3RXaW5kb3ciLCJldmVudCIsImZvckVhY2giXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVPLFNBQVNBLFFBQVQsQ0FBa0JDLGFBQWxCLEVBQWlDQyxPQUFqQyxFQUEwQztBQUMvQyxNQUFNQyxvQkFBb0IsR0FBRyxLQUFLQyxrQkFBTCxDQUF3QixRQUF4QixDQUE3Qjs7QUFFQSxNQUFJRCxvQkFBb0IsQ0FBQ0UsTUFBckIsS0FBZ0MsQ0FBcEMsRUFBdUM7QUFDckNDLElBQUFBLGVBQWUsQ0FBQyxJQUFELENBQWY7QUFDRDs7QUFFRCxPQUFLQyxnQkFBTCxDQUFzQixRQUF0QixFQUFnQ04sYUFBaEMsRUFBK0NDLE9BQS9DO0FBQ0Q7O0FBRU0sU0FBU00sU0FBVCxDQUFtQlAsYUFBbkIsRUFBa0NDLE9BQWxDLEVBQTJDO0FBQ2hELE9BQUtPLG1CQUFMLENBQXlCLFFBQXpCLEVBQW1DUixhQUFuQyxFQUFrREMsT0FBbEQ7QUFFQSxNQUFNQyxvQkFBb0IsR0FBRyxLQUFLQyxrQkFBTCxDQUF3QixRQUF4QixDQUE3Qjs7QUFFQSxNQUFJRCxvQkFBb0IsQ0FBQ0UsTUFBckIsS0FBZ0MsQ0FBcEMsRUFBdUM7QUFDckNLLElBQUFBLGtCQUFrQixDQUFDLElBQUQsQ0FBbEI7QUFDRDtBQUNGOztBQUVELFNBQVNKLGVBQVQsQ0FBeUJKLE9BQXpCLEVBQWtDO0FBQ2hDLE1BQU1TLFlBQVksR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLFFBQXZCLENBQXJCO0FBQUEsTUFDTUMsVUFBVSxHQUFHWixPQUFPLENBQUNhLGFBQVIsRUFEbkI7QUFBQSxNQUVNQyxLQUFLLGlTQUZYO0FBQUEsTUFXTUMsSUFBSSxHQUFHLGFBWGI7QUFBQSxNQVlNQyxJQUFJLEdBQUcsV0FaYjtBQWNBUCxFQUFBQSxZQUFZLENBQUNRLFlBQWIsQ0FBMEIsT0FBMUIsRUFBbUNILEtBQW5DO0FBQ0FMLEVBQUFBLFlBQVksQ0FBQ00sSUFBYixHQUFvQkEsSUFBcEI7QUFDQU4sRUFBQUEsWUFBWSxDQUFDTyxJQUFiLEdBQW9CQSxJQUFwQjtBQUVBaEIsRUFBQUEsT0FBTyxDQUFDa0IsZ0JBQVIsR0FBMkJULFlBQTNCOztBQUVBQSxFQUFBQSxZQUFZLENBQUNVLE1BQWIsR0FBc0I7QUFBQSxXQUFNQyx1QkFBdUIsQ0FBQ3BCLE9BQUQsQ0FBN0I7QUFBQSxHQUF0Qjs7QUFFQVksRUFBQUEsVUFBVSxDQUFDUyxXQUFYLENBQXVCWixZQUF2QjtBQUNEOztBQUVELFNBQVNELGtCQUFULENBQTRCUixPQUE1QixFQUFxQztBQUNuQyxNQUFNWSxVQUFVLEdBQUdaLE9BQU8sQ0FBQ2EsYUFBUixFQUFuQjtBQUFBLE1BQ01KLFlBQVksR0FBR1QsT0FBTyxDQUFDa0IsZ0JBRDdCO0FBQUEsTUFFTUksWUFBWSxHQUFHYixZQUFZLENBQUNjLGVBQWIsQ0FBNkJDLFdBRmxELENBRG1DLENBRzZCOztBQUVoRUYsRUFBQUEsWUFBWSxDQUFDZixtQkFBYixDQUFpQyxRQUFqQyxFQUEyQ2tCLG1CQUEzQztBQUVBYixFQUFBQSxVQUFVLENBQUNjLFdBQVgsQ0FBdUJqQixZQUF2QjtBQUNEOztBQUVELFNBQVNXLHVCQUFULENBQWlDcEIsT0FBakMsRUFBMEM7QUFDeEMsTUFBTVMsWUFBWSxHQUFHVCxPQUFPLENBQUNrQixnQkFBN0I7QUFBQSxNQUNNUyxrQkFBa0IsR0FBR2xCLFlBQVksQ0FBQ2MsZUFBYixDQUE2QkMsV0FEeEQsQ0FEd0MsQ0FFOEI7O0FBRXRFRyxFQUFBQSxrQkFBa0IsQ0FBQ3RCLGdCQUFuQixDQUFvQyxRQUFwQyxFQUE4QyxVQUFDdUIsS0FBRCxFQUFXO0FBQ3ZELFFBQU0zQixvQkFBb0IsR0FBR0Msa0JBQWtCLENBQUNGLE9BQUQsQ0FBL0M7QUFFQUMsSUFBQUEsb0JBQW9CLENBQUM0QixPQUFyQixDQUE2QixVQUFDSixtQkFBRDtBQUFBLGFBQXlCQSxtQkFBbUIsQ0FBQ0csS0FBRCxDQUE1QztBQUFBLEtBQTdCO0FBQ0QsR0FKRDtBQUtEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBvblJlc2l6ZShyZXNpemVIYW5kbGVyLCBlbGVtZW50KSB7XG4gIGNvbnN0IHJlc2l6ZUV2ZW50TGlzdGVuZXJzID0gdGhpcy5maW5kRXZlbnRMaXN0ZW5lcnMoXCJyZXNpemVcIik7XG5cbiAgaWYgKHJlc2l6ZUV2ZW50TGlzdGVuZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgIGFkZFJlc2l6ZU9iamVjdCh0aGlzKTtcbiAgfVxuXG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCByZXNpemVIYW5kbGVyLCBlbGVtZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9mZlJlc2l6ZShyZXNpemVIYW5kbGVyLCBlbGVtZW50KSB7XG4gIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCByZXNpemVIYW5kbGVyLCBlbGVtZW50KTtcblxuICBjb25zdCByZXNpemVFdmVudExpc3RlbmVycyA9IHRoaXMuZmluZEV2ZW50TGlzdGVuZXJzKFwicmVzaXplXCIpO1xuICBcbiAgaWYgKHJlc2l6ZUV2ZW50TGlzdGVuZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJlbW92ZVJlc2l6ZU9iamVjdCh0aGlzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRSZXNpemVPYmplY3QoZWxlbWVudCkge1xuICBjb25zdCByZXNpemVPYmplY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib2JqZWN0XCIpLFxuICAgICAgICBkb21FbGVtZW50ID0gZWxlbWVudC5nZXRET01FbGVtZW50KCksXG4gICAgICAgIHN0eWxlID0gYGRpc3BsYXk6IGJsb2NrOyBcbiAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOyBcbiAgICAgICAgICAgICAgICAgdG9wOiAwOyBcbiAgICAgICAgICAgICAgICAgbGVmdDogMDsgXG4gICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTsgXG4gICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOyBcbiAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsgXG4gICAgICAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lOyBcbiAgICAgICAgICAgICAgICAgei1pbmRleDogLTE7YCxcbiAgICAgICAgZGF0YSA9IFwiYWJvdXQ6YmxhbmtcIixcbiAgICAgICAgdHlwZSA9IFwidGV4dC9odG1sXCI7XG5cbiAgcmVzaXplT2JqZWN0LnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIHN0eWxlKTtcbiAgcmVzaXplT2JqZWN0LmRhdGEgPSBkYXRhO1xuICByZXNpemVPYmplY3QudHlwZSA9IHR5cGU7XG5cbiAgZWxlbWVudC5fX3Jlc2l6ZU9iamVjdF9fID0gcmVzaXplT2JqZWN0O1xuXG4gIHJlc2l6ZU9iamVjdC5vbmxvYWQgPSAoKSA9PiByZXNpemVPYmplY3RMb2FkSGFuZGxlcihlbGVtZW50KTtcblxuICBkb21FbGVtZW50LmFwcGVuZENoaWxkKHJlc2l6ZU9iamVjdCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVJlc2l6ZU9iamVjdChlbGVtZW50KSB7XG4gIGNvbnN0IGRvbUVsZW1lbnQgPSBlbGVtZW50LmdldERPTUVsZW1lbnQoKSxcbiAgICAgICAgcmVzaXplT2JqZWN0ID0gZWxlbWVudC5fX3Jlc2l6ZU9iamVjdF9fLFxuICAgICAgICBvYmplY3RXaW5kb3cgPSByZXNpemVPYmplY3QuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3OyAgLy8vXG5cbiAgb2JqZWN0V2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplRXZlbnRMaXN0ZW5lcik7XG5cbiAgZG9tRWxlbWVudC5yZW1vdmVDaGlsZChyZXNpemVPYmplY3QpO1xufVxuXG5mdW5jdGlvbiByZXNpemVPYmplY3RMb2FkSGFuZGxlcihlbGVtZW50KSB7XG4gIGNvbnN0IHJlc2l6ZU9iamVjdCA9IGVsZW1lbnQuX19yZXNpemVPYmplY3RfXyxcbiAgICAgICAgcmVzaXplT2JqZWN0V2luZG93ID0gcmVzaXplT2JqZWN0LmNvbnRlbnREb2N1bWVudC5kZWZhdWx0VmlldzsgIC8vL1xuXG4gIHJlc2l6ZU9iamVjdFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIChldmVudCkgPT4ge1xuICAgIGNvbnN0IHJlc2l6ZUV2ZW50TGlzdGVuZXJzID0gZmluZEV2ZW50TGlzdGVuZXJzKGVsZW1lbnQpO1xuXG4gICAgcmVzaXplRXZlbnRMaXN0ZW5lcnMuZm9yRWFjaCgocmVzaXplRXZlbnRMaXN0ZW5lcikgPT4gcmVzaXplRXZlbnRMaXN0ZW5lcihldmVudCkpO1xuICB9KTtcbn1cbiJdfQ==