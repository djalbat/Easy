"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onResize = onResize;
exports.offResize = offResize;

function onResize(resizeHandler) {
  var resizeEventListeners = findResizeEventListeners(this);

  if (resizeEventListeners.length === 0) {
    addResizeObject(this);
  }

  this.addEventListener("resize", resizeHandler);
}

function offResize(resizeHandler) {
  this.removeEventListener("resize", resizeHandler);
  var resizeEventListeners = findResizeEventListeners(this);

  if (resizeEventListeners.length === 0) {
    removeResizeObject(this);
  }
}

function addResizeObject(element) {
  var resizeObject = document.createElement("object"),
      domElement = element.getDOMElement(),
      style = "display: block; \n                 position: absolute; \n                 top: 0; \n                 left: 0; \n                 height: 100%; \n                 width: 100%; \n                 overflow: hidden; \n                 pointer-events: none; \n                 z-index: -1;",
      data = "about:blank",
      type = "text/html";
  resizeObject.setAttribute("style", style);
  resizeObject.data = data;
  resizeObject.type = type;
  element.__resizeObject__ = resizeObject;

  resizeObject.onload = function () {
    return resizeObjectLoadHandler(element);
  };

  domElement.appendChild(resizeObject);
}

function removeResizeObject(element) {
  var domElement = element.getDOMElement(),
      resizeObject = element.__resizeObject__,
      objectWindow = resizeObject.contentDocument.defaultView; ///

  objectWindow.removeEventListener("resize", resizeEventListener);
  domElement.removeChild(resizeObject);
}

function resizeObjectLoadHandler(element) {
  var resizeObject = element.__resizeObject__,
      resizeObjectWindow = resizeObject.contentDocument.defaultView; ///

  resizeObjectWindow.addEventListener("resize", function (event) {
    var resizeEventListeners = findResizeEventListeners(element);
    resizeEventListeners.forEach(function (resizeEventListener) {
      return resizeEventListener(event);
    });
  });
}

function findResizeEventListeners(element) {
  var resizeEventListeners = [];

  if (element.hasOwnProperty("eventListeners")) {
    var eventListeners = element.eventListeners; ///

    eventListeners.forEach(function (eventListener) {
      if (eventListener.eventType === "resize") {
        var _resizeEventListener = eventListener;
        resizeEventListeners.push(_resizeEventListener);
      }
    });
  }

  return resizeEventListeners;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc2l6ZS5qcyJdLCJuYW1lcyI6WyJvblJlc2l6ZSIsInJlc2l6ZUhhbmRsZXIiLCJyZXNpemVFdmVudExpc3RlbmVycyIsImZpbmRSZXNpemVFdmVudExpc3RlbmVycyIsImxlbmd0aCIsImFkZFJlc2l6ZU9iamVjdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJvZmZSZXNpemUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlUmVzaXplT2JqZWN0IiwiZWxlbWVudCIsInJlc2l6ZU9iamVjdCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImRvbUVsZW1lbnQiLCJnZXRET01FbGVtZW50Iiwic3R5bGUiLCJkYXRhIiwidHlwZSIsInNldEF0dHJpYnV0ZSIsIl9fcmVzaXplT2JqZWN0X18iLCJvbmxvYWQiLCJyZXNpemVPYmplY3RMb2FkSGFuZGxlciIsImFwcGVuZENoaWxkIiwib2JqZWN0V2luZG93IiwiY29udGVudERvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJyZXNpemVFdmVudExpc3RlbmVyIiwicmVtb3ZlQ2hpbGQiLCJyZXNpemVPYmplY3RXaW5kb3ciLCJldmVudCIsImZvckVhY2giLCJoYXNPd25Qcm9wZXJ0eSIsImV2ZW50TGlzdGVuZXJzIiwiZXZlbnRMaXN0ZW5lciIsImV2ZW50VHlwZSIsInB1c2giXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVPLFNBQVNBLFFBQVQsQ0FBa0JDLGFBQWxCLEVBQWlDO0FBQ3RDLE1BQU1DLG9CQUFvQixHQUFHQyx3QkFBd0IsQ0FBQyxJQUFELENBQXJEOztBQUVBLE1BQUlELG9CQUFvQixDQUFDRSxNQUFyQixLQUFnQyxDQUFwQyxFQUF1QztBQUNyQ0MsSUFBQUEsZUFBZSxDQUFDLElBQUQsQ0FBZjtBQUNEOztBQUVELE9BQUtDLGdCQUFMLENBQXNCLFFBQXRCLEVBQWdDTCxhQUFoQztBQUNEOztBQUVNLFNBQVNNLFNBQVQsQ0FBbUJOLGFBQW5CLEVBQWtDO0FBQ3ZDLE9BQUtPLG1CQUFMLENB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UmVzaXplKHJlc2l6ZUhhbmRsZXIpIHtcbiAgY29uc3QgcmVzaXplRXZlbnRMaXN0ZW5lcnMgPSBmaW5kUmVzaXplRXZlbnRMaXN0ZW5lcnModGhpcyk7XG5cbiAgaWYgKHJlc2l6ZUV2ZW50TGlzdGVuZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgIGFkZFJlc2l6ZU9iamVjdCh0aGlzKTtcbiAgfVxuXG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCByZXNpemVIYW5kbGVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9mZlJlc2l6ZShyZXNpemVIYW5kbGVyKSB7XG4gIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCByZXNpemVIYW5kbGVyKTtcblxuICBjb25zdCByZXNpemVFdmVudExpc3RlbmVycyA9IGZpbmRSZXNpemVFdmVudExpc3RlbmVycyh0aGlzKTtcbiAgXG4gIGlmIChyZXNpemVFdmVudExpc3RlbmVycy5sZW5ndGggPT09IDApIHtcbiAgICByZW1vdmVSZXNpemVPYmplY3QodGhpcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkUmVzaXplT2JqZWN0KGVsZW1lbnQpIHtcbiAgY29uc3QgcmVzaXplT2JqZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9iamVjdFwiKSxcbiAgICAgICAgZG9tRWxlbWVudCA9IGVsZW1lbnQuZ2V0RE9NRWxlbWVudCgpLFxuICAgICAgICBzdHlsZSA9IGBkaXNwbGF5OiBibG9jazsgXG4gICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgXG4gICAgICAgICAgICAgICAgIHRvcDogMDsgXG4gICAgICAgICAgICAgICAgIGxlZnQ6IDA7IFxuICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7IFxuICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTsgXG4gICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47IFxuICAgICAgICAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTsgXG4gICAgICAgICAgICAgICAgIHotaW5kZXg6IC0xO2AsXG4gICAgICAgIGRhdGEgPSBcImFib3V0OmJsYW5rXCIsXG4gICAgICAgIHR5cGUgPSBcInRleHQvaHRtbFwiO1xuXG4gIHJlc2l6ZU9iamVjdC5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCBzdHlsZSk7XG4gIHJlc2l6ZU9iamVjdC5kYXRhID0gZGF0YTtcbiAgcmVzaXplT2JqZWN0LnR5cGUgPSB0eXBlO1xuXG4gIGVsZW1lbnQuX19yZXNpemVPYmplY3RfXyA9IHJlc2l6ZU9iamVjdDtcblxuICByZXNpemVPYmplY3Qub25sb2FkID0gKCkgPT4gcmVzaXplT2JqZWN0TG9hZEhhbmRsZXIoZWxlbWVudCk7XG5cbiAgZG9tRWxlbWVudC5hcHBlbmRDaGlsZChyZXNpemVPYmplY3QpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVSZXNpemVPYmplY3QoZWxlbWVudCkge1xuICBjb25zdCBkb21FbGVtZW50ID0gZWxlbWVudC5nZXRET01FbGVtZW50KCksXG4gICAgICAgIHJlc2l6ZU9iamVjdCA9IGVsZW1lbnQuX19yZXNpemVPYmplY3RfXyxcbiAgICAgICAgb2JqZWN0V2luZG93ID0gcmVzaXplT2JqZWN0LmNvbnRlbnREb2N1bWVudC5kZWZhdWx0VmlldzsgIC8vL1xuXG4gIG9iamVjdFdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHJlc2l6ZUV2ZW50TGlzdGVuZXIpO1xuXG4gIGRvbUVsZW1lbnQucmVtb3ZlQ2hpbGQocmVzaXplT2JqZWN0KTtcbn1cblxuZnVuY3Rpb24gcmVzaXplT2JqZWN0TG9hZEhhbmRsZXIoZWxlbWVudCkge1xuICBjb25zdCByZXNpemVPYmplY3QgPSBlbGVtZW50Ll9fcmVzaXplT2JqZWN0X18sXG4gICAgICAgIHJlc2l6ZU9iamVjdFdpbmRvdyA9IHJlc2l6ZU9iamVjdC5jb250ZW50RG9jdW1lbnQuZGVmYXVsdFZpZXc7ICAvLy9cblxuICByZXNpemVPYmplY3RXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCAoZXZlbnQpID0+IHtcbiAgICBjb25zdCByZXNpemVFdmVudExpc3RlbmVycyA9IGZpbmRSZXNpemVFdmVudExpc3RlbmVycyhlbGVtZW50KTtcblxuICAgIHJlc2l6ZUV2ZW50TGlzdGVuZXJzLmZvckVhY2goKHJlc2l6ZUV2ZW50TGlzdGVuZXIpID0+IHJlc2l6ZUV2ZW50TGlzdGVuZXIoZXZlbnQpKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGZpbmRSZXNpemVFdmVudExpc3RlbmVycyhlbGVtZW50KSB7XG4gIGNvbnN0IHJlc2l6ZUV2ZW50TGlzdGVuZXJzID0gW107XG4gIFxuICBpZiAoZWxlbWVudC5oYXNPd25Qcm9wZXJ0eShcImV2ZW50TGlzdGVuZXJzXCIpKSB7XG4gICAgY29uc3QgZXZlbnRMaXN0ZW5lcnMgPSBlbGVtZW50LmV2ZW50TGlzdGVuZXJzOyAgLy8vXG5cbiAgICBldmVudExpc3RlbmVycy5mb3JFYWNoKChldmVudExpc3RlbmVyKSA9PiB7XG4gICAgICBpZiAoZXZlbnRMaXN0ZW5lci5ldmVudFR5cGUgPT09IFwicmVzaXplXCIpIHtcbiAgICAgICAgY29uc3QgcmVzaXplRXZlbnRMaXN0ZW5lciA9IGV2ZW50TGlzdGVuZXI7XG5cbiAgICAgICAgcmVzaXplRXZlbnRMaXN0ZW5lcnMucHVzaChyZXNpemVFdmVudExpc3RlbmVyKTtcbiAgICAgIH0gICAgICBcbiAgICB9KTtcbiAgfSAgXG4gIFxuICByZXR1cm4gcmVzaXplRXZlbnRMaXN0ZW5lcnM7XG59XG4iXX0=