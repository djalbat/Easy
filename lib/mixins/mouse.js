'use strict';

function onMouseUp(handler, element) {
  var intermediateHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultIntermediateHandler;

  this.on('mouseup', handler, element, intermediateHandler);
}

function onMouseDown(handler, element) {
  var intermediateHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultIntermediateHandler;

  this.on('mousedown', handler, element, intermediateHandler);
}

function onMouseOver(handler, element) {
  var intermediateHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultIntermediateHandler;

  this.on('mouseover', handler, element, intermediateHandler);
}

function onMouseOut(handler, element) {
  var intermediateHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultIntermediateHandler;

  this.on('mouseout', handler, element, intermediateHandler);
}

function onMouseMove(handler, element) {
  var intermediateHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultIntermediateHandler;

  this.on('mousemove', handler, element, intermediateHandler);
}

function offMouseUp(handler, element) {
  this.off('mouseup', handler, element);
}

function offMouseDown(handler, element) {
  this.off('mousedown', handler, element);
}

function offMouseOver(handler, element) {
  this.off('mouseover', handler, element);
}

function offMouseOut(handler, element) {
  this.off('mouseout', handler, element);
}

function offMouseMove(handler, element) {
  this.off('mousemove', handler, element);
}

module.exports = {
  onMouseUp: onMouseUp,
  onMouseDown: onMouseDown,
  onMouseOver: onMouseOver,
  onMouseOut: onMouseOut,
  onMouseMove: onMouseMove,
  offMouseUp: offMouseUp,
  offMouseDown: offMouseDown,
  offMouseOver: offMouseOver,
  offMouseOut: offMouseOut,
  offMouseMove: offMouseMove
};

function defaultIntermediateHandler(handler, event, targetElement) {
  var mouseTop = event.pageY,
      ///
  mouseLeft = event.pageX,
      ///
  mouseButton = event.button; ///

  handler(mouseTop, mouseLeft, mouseButton, event, targetElement);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbnMvbW91c2UuanMiXSwibmFtZXMiOlsib25Nb3VzZVVwIiwiaGFuZGxlciIsImVsZW1lbnQiLCJpbnRlcm1lZGlhdGVIYW5kbGVyIiwiZGVmYXVsdEludGVybWVkaWF0ZUhhbmRsZXIiLCJvbiIsIm9uTW91c2VEb3duIiwib25Nb3VzZU92ZXIiLCJvbk1vdXNlT3V0Iiwib25Nb3VzZU1vdmUiLCJvZmZNb3VzZVVwIiwib2ZmIiwib2ZmTW91c2VEb3duIiwib2ZmTW91c2VPdmVyIiwib2ZmTW91c2VPdXQiLCJvZmZNb3VzZU1vdmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZXZlbnQiLCJ0YXJnZXRFbGVtZW50IiwibW91c2VUb3AiLCJwYWdlWSIsIm1vdXNlTGVmdCIsInBhZ2VYIiwibW91c2VCdXR0b24iLCJidXR0b24iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFNBQVNBLFNBQVQsQ0FBbUJDLE9BQW5CLEVBQTRCQyxPQUE1QixFQUF1RjtBQUFBLE1BQWxEQyxtQkFBa0QsdUVBQTVCQywwQkFBNEI7O0FBQ3JGLE9BQUtDLEVBQUwsQ0FBUSxTQUFSLEVBQW1CSixPQUFuQixFQUE0QkMsT0FBNUIsRUFBcUNDLG1CQUFyQztBQUNEOztBQUVELFNBQVNHLFdBQVQsQ0FBcUJMLE9BQXJCLEVBQThCQyxPQUE5QixFQUF5RjtBQUFBLE1BQWxEQyxtQkFBa0QsdUVBQTVCQywwQkFBNEI7O0FBQ3ZGLE9BQUtDLEVBQUwsQ0FBUSxXQUFSLEVBQXFCSixPQUFyQixFQUE4QkMsT0FBOUIsRUFBdUNDLG1CQUF2QztBQUNEOztBQUVELFNBQVNJLFdBQVQsQ0FBcUJOLE9BQXJCLEVBQThCQyxPQUE5QixFQUF5RjtBQUFBLE1BQWxEQyxtQkFBa0QsdUVBQTVCQywwQkFBNEI7O0FBQ3ZGLE9BQUtDLEVBQUwsQ0FBUSxXQUFSLEVBQXFCSixPQUFyQixFQUE4QkMsT0FBOUIsRUFBdUNDLG1CQUF2QztBQUNEOztBQUVELFNBQVNLLFVBQVQsQ0FBb0JQLE9BQXBCLEVBQTZCQyxPQUE3QixFQUF3RjtBQUFBLE1BQWxEQyxtQkFBa0QsdUVBQTVCQywwQkFBNEI7O0FBQ3RGLE9BQUtDLEVBQUwsQ0FBUSxVQUFSLEVBQW9CSixPQUFwQixFQUE2QkMsT0FBN0IsRUFBc0NDLG1CQUF0QztBQUNEOztBQUVELFNBQVNNLFdBQVQsQ0FBcUJSLE9BQXJCLEVBQThCQyxPQUE5QixFQUF5RjtBQUFBLE1BQWxEQyxtQkFBa0QsdUVBQTVCQywwQkFBNEI7O0FBQ3ZGLE9BQUtDLEVBQUwsQ0FBUSxXQUFSLEVBQXFCSixPQUFyQixFQUE4QkMsT0FBOUIsRUFBdUNDLG1CQUF2QztBQUNEOztBQUVELFNBQVNPLFVBQVQsQ0FBb0JULE9BQXBCLEVBQTZCQyxPQUE3QixFQUFzQztBQUFFLE9BQUtTLEdBQUwsQ0FBUyxTQUFULEVBQW9CVixPQUFwQixFQUE2QkMsT0FBN0I7QUFBd0M7O0FBRWhGLFNBQVNVLFlBQVQsQ0FBc0JYLE9BQXRCLEVBQStCQyxPQUEvQixFQUF3QztBQUFFLE9BQUtTLEdBQUwsQ0FBUyxXQUFULEVBQXNCVixPQUF0QixFQUErQkMsT0FBL0I7QUFBMEM7O0FBRXBGLFNBQVNXLFlBQVQsQ0FBc0JaLE9BQXRCLEVBQStCQyxPQUEvQixFQUF3QztBQUFFLE9BQUtTLEdBQUwsQ0FBUyxXQUFULEVBQXNCVixPQUF0QixFQUErQkMsT0FBL0I7QUFBMEM7O0FBRXBGLFNBQVNZLFdBQVQsQ0FBcUJiLE9BQXJCLEVBQThCQyxPQUE5QixFQUF1QztBQUFFLE9BQUtTLEdBQUwsQ0FBUyxVQUFULEVBQXFCVixPQUFyQixFQUE4QkMsT0FBOUI7QUFBeUM7O0FBRWxGLFNBQVNhLFlBQVQsQ0FBc0JkLE9BQXRCLEVBQStCQyxPQUEvQixFQUF3QztBQUFFLE9BQUtTLEdBQUwsQ0FBUyxXQUFULEVBQXNCVixPQUF0QixFQUErQkMsT0FBL0I7QUFBMEM7O0FBRXBGYyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZqQixzQkFEZTtBQUVmTSwwQkFGZTtBQUdmQywwQkFIZTtBQUlmQyx3QkFKZTtBQUtmQywwQkFMZTtBQU1mQyx3QkFOZTtBQU9mRSw0QkFQZTtBQVFmQyw0QkFSZTtBQVNmQywwQkFUZTtBQVVmQztBQVZlLENBQWpCOztBQWFBLFNBQVNYLDBCQUFULENBQW9DSCxPQUFwQyxFQUE2Q2lCLEtBQTdDLEVBQW9EQyxhQUFwRCxFQUFtRTtBQUNqRSxNQUFNQyxXQUFXRixNQUFNRyxLQUF2QjtBQUFBLE1BQStCO0FBQ3pCQyxjQUFZSixNQUFNSyxLQUR4QjtBQUFBLE1BQytCO0FBQ3pCQyxnQkFBY04sTUFBTU8sTUFGMUIsQ0FEaUUsQ0FHL0I7O0FBRWxDeEIsVUFBUW1CLFFBQVIsRUFBa0JFLFNBQWxCLEVBQTZCRSxXQUE3QixFQUEwQ04sS0FBMUMsRUFBaURDLGFBQWpEO0FBQ0QiLCJmaWxlIjoibW91c2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIG9uTW91c2VVcChoYW5kbGVyLCBlbGVtZW50LCBpbnRlcm1lZGlhdGVIYW5kbGVyID0gZGVmYXVsdEludGVybWVkaWF0ZUhhbmRsZXIpIHtcbiAgdGhpcy5vbignbW91c2V1cCcsIGhhbmRsZXIsIGVsZW1lbnQsIGludGVybWVkaWF0ZUhhbmRsZXIpO1xufVxuXG5mdW5jdGlvbiBvbk1vdXNlRG93bihoYW5kbGVyLCBlbGVtZW50LCBpbnRlcm1lZGlhdGVIYW5kbGVyID0gZGVmYXVsdEludGVybWVkaWF0ZUhhbmRsZXIpIHtcbiAgdGhpcy5vbignbW91c2Vkb3duJywgaGFuZGxlciwgZWxlbWVudCwgaW50ZXJtZWRpYXRlSGFuZGxlcik7XG59XG5cbmZ1bmN0aW9uIG9uTW91c2VPdmVyKGhhbmRsZXIsIGVsZW1lbnQsIGludGVybWVkaWF0ZUhhbmRsZXIgPSBkZWZhdWx0SW50ZXJtZWRpYXRlSGFuZGxlcikge1xuICB0aGlzLm9uKCdtb3VzZW92ZXInLCBoYW5kbGVyLCBlbGVtZW50LCBpbnRlcm1lZGlhdGVIYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gb25Nb3VzZU91dChoYW5kbGVyLCBlbGVtZW50LCBpbnRlcm1lZGlhdGVIYW5kbGVyID0gZGVmYXVsdEludGVybWVkaWF0ZUhhbmRsZXIpIHtcbiAgdGhpcy5vbignbW91c2VvdXQnLCBoYW5kbGVyLCBlbGVtZW50LCBpbnRlcm1lZGlhdGVIYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gb25Nb3VzZU1vdmUoaGFuZGxlciwgZWxlbWVudCwgaW50ZXJtZWRpYXRlSGFuZGxlciA9IGRlZmF1bHRJbnRlcm1lZGlhdGVIYW5kbGVyKSB7XG4gIHRoaXMub24oJ21vdXNlbW92ZScsIGhhbmRsZXIsIGVsZW1lbnQsIGludGVybWVkaWF0ZUhhbmRsZXIpO1xufVxuXG5mdW5jdGlvbiBvZmZNb3VzZVVwKGhhbmRsZXIsIGVsZW1lbnQpIHsgdGhpcy5vZmYoJ21vdXNldXAnLCBoYW5kbGVyLCBlbGVtZW50KTsgfVxuXG5mdW5jdGlvbiBvZmZNb3VzZURvd24oaGFuZGxlciwgZWxlbWVudCkgeyB0aGlzLm9mZignbW91c2Vkb3duJywgaGFuZGxlciwgZWxlbWVudCk7IH1cblxuZnVuY3Rpb24gb2ZmTW91c2VPdmVyKGhhbmRsZXIsIGVsZW1lbnQpIHsgdGhpcy5vZmYoJ21vdXNlb3ZlcicsIGhhbmRsZXIsIGVsZW1lbnQpOyB9XG5cbmZ1bmN0aW9uIG9mZk1vdXNlT3V0KGhhbmRsZXIsIGVsZW1lbnQpIHsgdGhpcy5vZmYoJ21vdXNlb3V0JywgaGFuZGxlciwgZWxlbWVudCk7IH1cblxuZnVuY3Rpb24gb2ZmTW91c2VNb3ZlKGhhbmRsZXIsIGVsZW1lbnQpIHsgdGhpcy5vZmYoJ21vdXNlbW92ZScsIGhhbmRsZXIsIGVsZW1lbnQpOyB9XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBvbk1vdXNlVXAsXG4gIG9uTW91c2VEb3duLFxuICBvbk1vdXNlT3ZlcixcbiAgb25Nb3VzZU91dCxcbiAgb25Nb3VzZU1vdmUsXG4gIG9mZk1vdXNlVXAsXG4gIG9mZk1vdXNlRG93bixcbiAgb2ZmTW91c2VPdmVyLFxuICBvZmZNb3VzZU91dCxcbiAgb2ZmTW91c2VNb3ZlXG59O1xuXG5mdW5jdGlvbiBkZWZhdWx0SW50ZXJtZWRpYXRlSGFuZGxlcihoYW5kbGVyLCBldmVudCwgdGFyZ2V0RWxlbWVudCkge1xuICBjb25zdCBtb3VzZVRvcCA9IGV2ZW50LnBhZ2VZLCAgLy8vXG4gICAgICAgIG1vdXNlTGVmdCA9IGV2ZW50LnBhZ2VYLCAvLy9cbiAgICAgICAgbW91c2VCdXR0b24gPSBldmVudC5idXR0b247IC8vL1xuICBcbiAgaGFuZGxlcihtb3VzZVRvcCwgbW91c2VMZWZ0LCBtb3VzZUJ1dHRvbiwgZXZlbnQsIHRhcmdldEVsZW1lbnQpO1xufVxuIl19