'use strict';

function onMouseUp(handler, element) {
  var intermediateHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultIntermediateHandler;

  this.on('mouseup', handler, element, intermediateHandler);
}

function onMouseDown(handler, element) {
  var intermediateHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultIntermediateHandler;

  this.on('mousedown', handler, element, intermediateHandler);
}

function onMouseOver(handler, element) {
  var intermediateHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultIntermediateHandler;

  this.on('mouseover', handler, element, intermediateHandler);
}

function onMouseOut(handler, element) {
  var intermediateHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultIntermediateHandler;

  this.on('mouseout', handler, element, intermediateHandler);
}

function onMouseMove(handler, element) {
  var intermediateHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultIntermediateHandler;

  this.on('mousemove', handler, element, intermediateHandler);
}

function offMouseUp(handler, element) {
  this.off('mouseup', handler, element);
}

function offMouseDown(handler, element) {
  this.off('mousedown', handler, element);
}

function offMouseOver(handler, element) {
  this.off('mouseover', handler, element);
}

function offMouseOut(handler, element) {
  this.off('mouseout', handler, element);
}

function offMouseMove(handler, element) {
  this.off('mousemove', handler, element);
}

module.exports = {
  onMouseUp: onMouseUp,
  onMouseDown: onMouseDown,
  onMouseOver: onMouseOver,
  onMouseOut: onMouseOut,
  onMouseMove: onMouseMove,
  offMouseUp: offMouseUp,
  offMouseDown: offMouseDown,
  offMouseOver: offMouseOver,
  offMouseOut: offMouseOut,
  offMouseMove: offMouseMove
};

function defaultIntermediateHandler(handler, event, element) {
  var mouseTop = event.pageY,
      ///
  mouseLeft = event.pageX,
      ///
  mouseButton = event.button; ///

  handler.apply(element, mouseTop, mouseLeft, mouseButton, event);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbnMvbW91c2UuanMiXSwibmFtZXMiOlsib25Nb3VzZVVwIiwiaGFuZGxlciIsImVsZW1lbnQiLCJpbnRlcm1lZGlhdGVIYW5kbGVyIiwiZGVmYXVsdEludGVybWVkaWF0ZUhhbmRsZXIiLCJvbiIsIm9uTW91c2VEb3duIiwib25Nb3VzZU92ZXIiLCJvbk1vdXNlT3V0Iiwib25Nb3VzZU1vdmUiLCJvZmZNb3VzZVVwIiwib2ZmIiwib2ZmTW91c2VEb3duIiwib2ZmTW91c2VPdmVyIiwib2ZmTW91c2VPdXQiLCJvZmZNb3VzZU1vdmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZXZlbnQiLCJtb3VzZVRvcCIsInBhZ2VZIiwibW91c2VMZWZ0IiwicGFnZVgiLCJtb3VzZUJ1dHRvbiIsImJ1dHRvbiIsImFwcGx5Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSxTQUFULENBQW1CQyxPQUFuQixFQUE0QkMsT0FBNUIsRUFBdUY7QUFBQSxNQUFsREMsbUJBQWtELHVFQUE1QkMsMEJBQTRCOztBQUNyRixPQUFLQyxFQUFMLENBQVEsU0FBUixFQUFtQkosT0FBbkIsRUFBNEJDLE9BQTVCLEVBQXFDQyxtQkFBckM7QUFDRDs7QUFFRCxTQUFTRyxXQUFULENBQXFCTCxPQUFyQixFQUE4QkMsT0FBOUIsRUFBeUY7QUFBQSxNQUFsREMsbUJBQWtELHVFQUE1QkMsMEJBQTRCOztBQUN2RixPQUFLQyxFQUFMLENBQVEsV0FBUixFQUFxQkosT0FBckIsRUFBOEJDLE9BQTlCLEVBQXVDQyxtQkFBdkM7QUFDRDs7QUFFRCxTQUFTSSxXQUFULENBQXFCTixPQUFyQixFQUE4QkMsT0FBOUIsRUFBeUY7QUFBQSxNQUFsREMsbUJBQWtELHVFQUE1QkMsMEJBQTRCOztBQUN2RixPQUFLQyxFQUFMLENBQVEsV0FBUixFQUFxQkosT0FBckIsRUFBOEJDLE9BQTlCLEVBQXVDQyxtQkFBdkM7QUFDRDs7QUFFRCxTQUFTSyxVQUFULENBQW9CUCxPQUFwQixFQUE2QkMsT0FBN0IsRUFBd0Y7QUFBQSxNQUFsREMsbUJBQWtELHVFQUE1QkMsMEJBQTRCOztBQUN0RixPQUFLQyxFQUFMLENBQVEsVUFBUixFQUFvQkosT0FBcEIsRUFBNkJDLE9BQTdCLEVBQXNDQyxtQkFBdEM7QUFDRDs7QUFFRCxTQUFTTSxXQUFULENBQXFCUixPQUFyQixFQUE4QkMsT0FBOUIsRUFBeUY7QUFBQSxNQUFsREMsbUJBQWtELHVFQUE1QkMsMEJBQTRCOztBQUN2RixPQUFLQyxFQUFMLENBQVEsV0FBUixFQUFxQkosT0FBckIsRUFBOEJDLE9BQTlCLEVBQXVDQyxtQkFBdkM7QUFDRDs7QUFFRCxTQUFTTyxVQUFULENBQW9CVCxPQUFwQixFQUE2QkMsT0FBN0IsRUFBc0M7QUFBRSxPQUFLUyxHQUFMLENBQVMsU0FBVCxFQUFvQlYsT0FBcEIsRUFBNkJDLE9BQTdCO0FBQXdDOztBQUVoRixTQUFTVSxZQUFULENBQXNCWCxPQUF0QixFQUErQkMsT0FBL0IsRUFBd0M7QUFBRSxPQUFLUyxHQUFMLENBQVMsV0FBVCxFQUFzQlYsT0FBdEIsRUFBK0JDLE9BQS9CO0FBQTBDOztBQUVwRixTQUFTVyxZQUFULENBQXNCWixPQUF0QixFQUErQkMsT0FBL0IsRUFBd0M7QUFBRSxPQUFLUyxHQUFMLENBQVMsV0FBVCxFQUFzQlYsT0FBdEIsRUFBK0JDLE9BQS9CO0FBQTBDOztBQUVwRixTQUFTWSxXQUFULENBQXFCYixPQUFyQixFQUE4QkMsT0FBOUIsRUFBdUM7QUFBRSxPQUFLUyxHQUFMLENBQVMsVUFBVCxFQUFxQlYsT0FBckIsRUFBOEJDLE9BQTlCO0FBQXlDOztBQUVsRixTQUFTYSxZQUFULENBQXNCZCxPQUF0QixFQUErQkMsT0FBL0IsRUFBd0M7QUFBRSxPQUFLUyxHQUFMLENBQVMsV0FBVCxFQUFzQlYsT0FBdEIsRUFBK0JDLE9BQS9CO0FBQTBDOztBQUVwRmMsT0FBT0MsT0FBUCxHQUFpQjtBQUNmakIsc0JBRGU7QUFFZk0sMEJBRmU7QUFHZkMsMEJBSGU7QUFJZkMsd0JBSmU7QUFLZkMsMEJBTGU7QUFNZkMsd0JBTmU7QUFPZkUsNEJBUGU7QUFRZkMsNEJBUmU7QUFTZkMsMEJBVGU7QUFVZkM7QUFWZSxDQUFqQjs7QUFhQSxTQUFTWCwwQkFBVCxDQUFvQ0gsT0FBcEMsRUFBNkNpQixLQUE3QyxFQUFvRGhCLE9BQXBELEVBQTZEO0FBQzNELE1BQU1pQixXQUFXRCxNQUFNRSxLQUF2QjtBQUFBLE1BQStCO0FBQ3pCQyxjQUFZSCxNQUFNSSxLQUR4QjtBQUFBLE1BQytCO0FBQ3pCQyxnQkFBY0wsTUFBTU0sTUFGMUIsQ0FEMkQsQ0FHekI7O0FBRWxDdkIsVUFBUXdCLEtBQVIsQ0FBY3ZCLE9BQWQsRUFBdUJpQixRQUF2QixFQUFpQ0UsU0FBakMsRUFBNENFLFdBQTVDLEVBQXlETCxLQUF6RDtBQUNEIiwiZmlsZSI6Im1vdXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBvbk1vdXNlVXAoaGFuZGxlciwgZWxlbWVudCwgaW50ZXJtZWRpYXRlSGFuZGxlciA9IGRlZmF1bHRJbnRlcm1lZGlhdGVIYW5kbGVyKSB7XG4gIHRoaXMub24oJ21vdXNldXAnLCBoYW5kbGVyLCBlbGVtZW50LCBpbnRlcm1lZGlhdGVIYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gb25Nb3VzZURvd24oaGFuZGxlciwgZWxlbWVudCwgaW50ZXJtZWRpYXRlSGFuZGxlciA9IGRlZmF1bHRJbnRlcm1lZGlhdGVIYW5kbGVyKSB7XG4gIHRoaXMub24oJ21vdXNlZG93bicsIGhhbmRsZXIsIGVsZW1lbnQsIGludGVybWVkaWF0ZUhhbmRsZXIpO1xufVxuXG5mdW5jdGlvbiBvbk1vdXNlT3ZlcihoYW5kbGVyLCBlbGVtZW50LCBpbnRlcm1lZGlhdGVIYW5kbGVyID0gZGVmYXVsdEludGVybWVkaWF0ZUhhbmRsZXIpIHtcbiAgdGhpcy5vbignbW91c2VvdmVyJywgaGFuZGxlciwgZWxlbWVudCwgaW50ZXJtZWRpYXRlSGFuZGxlcik7XG59XG5cbmZ1bmN0aW9uIG9uTW91c2VPdXQoaGFuZGxlciwgZWxlbWVudCwgaW50ZXJtZWRpYXRlSGFuZGxlciA9IGRlZmF1bHRJbnRlcm1lZGlhdGVIYW5kbGVyKSB7XG4gIHRoaXMub24oJ21vdXNlb3V0JywgaGFuZGxlciwgZWxlbWVudCwgaW50ZXJtZWRpYXRlSGFuZGxlcik7XG59XG5cbmZ1bmN0aW9uIG9uTW91c2VNb3ZlKGhhbmRsZXIsIGVsZW1lbnQsIGludGVybWVkaWF0ZUhhbmRsZXIgPSBkZWZhdWx0SW50ZXJtZWRpYXRlSGFuZGxlcikge1xuICB0aGlzLm9uKCdtb3VzZW1vdmUnLCBoYW5kbGVyLCBlbGVtZW50LCBpbnRlcm1lZGlhdGVIYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gb2ZmTW91c2VVcChoYW5kbGVyLCBlbGVtZW50KSB7IHRoaXMub2ZmKCdtb3VzZXVwJywgaGFuZGxlciwgZWxlbWVudCk7IH1cblxuZnVuY3Rpb24gb2ZmTW91c2VEb3duKGhhbmRsZXIsIGVsZW1lbnQpIHsgdGhpcy5vZmYoJ21vdXNlZG93bicsIGhhbmRsZXIsIGVsZW1lbnQpOyB9XG5cbmZ1bmN0aW9uIG9mZk1vdXNlT3ZlcihoYW5kbGVyLCBlbGVtZW50KSB7IHRoaXMub2ZmKCdtb3VzZW92ZXInLCBoYW5kbGVyLCBlbGVtZW50KTsgfVxuXG5mdW5jdGlvbiBvZmZNb3VzZU91dChoYW5kbGVyLCBlbGVtZW50KSB7IHRoaXMub2ZmKCdtb3VzZW91dCcsIGhhbmRsZXIsIGVsZW1lbnQpOyB9XG5cbmZ1bmN0aW9uIG9mZk1vdXNlTW92ZShoYW5kbGVyLCBlbGVtZW50KSB7IHRoaXMub2ZmKCdtb3VzZW1vdmUnLCBoYW5kbGVyLCBlbGVtZW50KTsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgb25Nb3VzZVVwLFxuICBvbk1vdXNlRG93bixcbiAgb25Nb3VzZU92ZXIsXG4gIG9uTW91c2VPdXQsXG4gIG9uTW91c2VNb3ZlLFxuICBvZmZNb3VzZVVwLFxuICBvZmZNb3VzZURvd24sXG4gIG9mZk1vdXNlT3ZlcixcbiAgb2ZmTW91c2VPdXQsXG4gIG9mZk1vdXNlTW92ZVxufTtcblxuZnVuY3Rpb24gZGVmYXVsdEludGVybWVkaWF0ZUhhbmRsZXIoaGFuZGxlciwgZXZlbnQsIGVsZW1lbnQpIHtcbiAgY29uc3QgbW91c2VUb3AgPSBldmVudC5wYWdlWSwgIC8vL1xuICAgICAgICBtb3VzZUxlZnQgPSBldmVudC5wYWdlWCwgLy8vXG4gICAgICAgIG1vdXNlQnV0dG9uID0gZXZlbnQuYnV0dG9uOyAvLy9cbiAgXG4gIGhhbmRsZXIuYXBwbHkoZWxlbWVudCwgbW91c2VUb3AsIG1vdXNlTGVmdCwgbW91c2VCdXR0b24sIGV2ZW50KTtcbn1cbiJdfQ==