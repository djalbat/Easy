'use strict';

var arrayUtilities = require('../utilities/array');

var splice = arrayUtilities.splice;


function domElementFromSelector(selector) {
  var domElement = typeof selector === 'string' ? document.querySelector(selector) : selector; ///

  return domElement;
}

function elementsFromDOMElements(domElements) {
  var domElementsWithElements = filterDOMNodes(domElements, function (domElement) {
    return domElement.__element__ !== undefined;
  }),
      elements = domElementsWithElements.map(function (domElement) {
    return domElement.__element__;
  });

  return elements;
}

function descendantDOMNodesFromDOMNode(domNode) {
  var descendantDOMNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var start = -1,
      deleteCount = 0,
      childDOMNodes = domNode.childNodes; ///

  splice(descendantDOMNodes, start, deleteCount, childDOMNodes);

  childDOMNodes.forEach(function (childDOMNode) {
    descendantDOMNodesFromDOMNode(childDOMNode, descendantDOMNodes);
  });

  return descendantDOMNodes;
}

function filterDOMNodesBySelector(domNodes, selector) {
  var filteredDOMNodes = filterDOMNodes(domNodes, function (domNode) {
    return domNodeMatchesSelector(domNode, selector);
  });

  return filteredDOMNodes;
}

function domNodeMatchesSelector(domNode, selector) {
  var domNodeType = domNode.nodeType;

  switch (domNodeType) {
    case Node.ELEMENT_NODE:
      {
        var domElement = domNode; ///

        return domElement.matches(selector);
      }

    case Node.TEXT_NODE:
      {
        if (selector === '*') {
          return true;
        }
      }
  }

  return false;
}

function filterDOMNodes(domNodes, test) {
  var filteredDOMNodes = [],
      domNodesLength = domNodes.length;

  for (var index = 0; index < domNodesLength; index++) {
    var domNode = domNodes[index],
        result = test(domNode);

    if (result) {
      filteredDOMNodes.push(domNode);
    }
  }

  return filteredDOMNodes;
}

module.exports = {
  domElementFromSelector: domElementFromSelector,
  elementsFromDOMElements: elementsFromDOMElements,
  descendantDOMNodesFromDOMNode: descendantDOMNodesFromDOMNode,
  filterDOMNodesBySelector: filterDOMNodesBySelector,
  domNodeMatchesSelector: domNodeMatchesSelector,
  filterDOMNodes: filterDOMNodes
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZG9tLmpzIl0sIm5hbWVzIjpbImFycmF5VXRpbGl0aWVzIiwicmVxdWlyZSIsInNwbGljZSIsImRvbUVsZW1lbnRGcm9tU2VsZWN0b3IiLCJzZWxlY3RvciIsImRvbUVsZW1lbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJlbGVtZW50c0Zyb21ET01FbGVtZW50cyIsImRvbUVsZW1lbnRzIiwiZG9tRWxlbWVudHNXaXRoRWxlbWVudHMiLCJmaWx0ZXJET01Ob2RlcyIsIl9fZWxlbWVudF9fIiwidW5kZWZpbmVkIiwiZWxlbWVudHMiLCJtYXAiLCJkZXNjZW5kYW50RE9NTm9kZXNGcm9tRE9NTm9kZSIsImRvbU5vZGUiLCJkZXNjZW5kYW50RE9NTm9kZXMiLCJzdGFydCIsImRlbGV0ZUNvdW50IiwiY2hpbGRET01Ob2RlcyIsImNoaWxkTm9kZXMiLCJmb3JFYWNoIiwiY2hpbGRET01Ob2RlIiwiZmlsdGVyRE9NTm9kZXNCeVNlbGVjdG9yIiwiZG9tTm9kZXMiLCJmaWx0ZXJlZERPTU5vZGVzIiwiZG9tTm9kZU1hdGNoZXNTZWxlY3RvciIsImRvbU5vZGVUeXBlIiwibm9kZVR5cGUiLCJOb2RlIiwiRUxFTUVOVF9OT0RFIiwibWF0Y2hlcyIsIlRFWFRfTk9ERSIsInRlc3QiLCJkb21Ob2Rlc0xlbmd0aCIsImxlbmd0aCIsImluZGV4IiwicmVzdWx0IiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLGlCQUFpQkMsUUFBUSxvQkFBUixDQUF2Qjs7SUFFUUMsTSxHQUFXRixjLENBQVhFLE07OztBQUVSLFNBQVNDLHNCQUFULENBQWdDQyxRQUFoQyxFQUEwQztBQUN4QyxNQUFNQyxhQUFjLE9BQU9ELFFBQVAsS0FBb0IsUUFBckIsR0FDRUUsU0FBU0MsYUFBVCxDQUF1QkgsUUFBdkIsQ0FERixHQUVJQSxRQUZ2QixDQUR3QyxDQUdOOztBQUVsQyxTQUFPQyxVQUFQO0FBQ0Q7O0FBRUQsU0FBU0csdUJBQVQsQ0FBaUNDLFdBQWpDLEVBQThDO0FBQzVDLE1BQU1DLDBCQUEwQkMsZUFBZUYsV0FBZixFQUE0QixVQUFTSixVQUFULEVBQXFCO0FBQ3pFLFdBQVFBLFdBQVdPLFdBQVgsS0FBMkJDLFNBQW5DO0FBQ0QsR0FGeUIsQ0FBaEM7QUFBQSxNQUdNQyxXQUFXSix3QkFBd0JLLEdBQXhCLENBQTRCLFVBQVNWLFVBQVQsRUFBcUI7QUFDMUQsV0FBT0EsV0FBV08sV0FBbEI7QUFDRCxHQUZVLENBSGpCOztBQU9BLFNBQU9FLFFBQVA7QUFDRDs7QUFFRCxTQUFTRSw2QkFBVCxDQUF1Q0MsT0FBdkMsRUFBeUU7QUFBQSxNQUF6QkMsa0JBQXlCLHVFQUFKLEVBQUk7O0FBQ3ZFLE1BQU1DLFFBQVEsQ0FBQyxDQUFmO0FBQUEsTUFDTUMsY0FBYyxDQURwQjtBQUFBLE1BRU1DLGdCQUFnQkosUUFBUUssVUFGOUIsQ0FEdUUsQ0FHNUI7O0FBRTNDcEIsU0FBT2dCLGtCQUFQLEVBQTJCQyxLQUEzQixFQUFrQ0MsV0FBbEMsRUFBK0NDLGFBQS9DOztBQUVBQSxnQkFBY0UsT0FBZCxDQUFzQixVQUFTQyxZQUFULEVBQXVCO0FBQzNDUixrQ0FBOEJRLFlBQTlCLEVBQTRDTixrQkFBNUM7QUFDRCxHQUZEOztBQUlBLFNBQU9BLGtCQUFQO0FBQ0Q7O0FBRUQsU0FBU08sd0JBQVQsQ0FBa0NDLFFBQWxDLEVBQTRDdEIsUUFBNUMsRUFBc0Q7QUFDcEQsTUFBTXVCLG1CQUFtQmhCLGVBQWVlLFFBQWYsRUFBeUIsVUFBU1QsT0FBVCxFQUFrQjtBQUNsRSxXQUFPVyx1QkFBdUJYLE9BQXZCLEVBQWdDYixRQUFoQyxDQUFQO0FBQ0QsR0FGd0IsQ0FBekI7O0FBSUEsU0FBT3VCLGdCQUFQO0FBQ0Q7O0FBRUQsU0FBU0Msc0JBQVQsQ0FBZ0NYLE9BQWhDLEVBQXlDYixRQUF6QyxFQUFtRDtBQUNqRCxNQUFNeUIsY0FBY1osUUFBUWEsUUFBNUI7O0FBRUEsVUFBUUQsV0FBUjtBQUNFLFNBQUtFLEtBQUtDLFlBQVY7QUFBeUI7QUFDdkIsWUFBTTNCLGFBQWFZLE9BQW5CLENBRHVCLENBQ0s7O0FBRTVCLGVBQU9aLFdBQVc0QixPQUFYLENBQW1CN0IsUUFBbkIsQ0FBUDtBQUNEOztBQUVELFNBQUsyQixLQUFLRyxTQUFWO0FBQXNCO0FBQ3BCLFlBQUk5QixhQUFhLEdBQWpCLEVBQXNCO0FBQ3BCLGlCQUFPLElBQVA7QUFDRDtBQUNGO0FBWEg7O0FBY0EsU0FBTyxLQUFQO0FBQ0Q7O0FBRUQsU0FBU08sY0FBVCxDQUF3QmUsUUFBeEIsRUFBa0NTLElBQWxDLEVBQXdDO0FBQ3RDLE1BQU1SLG1CQUFtQixFQUF6QjtBQUFBLE1BQ01TLGlCQUFpQlYsU0FBU1csTUFEaEM7O0FBR0EsT0FBSyxJQUFJQyxRQUFRLENBQWpCLEVBQW9CQSxRQUFRRixjQUE1QixFQUE0Q0UsT0FBNUMsRUFBcUQ7QUFDbkQsUUFBTXJCLFVBQVVTLFNBQVNZLEtBQVQsQ0FBaEI7QUFBQSxRQUNNQyxTQUFTSixLQUFLbEIsT0FBTCxDQURmOztBQUdBLFFBQUlzQixNQUFKLEVBQVk7QUFDVlosdUJBQWlCYSxJQUFqQixDQUFzQnZCLE9BQXRCO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPVSxnQkFBUDtBQUNEOztBQUVEYyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2Z2QyxnREFEZTtBQUVmSyxrREFGZTtBQUdmUSw4REFIZTtBQUlmUyxvREFKZTtBQUtmRyxnREFMZTtBQU1makI7QUFOZSxDQUFqQiIsImZpbGUiOiJkb20uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5Jyk7XG5cbmNvbnN0IHsgc3BsaWNlIH0gPSBhcnJheVV0aWxpdGllcztcblxuZnVuY3Rpb24gZG9tRWxlbWVudEZyb21TZWxlY3RvcihzZWxlY3Rvcikge1xuICBjb25zdCBkb21FbGVtZW50ID0gKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpID9cbiAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgOlxuICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOyAgLy8vXG5cbiAgcmV0dXJuIGRvbUVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRzRnJvbURPTUVsZW1lbnRzKGRvbUVsZW1lbnRzKSB7XG4gIGNvbnN0IGRvbUVsZW1lbnRzV2l0aEVsZW1lbnRzID0gZmlsdGVyRE9NTm9kZXMoZG9tRWxlbWVudHMsIGZ1bmN0aW9uKGRvbUVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gKGRvbUVsZW1lbnQuX19lbGVtZW50X18gIT09IHVuZGVmaW5lZCk7XG4gICAgICAgIH0pLFxuICAgICAgICBlbGVtZW50cyA9IGRvbUVsZW1lbnRzV2l0aEVsZW1lbnRzLm1hcChmdW5jdGlvbihkb21FbGVtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGRvbUVsZW1lbnQuX19lbGVtZW50X187XG4gICAgICAgIH0pO1xuXG4gIHJldHVybiBlbGVtZW50cztcbn1cblxuZnVuY3Rpb24gZGVzY2VuZGFudERPTU5vZGVzRnJvbURPTU5vZGUoZG9tTm9kZSwgZGVzY2VuZGFudERPTU5vZGVzID0gW10pIHtcbiAgY29uc3Qgc3RhcnQgPSAtMSxcbiAgICAgICAgZGVsZXRlQ291bnQgPSAwLFxuICAgICAgICBjaGlsZERPTU5vZGVzID0gZG9tTm9kZS5jaGlsZE5vZGVzOyAgLy8vXG5cbiAgc3BsaWNlKGRlc2NlbmRhbnRET01Ob2Rlcywgc3RhcnQsIGRlbGV0ZUNvdW50LCBjaGlsZERPTU5vZGVzKTtcblxuICBjaGlsZERPTU5vZGVzLmZvckVhY2goZnVuY3Rpb24oY2hpbGRET01Ob2RlKSB7XG4gICAgZGVzY2VuZGFudERPTU5vZGVzRnJvbURPTU5vZGUoY2hpbGRET01Ob2RlLCBkZXNjZW5kYW50RE9NTm9kZXMpO1xuICB9KTtcblxuICByZXR1cm4gZGVzY2VuZGFudERPTU5vZGVzO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXJET01Ob2Rlc0J5U2VsZWN0b3IoZG9tTm9kZXMsIHNlbGVjdG9yKSB7XG4gIGNvbnN0IGZpbHRlcmVkRE9NTm9kZXMgPSBmaWx0ZXJET01Ob2Rlcyhkb21Ob2RlcywgZnVuY3Rpb24oZG9tTm9kZSkge1xuICAgIHJldHVybiBkb21Ob2RlTWF0Y2hlc1NlbGVjdG9yKGRvbU5vZGUsIHNlbGVjdG9yKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZpbHRlcmVkRE9NTm9kZXM7XG59XG5cbmZ1bmN0aW9uIGRvbU5vZGVNYXRjaGVzU2VsZWN0b3IoZG9tTm9kZSwgc2VsZWN0b3IpIHtcbiAgY29uc3QgZG9tTm9kZVR5cGUgPSBkb21Ob2RlLm5vZGVUeXBlO1xuXG4gIHN3aXRjaCAoZG9tTm9kZVR5cGUpIHtcbiAgICBjYXNlIE5vZGUuRUxFTUVOVF9OT0RFIDoge1xuICAgICAgY29uc3QgZG9tRWxlbWVudCA9IGRvbU5vZGU7IC8vL1xuXG4gICAgICByZXR1cm4gZG9tRWxlbWVudC5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgICB9XG5cbiAgICBjYXNlIE5vZGUuVEVYVF9OT0RFIDoge1xuICAgICAgaWYgKHNlbGVjdG9yID09PSAnKicpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXJET01Ob2Rlcyhkb21Ob2RlcywgdGVzdCkge1xuICBjb25zdCBmaWx0ZXJlZERPTU5vZGVzID0gW10sXG4gICAgICAgIGRvbU5vZGVzTGVuZ3RoID0gZG9tTm9kZXMubGVuZ3RoO1xuXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBkb21Ob2Rlc0xlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnN0IGRvbU5vZGUgPSBkb21Ob2Rlc1tpbmRleF0sXG4gICAgICAgICAgcmVzdWx0ID0gdGVzdChkb21Ob2RlKTtcblxuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIGZpbHRlcmVkRE9NTm9kZXMucHVzaChkb21Ob2RlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmlsdGVyZWRET01Ob2Rlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRvbUVsZW1lbnRGcm9tU2VsZWN0b3IsXG4gIGVsZW1lbnRzRnJvbURPTUVsZW1lbnRzLFxuICBkZXNjZW5kYW50RE9NTm9kZXNGcm9tRE9NTm9kZSxcbiAgZmlsdGVyRE9NTm9kZXNCeVNlbGVjdG9yLFxuICBkb21Ob2RlTWF0Y2hlc1NlbGVjdG9yLFxuICBmaWx0ZXJET01Ob2Rlc1xufTtcbiJdfQ==