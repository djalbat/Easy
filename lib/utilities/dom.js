"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.elementsFromDOMElements = elementsFromDOMElements;
exports.ascendantDOMNodesFromDOMNode = ascendantDOMNodesFromDOMNode;
exports.descendantDOMNodesFromDOMNode = descendantDOMNodesFromDOMNode;
exports.filterDOMNodesBySelector = filterDOMNodesBySelector;
exports.domNodeMatchesSelector = domNodeMatchesSelector;
exports.filterDOMNodes = filterDOMNodes;

var _array = require("../utilities/array");

function elementsFromDOMElements(domElements) {
  var domElementsWithElements = filterDOMNodes(domElements, function (domElement) {
    return domElement.__element__ !== undefined;
  }),
      elements = domElementsWithElements.map(function (domElement) {
    return domElement.__element__;
  });
  return elements;
}

function ascendantDOMNodesFromDOMNode(domNode) {
  var ascendantDOMNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var parentElement = domNode.parentElement; ///

  if (parentElement !== null) {
    var parentDOMNode = parentElement; ///

    ascendantDOMNodes.push(parentDOMNode);
    ascendantDOMNodesFromDOMNode(parentDOMNode, ascendantDOMNodes);
  }

  return ascendantDOMNodes;
}

function descendantDOMNodesFromDOMNode(domNode) {
  var descendantDOMNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var childDOMNodes = domNode.childNodes; ///

  (0, _array.push)(descendantDOMNodes, childDOMNodes);
  childDOMNodes.forEach(function (childDOMNode) {
    return descendantDOMNodesFromDOMNode(childDOMNode, descendantDOMNodes);
  });
  return descendantDOMNodes;
}

function filterDOMNodesBySelector(domNodes, selector) {
  var filteredDOMNodes = filterDOMNodes(domNodes, function (domNode) {
    return domNodeMatchesSelector(domNode, selector);
  });
  return filteredDOMNodes;
}

function domNodeMatchesSelector(domNode, selector) {
  var domNodeType = domNode.nodeType;

  switch (domNodeType) {
    case Node.ELEMENT_NODE:
      {
        var domElement = domNode; ///

        return domElement.matches(selector);
      }

    case Node.TEXT_NODE:
      {
        if (selector === "*") {
          return true;
        }
      }
  }

  return false;
}

function filterDOMNodes(domNodes, test) {
  var filteredDOMNodes = [],
      domNodesLength = domNodes.length;

  for (var index = 0; index < domNodesLength; index++) {
    var domNode = domNodes[index],
        result = test(domNode);

    if (result) {
      filteredDOMNodes.push(domNode);
    }
  }

  return filteredDOMNodes;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvbS5qcyJdLCJuYW1lcyI6WyJlbGVtZW50c0Zyb21ET01FbGVtZW50cyIsImRvbUVsZW1lbnRzIiwiZG9tRWxlbWVudHNXaXRoRWxlbWVudHMiLCJmaWx0ZXJET01Ob2RlcyIsImRvbUVsZW1lbnQiLCJfX2VsZW1lbnRfXyIsInVuZGVmaW5lZCIsImVsZW1lbnRzIiwibWFwIiwiYXNjZW5kYW50RE9NTm9kZXNGcm9tRE9NTm9kZSIsImRvbU5vZGUiLCJhc2NlbmRhbnRET01Ob2RlcyIsInBhcmVudEVsZW1lbnQiLCJwYXJlbnRET01Ob2RlIiwicHVzaCIsImRlc2NlbmRhbnRET01Ob2Rlc0Zyb21ET01Ob2RlIiwiZGVzY2VuZGFudERPTU5vZGVzIiwiY2hpbGRET01Ob2RlcyIsImNoaWxkTm9kZXMiLCJmb3JFYWNoIiwiY2hpbGRET01Ob2RlIiwiZmlsdGVyRE9NTm9kZXNCeVNlbGVjdG9yIiwiZG9tTm9kZXMiLCJzZWxlY3RvciIsImZpbHRlcmVkRE9NTm9kZXMiLCJkb21Ob2RlTWF0Y2hlc1NlbGVjdG9yIiwiZG9tTm9kZVR5cGUiLCJub2RlVHlwZSIsIk5vZGUiLCJFTEVNRU5UX05PREUiLCJtYXRjaGVzIiwiVEVYVF9OT0RFIiwidGVzdCIsImRvbU5vZGVzTGVuZ3RoIiwibGVuZ3RoIiwiaW5kZXgiLCJyZXN1bHQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7QUFFQTs7QUFFTyxTQUFTQSx1QkFBVCxDQUFpQ0MsV0FBakMsRUFBOEM7QUFDbkQsTUFBTUMsdUJBQXVCLEdBQUdDLGNBQWMsQ0FBQ0YsV0FBRCxFQUFjLFVBQUNHLFVBQUQ7QUFBQSxXQUFpQkEsVUFBVSxDQUFDQyxXQUFYLEtBQTJCQyxTQUE1QztBQUFBLEdBQWQsQ0FBOUM7QUFBQSxNQUNNQyxRQUFRLEdBQUdMLHVCQUF1QixDQUFDTSxHQUF4QixDQUE0QixVQUFDSixVQUFEO0FBQUEsV0FBZ0JBLFVBQVUsQ0FBQ0MsV0FBM0I7QUFBQSxHQUE1QixDQURqQjtBQUdBLFNBQU9FLFFBQVA7QUFDRDs7QUFFTSxTQUFTRSw0QkFBVCxDQUFzQ0MsT0FBdEMsRUFBdUU7QUFBQSxNQUF4QkMsaUJBQXdCLHVFQUFKLEVBQUk7QUFDNUUsTUFBTUMsYUFBYSxHQUFHRixPQUFPLENBQUNFLGFBQTlCLENBRDRFLENBQzlCOztBQUU5QyxNQUFJQSxhQUFhLEtBQUssSUFBdEIsRUFBNEI7QUFDMUIsUUFBTUMsYUFBYSxHQUFHRCxhQUF0QixDQUQwQixDQUNXOztBQUVyQ0QsSUFBQUEsaUJBQWlCLENBQUNHLElBQWxCLENBQXVCRCxhQUF2QjtBQUVBSixJQUFBQSw0QkFBNEIsQ0FBQ0ksYUFBRCxFQUFnQkYsaUJBQWhCLENBQTVCO0FBQ0Q7O0FBRUQsU0FBT0EsaUJBQVA7QUFDRDs7QUFFTSxTQUFTSSw2QkFBVCxDQUF1Q0wsT0FBdkMsRUFBeUU7QUFBQSxNQUF6Qk0sa0JBQXlCLHVFQUFKLEVBQUk7QUFDOUUsTUFBTUMsYUFBYSxHQUFHUCxPQUFPLENBQUNRLFVBQTlCLENBRDhFLENBQ25DOztBQUUzQyxtQkFBS0Ysa0JBQUwsRUFBeUJDLGFBQXpCO0FBRUFBLEVBQUFBLGFBQWEsQ0FBQ0UsT0FBZCxDQUFzQixVQUFDQyxZQUFEO0FBQUEsV0FBa0JMLDZCQUE2QixDQUFDSyxZQUFELEVBQWVKLGtCQUFmLENBQS9DO0FBQUEsR0FBdEI7QUFFQSxTQUFPQSxrQkFBUDtBQUNEOztBQUVNLFNBQVNLLHdCQUFULENBQWtDQyxRQUFsQyxFQUE0Q0MsUUFBNUMsRUFBc0Q7QUFDM0QsTUFBTUMsZ0JBQWdCLEdBQUdyQixjQUFjLENBQUNtQixRQUFELEVBQVcsVUFBQ1osT0FBRDtBQUFBLFdBQWFlLHNCQUFzQixDQUFDZixPQUFELEVBQVVhLFFBQVYsQ0FBbkM7QUFBQSxHQUFYLENBQXZDO0FBRUEsU0FBT0MsZ0JBQVA7QUFDRDs7QUFFTSxTQUFTQyxzQkFBVCxDQUFnQ2YsT0FBaEMsRUFBeUNhLFFBQXpDLEVBQW1EO0FBQ3hELE1BQU1HLFdBQVcsR0FBR2hCLE9BQU8sQ0FBQ2lCLFFBQTVCOztBQUVBLFVBQVFELFdBQVI7QUFDRSxTQUFLRSxJQUFJLENBQUNDLFlBQVY7QUFBeUI7QUFDdkIsWUFBTXpCLFVBQVUsR0FBR00sT0FBbkIsQ0FEdUIsQ0FDSzs7QUFFNUIsZUFBT04sVUFBVSxDQUFDMEIsT0FBWCxDQUFtQlAsUUFBbkIsQ0FBUDtBQUNEOztBQUVELFNBQUtLLElBQUksQ0FBQ0csU0FBVjtBQUFzQjtBQUNwQixZQUFJUixRQUFRLEtBQUssR0FBakIsRUFBc0I7QUFDcEIsaUJBQU8sSUFBUDtBQUNEO0FBQ0Y7QUFYSDs7QUFjQSxTQUFPLEtBQVA7QUFDRDs7QUFFTSxTQUFTcEIsY0FBVCxDQUF3Qm1CLFFBQXhCLEVBQWtDVSxJQUFsQyxFQUF3QztBQUM3QyxNQUFNUixnQkFBZ0IsR0FBRyxFQUF6QjtBQUFBLE1BQ01TLGNBQWMsR0FBR1gsUUFBUSxDQUFDWSxNQURoQzs7QUFHQSxPQUFLLElBQUlDLEtBQUssR0FBRyxDQUFqQixFQUFvQkEsS0FBSyxHQUFHRixjQUE1QixFQUE0Q0UsS0FBSyxFQUFqRCxFQUFxRDtBQUNuRCxRQUFNekIsT0FBTyxHQUFHWSxRQUFRLENBQUNhLEtBQUQsQ0FBeEI7QUFBQSxRQUNNQyxNQUFNLEdBQUdKLElBQUksQ0FBQ3RCLE9BQUQsQ0FEbkI7O0FBR0EsUUFBSTBCLE1BQUosRUFBWTtBQUNWWixNQUFBQSxnQkFBZ0IsQ0FBQ1YsSUFBakIsQ0FBc0JKLE9BQXRCO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPYyxnQkFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IHB1c2ggfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FycmF5XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBlbGVtZW50c0Zyb21ET01FbGVtZW50cyhkb21FbGVtZW50cykge1xuICBjb25zdCBkb21FbGVtZW50c1dpdGhFbGVtZW50cyA9IGZpbHRlckRPTU5vZGVzKGRvbUVsZW1lbnRzLCAoZG9tRWxlbWVudCkgPT4gKGRvbUVsZW1lbnQuX19lbGVtZW50X18gIT09IHVuZGVmaW5lZCkpLFxuICAgICAgICBlbGVtZW50cyA9IGRvbUVsZW1lbnRzV2l0aEVsZW1lbnRzLm1hcCgoZG9tRWxlbWVudCkgPT4gZG9tRWxlbWVudC5fX2VsZW1lbnRfXyk7XG5cbiAgcmV0dXJuIGVsZW1lbnRzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNjZW5kYW50RE9NTm9kZXNGcm9tRE9NTm9kZShkb21Ob2RlLCBhc2NlbmRhbnRET01Ob2RlcyA9IFtdKSB7XG4gIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBkb21Ob2RlLnBhcmVudEVsZW1lbnQ7ICAvLy9cblxuICBpZiAocGFyZW50RWxlbWVudCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHBhcmVudERPTU5vZGUgPSBwYXJlbnRFbGVtZW50OyAvLy9cblxuICAgIGFzY2VuZGFudERPTU5vZGVzLnB1c2gocGFyZW50RE9NTm9kZSk7XG5cbiAgICBhc2NlbmRhbnRET01Ob2Rlc0Zyb21ET01Ob2RlKHBhcmVudERPTU5vZGUsIGFzY2VuZGFudERPTU5vZGVzKTtcbiAgfVxuXG4gIHJldHVybiBhc2NlbmRhbnRET01Ob2Rlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlc2NlbmRhbnRET01Ob2Rlc0Zyb21ET01Ob2RlKGRvbU5vZGUsIGRlc2NlbmRhbnRET01Ob2RlcyA9IFtdKSB7XG4gIGNvbnN0IGNoaWxkRE9NTm9kZXMgPSBkb21Ob2RlLmNoaWxkTm9kZXM7ICAvLy9cblxuICBwdXNoKGRlc2NlbmRhbnRET01Ob2RlcywgY2hpbGRET01Ob2Rlcyk7XG5cbiAgY2hpbGRET01Ob2Rlcy5mb3JFYWNoKChjaGlsZERPTU5vZGUpID0+IGRlc2NlbmRhbnRET01Ob2Rlc0Zyb21ET01Ob2RlKGNoaWxkRE9NTm9kZSwgZGVzY2VuZGFudERPTU5vZGVzKSk7XG5cbiAgcmV0dXJuIGRlc2NlbmRhbnRET01Ob2Rlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlckRPTU5vZGVzQnlTZWxlY3Rvcihkb21Ob2Rlcywgc2VsZWN0b3IpIHtcbiAgY29uc3QgZmlsdGVyZWRET01Ob2RlcyA9IGZpbHRlckRPTU5vZGVzKGRvbU5vZGVzLCAoZG9tTm9kZSkgPT4gZG9tTm9kZU1hdGNoZXNTZWxlY3Rvcihkb21Ob2RlLCBzZWxlY3RvcikpO1xuXG4gIHJldHVybiBmaWx0ZXJlZERPTU5vZGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZG9tTm9kZU1hdGNoZXNTZWxlY3Rvcihkb21Ob2RlLCBzZWxlY3Rvcikge1xuICBjb25zdCBkb21Ob2RlVHlwZSA9IGRvbU5vZGUubm9kZVR5cGU7XG5cbiAgc3dpdGNoIChkb21Ob2RlVHlwZSkge1xuICAgIGNhc2UgTm9kZS5FTEVNRU5UX05PREUgOiB7XG4gICAgICBjb25zdCBkb21FbGVtZW50ID0gZG9tTm9kZTsgLy8vXG5cbiAgICAgIHJldHVybiBkb21FbGVtZW50Lm1hdGNoZXMoc2VsZWN0b3IpO1xuICAgIH1cblxuICAgIGNhc2UgTm9kZS5URVhUX05PREUgOiB7XG4gICAgICBpZiAoc2VsZWN0b3IgPT09IFwiKlwiKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlckRPTU5vZGVzKGRvbU5vZGVzLCB0ZXN0KSB7XG4gIGNvbnN0IGZpbHRlcmVkRE9NTm9kZXMgPSBbXSxcbiAgICAgICAgZG9tTm9kZXNMZW5ndGggPSBkb21Ob2Rlcy5sZW5ndGg7XG5cbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGRvbU5vZGVzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY29uc3QgZG9tTm9kZSA9IGRvbU5vZGVzW2luZGV4XSxcbiAgICAgICAgICByZXN1bHQgPSB0ZXN0KGRvbU5vZGUpO1xuXG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgZmlsdGVyZWRET01Ob2Rlcy5wdXNoKGRvbU5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmaWx0ZXJlZERPTU5vZGVzO1xufVxuIl19