"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.domElementFromSelector = domElementFromSelector;
exports.elementsFromDOMElements = elementsFromDOMElements;
exports.descendantDOMNodesFromDOMNode = descendantDOMNodesFromDOMNode;
exports.filterDOMNodesBySelector = filterDOMNodesBySelector;
exports.domNodeMatchesSelector = domNodeMatchesSelector;
exports.filterDOMNodes = filterDOMNodes;

var _array = require("../utilities/array");

function domElementFromSelector(selector) {
  var domElement = typeof selector === "string" ? document.querySelector(selector) : selector; ///

  return domElement;
}

function elementsFromDOMElements(domElements) {
  var domElementsWithElements = filterDOMNodes(domElements, function (domElement) {
    return domElement.__element__ !== undefined;
  }),
      elements = domElementsWithElements.map(function (domElement) {
    return domElement.__element__;
  });
  return elements;
}

function descendantDOMNodesFromDOMNode(domNode) {
  var descendantDOMNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var start = -1,
      deleteCount = 0,
      childDOMNodes = domNode.childNodes; ///

  (0, _array.splice)(descendantDOMNodes, start, deleteCount, childDOMNodes);
  childDOMNodes.forEach(function (childDOMNode) {
    return descendantDOMNodesFromDOMNode(childDOMNode, descendantDOMNodes);
  });
  return descendantDOMNodes;
}

function filterDOMNodesBySelector(domNodes, selector) {
  var filteredDOMNodes = filterDOMNodes(domNodes, function (domNode) {
    return domNodeMatchesSelector(domNode, selector);
  });
  return filteredDOMNodes;
}

function domNodeMatchesSelector(domNode, selector) {
  var domNodeType = domNode.nodeType;

  switch (domNodeType) {
    case Node.ELEMENT_NODE:
      {
        var domElement = domNode; ///

        return domElement.matches(selector);
      }

    case Node.TEXT_NODE:
      {
        if (selector === "*") {
          return true;
        }
      }
  }

  return false;
}

function filterDOMNodes(domNodes, test) {
  var filteredDOMNodes = [],
      domNodesLength = domNodes.length;

  for (var index = 0; index < domNodesLength; index++) {
    var domNode = domNodes[index],
        result = test(domNode);

    if (result) {
      filteredDOMNodes.push(domNode);
    }
  }

  return filteredDOMNodes;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvbS5qcyJdLCJuYW1lcyI6WyJkb21FbGVtZW50RnJvbVNlbGVjdG9yIiwic2VsZWN0b3IiLCJkb21FbGVtZW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZWxlbWVudHNGcm9tRE9NRWxlbWVudHMiLCJkb21FbGVtZW50cyIsImRvbUVsZW1lbnRzV2l0aEVsZW1lbnRzIiwiZmlsdGVyRE9NTm9kZXMiLCJfX2VsZW1lbnRfXyIsInVuZGVmaW5lZCIsImVsZW1lbnRzIiwibWFwIiwiZGVzY2VuZGFudERPTU5vZGVzRnJvbURPTU5vZGUiLCJkb21Ob2RlIiwiZGVzY2VuZGFudERPTU5vZGVzIiwic3RhcnQiLCJkZWxldGVDb3VudCIsImNoaWxkRE9NTm9kZXMiLCJjaGlsZE5vZGVzIiwiZm9yRWFjaCIsImNoaWxkRE9NTm9kZSIsImZpbHRlckRPTU5vZGVzQnlTZWxlY3RvciIsImRvbU5vZGVzIiwiZmlsdGVyZWRET01Ob2RlcyIsImRvbU5vZGVNYXRjaGVzU2VsZWN0b3IiLCJkb21Ob2RlVHlwZSIsIm5vZGVUeXBlIiwiTm9kZSIsIkVMRU1FTlRfTk9ERSIsIm1hdGNoZXMiLCJURVhUX05PREUiLCJ0ZXN0IiwiZG9tTm9kZXNMZW5ndGgiLCJsZW5ndGgiLCJpbmRleCIsInJlc3VsdCIsInB1c2giXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7QUFFQTs7QUFFTyxTQUFTQSxzQkFBVCxDQUFnQ0MsUUFBaEMsRUFBMEM7QUFDL0MsTUFBTUMsVUFBVSxHQUFJLE9BQU9ELFFBQVAsS0FBb0IsUUFBckIsR0FDRUUsUUFBUSxDQUFDQyxhQUFULENBQXVCSCxRQUF2QixDQURGLEdBRUlBLFFBRnZCLENBRCtDLENBR2I7O0FBRWxDLFNBQU9DLFVBQVA7QUFDRDs7QUFFTSxTQUFTRyx1QkFBVCxDQUFpQ0MsV0FBakMsRUFBOEM7QUFDbkQsTUFBTUMsdUJBQXVCLEdBQUdDLGNBQWMsQ0FBQ0YsV0FBRCxFQUFjLFVBQUNKLFVBQUQ7QUFBQSxXQUFpQkEsVUFBVSxDQUFDTyxXQUFYLEtBQTJCQyxTQUE1QztBQUFBLEdBQWQsQ0FBOUM7QUFBQSxNQUNNQyxRQUFRLEdBQUdKLHVCQUF1QixDQUFDSyxHQUF4QixDQUE0QixVQUFDVixVQUFEO0FBQUEsV0FBZ0JBLFVBQVUsQ0FBQ08sV0FBM0I7QUFBQSxHQUE1QixDQURqQjtBQUdBLFNBQU9FLFFBQVA7QUFDRDs7QUFFTSxTQUFTRSw2QkFBVCxDQUF1Q0MsT0FBdkMsRUFBeUU7QUFBQSxNQUF6QkMsa0JBQXlCLHVFQUFKLEVBQUk7QUFDOUUsTUFBTUMsS0FBSyxHQUFHLENBQUMsQ0FBZjtBQUFBLE1BQ01DLFdBQVcsR0FBRyxDQURwQjtBQUFBLE1BRU1DLGFBQWEsR0FBR0osT0FBTyxDQUFDSyxVQUY5QixDQUQ4RSxDQUduQzs7QUFFM0MscUJBQU9KLGtCQUFQLEVBQTJCQyxLQUEzQixFQUFrQ0MsV0FBbEMsRUFBK0NDLGFBQS9DO0FBRUFBLEVBQUFBLGFBQWEsQ0FBQ0UsT0FBZCxDQUFzQixVQUFDQyxZQUFEO0FBQUEsV0FBa0JSLDZCQUE2QixDQUFDUSxZQUFELEVBQWVOLGtCQUFmLENBQS9DO0FBQUEsR0FBdEI7QUFFQSxTQUFPQSxrQkFBUDtBQUNEOztBQUVNLFNBQVNPLHdCQUFULENBQWtDQyxRQUFsQyxFQUE0Q3RCLFFBQTVDLEVBQXNEO0FBQzNELE1BQU11QixnQkFBZ0IsR0FBR2hCLGNBQWMsQ0FBQ2UsUUFBRCxFQUFXLFVBQUNULE9BQUQ7QUFBQSxXQUFhVyxzQkFBc0IsQ0FBQ1gsT0FBRCxFQUFVYixRQUFWLENBQW5DO0FBQUEsR0FBWCxDQUF2QztBQUVBLFNBQU91QixnQkFBUDtBQUNEOztBQUVNLFNBQVNDLHNCQUFULENBQWdDWCxPQUFoQyxFQUF5Q2IsUUFBekMsRUFBbUQ7QUFDeEQsTUFBTXlCLFdBQVcsR0FBR1osT0FBTyxDQUFDYSxRQUE1Qjs7QUFFQSxVQUFRRCxXQUFSO0FBQ0UsU0FBS0UsSUFBSSxDQUFDQyxZQUFWO0FBQXlCO0FBQ3ZCLFlBQU0zQixVQUFVLEdBQUdZLE9BQW5CLENBRHVCLENBQ0s7O0FBRTVCLGVBQU9aLFVBQVUsQ0FBQzRCLE9BQVgsQ0FBbUI3QixRQUFuQixDQUFQO0FBQ0Q7O0FBRUQsU0FBSzJCLElBQUksQ0FBQ0csU0FBVjtBQUFzQjtBQUNwQixZQUFJOUIsUUFBUSxLQUFLLEdBQWpCLEVBQXNCO0FBQ3BCLGlCQUFPLElBQVA7QUFDRDtBQUNGO0FBWEg7O0FBY0EsU0FBTyxLQUFQO0FBQ0Q7O0FBRU0sU0FBU08sY0FBVCxDQUF3QmUsUUFBeEIsRUFBa0NTLElBQWxDLEVBQXdDO0FBQzdDLE1BQU1SLGdCQUFnQixHQUFHLEVBQXpCO0FBQUEsTUFDTVMsY0FBYyxHQUFHVixRQUFRLENBQUNXLE1BRGhDOztBQUdBLE9BQUssSUFBSUMsS0FBSyxHQUFHLENBQWpCLEVBQW9CQSxLQUFLLEdBQUdGLGNBQTVCLEVBQTRDRSxLQUFLLEVBQWpELEVBQXFEO0FBQ25ELFFBQU1yQixPQUFPLEdBQUdTLFFBQVEsQ0FBQ1ksS0FBRCxDQUF4QjtBQUFBLFFBQ01DLE1BQU0sR0FBR0osSUFBSSxDQUFDbEIsT0FBRCxDQURuQjs7QUFHQSxRQUFJc0IsTUFBSixFQUFZO0FBQ1ZaLE1BQUFBLGdCQUFnQixDQUFDYSxJQUFqQixDQUFzQnZCLE9BQXRCO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPVSxnQkFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IHNwbGljZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXJyYXlcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGRvbUVsZW1lbnRGcm9tU2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgY29uc3QgZG9tRWxlbWVudCA9ICh0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIpID9cbiAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgOlxuICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOyAgLy8vXG5cbiAgcmV0dXJuIGRvbUVsZW1lbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbGVtZW50c0Zyb21ET01FbGVtZW50cyhkb21FbGVtZW50cykge1xuICBjb25zdCBkb21FbGVtZW50c1dpdGhFbGVtZW50cyA9IGZpbHRlckRPTU5vZGVzKGRvbUVsZW1lbnRzLCAoZG9tRWxlbWVudCkgPT4gKGRvbUVsZW1lbnQuX19lbGVtZW50X18gIT09IHVuZGVmaW5lZCkpLFxuICAgICAgICBlbGVtZW50cyA9IGRvbUVsZW1lbnRzV2l0aEVsZW1lbnRzLm1hcCgoZG9tRWxlbWVudCkgPT4gZG9tRWxlbWVudC5fX2VsZW1lbnRfXyk7XG5cbiAgcmV0dXJuIGVsZW1lbnRzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVzY2VuZGFudERPTU5vZGVzRnJvbURPTU5vZGUoZG9tTm9kZSwgZGVzY2VuZGFudERPTU5vZGVzID0gW10pIHtcbiAgY29uc3Qgc3RhcnQgPSAtMSxcbiAgICAgICAgZGVsZXRlQ291bnQgPSAwLFxuICAgICAgICBjaGlsZERPTU5vZGVzID0gZG9tTm9kZS5jaGlsZE5vZGVzOyAgLy8vXG5cbiAgc3BsaWNlKGRlc2NlbmRhbnRET01Ob2Rlcywgc3RhcnQsIGRlbGV0ZUNvdW50LCBjaGlsZERPTU5vZGVzKTtcblxuICBjaGlsZERPTU5vZGVzLmZvckVhY2goKGNoaWxkRE9NTm9kZSkgPT4gZGVzY2VuZGFudERPTU5vZGVzRnJvbURPTU5vZGUoY2hpbGRET01Ob2RlLCBkZXNjZW5kYW50RE9NTm9kZXMpKTtcblxuICByZXR1cm4gZGVzY2VuZGFudERPTU5vZGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyRE9NTm9kZXNCeVNlbGVjdG9yKGRvbU5vZGVzLCBzZWxlY3Rvcikge1xuICBjb25zdCBmaWx0ZXJlZERPTU5vZGVzID0gZmlsdGVyRE9NTm9kZXMoZG9tTm9kZXMsIChkb21Ob2RlKSA9PiBkb21Ob2RlTWF0Y2hlc1NlbGVjdG9yKGRvbU5vZGUsIHNlbGVjdG9yKSk7XG5cbiAgcmV0dXJuIGZpbHRlcmVkRE9NTm9kZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkb21Ob2RlTWF0Y2hlc1NlbGVjdG9yKGRvbU5vZGUsIHNlbGVjdG9yKSB7XG4gIGNvbnN0IGRvbU5vZGVUeXBlID0gZG9tTm9kZS5ub2RlVHlwZTtcblxuICBzd2l0Y2ggKGRvbU5vZGVUeXBlKSB7XG4gICAgY2FzZSBOb2RlLkVMRU1FTlRfTk9ERSA6IHtcbiAgICAgIGNvbnN0IGRvbUVsZW1lbnQgPSBkb21Ob2RlOyAvLy9cblxuICAgICAgcmV0dXJuIGRvbUVsZW1lbnQubWF0Y2hlcyhzZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgY2FzZSBOb2RlLlRFWFRfTk9ERSA6IHtcbiAgICAgIGlmIChzZWxlY3RvciA9PT0gXCIqXCIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyRE9NTm9kZXMoZG9tTm9kZXMsIHRlc3QpIHtcbiAgY29uc3QgZmlsdGVyZWRET01Ob2RlcyA9IFtdLFxuICAgICAgICBkb21Ob2Rlc0xlbmd0aCA9IGRvbU5vZGVzLmxlbmd0aDtcblxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZG9tTm9kZXNMZW5ndGg7IGluZGV4KyspIHtcbiAgICBjb25zdCBkb21Ob2RlID0gZG9tTm9kZXNbaW5kZXhdLFxuICAgICAgICAgIHJlc3VsdCA9IHRlc3QoZG9tTm9kZSk7XG5cbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICBmaWx0ZXJlZERPTU5vZGVzLnB1c2goZG9tTm9kZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZpbHRlcmVkRE9NTm9kZXM7XG59XG4iXX0=