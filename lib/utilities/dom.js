"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.elementsFromDOMElements = elementsFromDOMElements;
exports.descendantDOMNodesFromDOMNode = descendantDOMNodesFromDOMNode;
exports.filterDOMNodesBySelector = filterDOMNodesBySelector;
exports.domNodeMatchesSelector = domNodeMatchesSelector;
exports.filterDOMNodes = filterDOMNodes;

var _array = require("../utilities/array");

function elementsFromDOMElements(domElements) {
  var domElementsWithElements = filterDOMNodes(domElements, function (domElement) {
    return domElement.__element__ !== undefined;
  }),
      elements = domElementsWithElements.map(function (domElement) {
    return domElement.__element__;
  });
  return elements;
}

function descendantDOMNodesFromDOMNode(domNode) {
  var descendantDOMNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var start = -1,
      deleteCount = 0,
      childDOMNodes = domNode.childNodes; ///

  (0, _array.splice)(descendantDOMNodes, start, deleteCount, childDOMNodes);
  childDOMNodes.forEach(function (childDOMNode) {
    return descendantDOMNodesFromDOMNode(childDOMNode, descendantDOMNodes);
  });
  return descendantDOMNodes;
}

function filterDOMNodesBySelector(domNodes, selector) {
  var filteredDOMNodes = filterDOMNodes(domNodes, function (domNode) {
    return domNodeMatchesSelector(domNode, selector);
  });
  return filteredDOMNodes;
}

function domNodeMatchesSelector(domNode, selector) {
  var domNodeType = domNode.nodeType;

  switch (domNodeType) {
    case Node.ELEMENT_NODE:
      {
        var domElement = domNode; ///

        return domElement.matches(selector);
      }

    case Node.TEXT_NODE:
      {
        if (selector === "*") {
          return true;
        }
      }
  }

  return false;
}

function filterDOMNodes(domNodes, test) {
  var filteredDOMNodes = [],
      domNodesLength = domNodes.length;

  for (var index = 0; index < domNodesLength; index++) {
    var domNode = domNodes[index],
        result = test(domNode);

    if (result) {
      filteredDOMNodes.push(domNode);
    }
  }

  return filteredDOMNodes;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvbS5qcyJdLCJuYW1lcyI6WyJlbGVtZW50c0Zyb21ET01FbGVtZW50cyIsImRvbUVsZW1lbnRzIiwiZG9tRWxlbWVudHNXaXRoRWxlbWVudHMiLCJmaWx0ZXJET01Ob2RlcyIsImRvbUVsZW1lbnQiLCJfX2VsZW1lbnRfXyIsInVuZGVmaW5lZCIsImVsZW1lbnRzIiwibWFwIiwiZGVzY2VuZGFudERPTU5vZGVzRnJvbURPTU5vZGUiLCJkb21Ob2RlIiwiZGVzY2VuZGFudERPTU5vZGVzIiwic3RhcnQiLCJkZWxldGVDb3VudCIsImNoaWxkRE9NTm9kZXMiLCJjaGlsZE5vZGVzIiwiZm9yRWFjaCIsImNoaWxkRE9NTm9kZSIsImZpbHRlckRPTU5vZGVzQnlTZWxlY3RvciIsImRvbU5vZGVzIiwic2VsZWN0b3IiLCJmaWx0ZXJlZERPTU5vZGVzIiwiZG9tTm9kZU1hdGNoZXNTZWxlY3RvciIsImRvbU5vZGVUeXBlIiwibm9kZVR5cGUiLCJOb2RlIiwiRUxFTUVOVF9OT0RFIiwibWF0Y2hlcyIsIlRFWFRfTk9ERSIsInRlc3QiLCJkb21Ob2Rlc0xlbmd0aCIsImxlbmd0aCIsImluZGV4IiwicmVzdWx0IiwicHVzaCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FBRUE7O0FBRU8sU0FBU0EsdUJBQVQsQ0FBaUNDLFdBQWpDLEVBQThDO0FBQ25ELE1BQU1DLHVCQUF1QixHQUFHQyxjQUFjLENBQUNGLFdBQUQsRUFBYyxVQUFDRyxVQUFEO0FBQUEsV0FBaUJBLFVBQVUsQ0FBQ0MsV0FBWCxLQUEyQkMsU0FBNUM7QUFBQSxHQUFkLENBQTlDO0FBQUEsTUFDTUMsUUFBUSxHQUFHTCx1QkFBdUIsQ0FBQ00sR0FBeEIsQ0FBNEIsVUFBQ0osVUFBRDtBQUFBLFdBQWdCQSxVQUFVLENBQUNDLFdBQTNCO0FBQUEsR0FBNUIsQ0FEakI7QUFHQSxTQUFPRSxRQUFQO0FBQ0Q7O0FBRU0sU0FBU0UsNkJBQVQsQ0FBdUNDLE9BQXZDLEVBQXlFO0FBQUEsTUFBekJDLGtCQUF5Qix1RUFBSixFQUFJO0FBQzlFLE1BQU1DLEtBQUssR0FBRyxDQUFDLENBQWY7QUFBQSxNQUNNQyxXQUFXLEdBQUcsQ0FEcEI7QUFBQSxNQUVNQyxhQUFhLEdBQUdKLE9BQU8sQ0FBQ0ssVUFGOUIsQ0FEOEUsQ0FHbkM7O0FBRTNDLHFCQUFPSixrQkFBUCxFQUEyQkMsS0FBM0IsRUFBa0NDLFdBQWxDLEVBQStDQyxhQUEvQztBQUVBQSxFQUFBQSxhQUFhLENBQUNFLE9BQWQsQ0FBc0IsVUFBQ0MsWUFBRDtBQUFBLFdBQWtCUiw2QkFBNkIsQ0FBQ1EsWUFBRCxFQUFlTixrQkFBZixDQUEvQztBQUFBLEdBQXRCO0FBRUEsU0FBT0Esa0JBQVA7QUFDRDs7QUFFTSxTQUFTTyx3QkFBVCxDQUFrQ0MsUUFBbEMsRUFBNENDLFFBQTVDLEVBQXNEO0FBQzNELE1BQU1DLGdCQUFnQixHQUFHbEIsY0FBYyxDQUFDZ0IsUUFBRCxFQUFXLFVBQUNULE9BQUQ7QUFBQSxXQUFhWSxzQkFBc0IsQ0FBQ1osT0FBRCxFQUFVVSxRQUFWLENBQW5DO0FBQUEsR0FBWCxDQUF2QztBQUVBLFNBQU9DLGdCQUFQO0FBQ0Q7O0FBRU0sU0FBU0Msc0JBQVQsQ0FBZ0NaLE9BQWhDLEVBQXlDVSxRQUF6QyxFQUFtRDtBQUN4RCxNQUFNRyxXQUFXLEdBQUdiLE9BQU8sQ0FBQ2MsUUFBNUI7O0FBRUEsVUFBUUQsV0FBUjtBQUNFLFNBQUtFLElBQUksQ0FBQ0MsWUFBVjtBQUF5QjtBQUN2QixZQUFNdEIsVUFBVSxHQUFHTSxPQUFuQixDQUR1QixDQUNLOztBQUU1QixlQUFPTixVQUFVLENBQUN1QixPQUFYLENBQW1CUCxRQUFuQixDQUFQO0FBQ0Q7O0FBRUQsU0FBS0ssSUFBSSxDQUFDRyxTQUFWO0FBQXNCO0FBQ3BCLFlBQUlSLFFBQVEsS0FBSyxHQUFqQixFQUFzQjtBQUNwQixpQkFBTyxJQUFQO0FBQ0Q7QUFDRjtBQVhIOztBQWNBLFNBQU8sS0FBUDtBQUNEOztBQUVNLFNBQVNqQixjQUFULENBQXdCZ0IsUUFBeEIsRUFBa0NVLElBQWxDLEVBQXdDO0FBQzdDLE1BQU1SLGdCQUFnQixHQUFHLEVBQXpCO0FBQUEsTUFDTVMsY0FBYyxHQUFHWCxRQUFRLENBQUNZLE1BRGhDOztBQUdBLE9BQUssSUFBSUMsS0FBSyxHQUFHLENBQWpCLEVBQW9CQSxLQUFLLEdBQUdGLGNBQTVCLEVBQTRDRSxLQUFLLEVBQWpELEVBQXFEO0FBQ25ELFFBQU10QixPQUFPLEdBQUdTLFFBQVEsQ0FBQ2EsS0FBRCxDQUF4QjtBQUFBLFFBQ01DLE1BQU0sR0FBR0osSUFBSSxDQUFDbkIsT0FBRCxDQURuQjs7QUFHQSxRQUFJdUIsTUFBSixFQUFZO0FBQ1ZaLE1BQUFBLGdCQUFnQixDQUFDYSxJQUFqQixDQUFzQnhCLE9BQXRCO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPVyxnQkFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IHNwbGljZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXJyYXlcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGVsZW1lbnRzRnJvbURPTUVsZW1lbnRzKGRvbUVsZW1lbnRzKSB7XG4gIGNvbnN0IGRvbUVsZW1lbnRzV2l0aEVsZW1lbnRzID0gZmlsdGVyRE9NTm9kZXMoZG9tRWxlbWVudHMsIChkb21FbGVtZW50KSA9PiAoZG9tRWxlbWVudC5fX2VsZW1lbnRfXyAhPT0gdW5kZWZpbmVkKSksXG4gICAgICAgIGVsZW1lbnRzID0gZG9tRWxlbWVudHNXaXRoRWxlbWVudHMubWFwKChkb21FbGVtZW50KSA9PiBkb21FbGVtZW50Ll9fZWxlbWVudF9fKTtcblxuICByZXR1cm4gZWxlbWVudHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXNjZW5kYW50RE9NTm9kZXNGcm9tRE9NTm9kZShkb21Ob2RlLCBkZXNjZW5kYW50RE9NTm9kZXMgPSBbXSkge1xuICBjb25zdCBzdGFydCA9IC0xLFxuICAgICAgICBkZWxldGVDb3VudCA9IDAsXG4gICAgICAgIGNoaWxkRE9NTm9kZXMgPSBkb21Ob2RlLmNoaWxkTm9kZXM7ICAvLy9cblxuICBzcGxpY2UoZGVzY2VuZGFudERPTU5vZGVzLCBzdGFydCwgZGVsZXRlQ291bnQsIGNoaWxkRE9NTm9kZXMpO1xuXG4gIGNoaWxkRE9NTm9kZXMuZm9yRWFjaCgoY2hpbGRET01Ob2RlKSA9PiBkZXNjZW5kYW50RE9NTm9kZXNGcm9tRE9NTm9kZShjaGlsZERPTU5vZGUsIGRlc2NlbmRhbnRET01Ob2RlcykpO1xuXG4gIHJldHVybiBkZXNjZW5kYW50RE9NTm9kZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJET01Ob2Rlc0J5U2VsZWN0b3IoZG9tTm9kZXMsIHNlbGVjdG9yKSB7XG4gIGNvbnN0IGZpbHRlcmVkRE9NTm9kZXMgPSBmaWx0ZXJET01Ob2Rlcyhkb21Ob2RlcywgKGRvbU5vZGUpID0+IGRvbU5vZGVNYXRjaGVzU2VsZWN0b3IoZG9tTm9kZSwgc2VsZWN0b3IpKTtcblxuICByZXR1cm4gZmlsdGVyZWRET01Ob2Rlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRvbU5vZGVNYXRjaGVzU2VsZWN0b3IoZG9tTm9kZSwgc2VsZWN0b3IpIHtcbiAgY29uc3QgZG9tTm9kZVR5cGUgPSBkb21Ob2RlLm5vZGVUeXBlO1xuXG4gIHN3aXRjaCAoZG9tTm9kZVR5cGUpIHtcbiAgICBjYXNlIE5vZGUuRUxFTUVOVF9OT0RFIDoge1xuICAgICAgY29uc3QgZG9tRWxlbWVudCA9IGRvbU5vZGU7IC8vL1xuXG4gICAgICByZXR1cm4gZG9tRWxlbWVudC5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgICB9XG5cbiAgICBjYXNlIE5vZGUuVEVYVF9OT0RFIDoge1xuICAgICAgaWYgKHNlbGVjdG9yID09PSBcIipcIikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJET01Ob2Rlcyhkb21Ob2RlcywgdGVzdCkge1xuICBjb25zdCBmaWx0ZXJlZERPTU5vZGVzID0gW10sXG4gICAgICAgIGRvbU5vZGVzTGVuZ3RoID0gZG9tTm9kZXMubGVuZ3RoO1xuXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBkb21Ob2Rlc0xlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnN0IGRvbU5vZGUgPSBkb21Ob2Rlc1tpbmRleF0sXG4gICAgICAgICAgcmVzdWx0ID0gdGVzdChkb21Ob2RlKTtcblxuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIGZpbHRlcmVkRE9NTm9kZXMucHVzaChkb21Ob2RlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmlsdGVyZWRET01Ob2Rlcztcbn1cbiJdfQ==