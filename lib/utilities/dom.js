"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.domElementFromSelector = domElementFromSelector;
exports.elementsFromDOMElements = elementsFromDOMElements;
exports.descendantDOMNodesFromDOMNode = descendantDOMNodesFromDOMNode;
exports.filterDOMNodesBySelector = filterDOMNodesBySelector;
exports.domNodeMatchesSelector = domNodeMatchesSelector;
exports.filterDOMNodes = filterDOMNodes;

var _array = require("../utilities/array");

function domElementFromSelector(selector) {
  var domElement = typeof selector === "string" ? document.querySelector(selector) : selector; ///

  return domElement;
}

function elementsFromDOMElements(domElements) {
  var domElementsWithElements = filterDOMNodes(domElements, function (domElement) {
    return domElement.__element__ !== undefined;
  }),
      elements = domElementsWithElements.map(function (domElement) {
    return domElement.__element__;
  });
  return elements;
}

function descendantDOMNodesFromDOMNode(domNode) {
  var descendantDOMNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var start = -1,
      deleteCount = 0,
      childDOMNodes = domNode.childNodes; ///

  (0, _array.splice)(descendantDOMNodes, start, deleteCount, childDOMNodes);
  childDOMNodes.forEach(function (childDOMNode) {
    descendantDOMNodesFromDOMNode(childDOMNode, descendantDOMNodes);
  });
  return descendantDOMNodes;
}

function filterDOMNodesBySelector(domNodes, selector) {
  var filteredDOMNodes = filterDOMNodes(domNodes, function (domNode) {
    return domNodeMatchesSelector(domNode, selector);
  });
  return filteredDOMNodes;
}

function domNodeMatchesSelector(domNode, selector) {
  var domNodeType = domNode.nodeType;

  switch (domNodeType) {
    case Node.ELEMENT_NODE:
      {
        var domElement = domNode; ///

        return domElement.matches(selector);
      }

    case Node.TEXT_NODE:
      {
        if (selector === "*") {
          return true;
        }
      }
  }

  return false;
}

function filterDOMNodes(domNodes, test) {
  var filteredDOMNodes = [],
      domNodesLength = domNodes.length;

  for (var index = 0; index < domNodesLength; index++) {
    var domNode = domNodes[index],
        result = test(domNode);

    if (result) {
      filteredDOMNodes.push(domNode);
    }
  }

  return filteredDOMNodes;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvbS5qcyJdLCJuYW1lcyI6WyJkb21FbGVtZW50RnJvbVNlbGVjdG9yIiwic2VsZWN0b3IiLCJkb21FbGVtZW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZWxlbWVudHNGcm9tRE9NRWxlbWVudHMiLCJkb21FbGVtZW50cyIsImRvbUVsZW1lbnRzV2l0aEVsZW1lbnRzIiwiZmlsdGVyRE9NTm9kZXMiLCJfX2VsZW1lbnRfXyIsInVuZGVmaW5lZCIsImVsZW1lbnRzIiwibWFwIiwiZGVzY2VuZGFudERPTU5vZGVzRnJvbURPTU5vZGUiLCJkb21Ob2RlIiwiZGVzY2VuZGFudERPTU5vZGVzIiwic3RhcnQiLCJkZWxldGVDb3VudCIsImNoaWxkRE9NTm9kZXMiLCJjaGlsZE5vZGVzIiwiZm9yRWFjaCIsImNoaWxkRE9NTm9kZSIsImZpbHRlckRPTU5vZGVzQnlTZWxlY3RvciIsImRvbU5vZGVzIiwiZmlsdGVyZWRET01Ob2RlcyIsImRvbU5vZGVNYXRjaGVzU2VsZWN0b3IiLCJkb21Ob2RlVHlwZSIsIm5vZGVUeXBlIiwiTm9kZSIsIkVMRU1FTlRfTk9ERSIsIm1hdGNoZXMiLCJURVhUX05PREUiLCJ0ZXN0IiwiZG9tTm9kZXNMZW5ndGgiLCJsZW5ndGgiLCJpbmRleCIsInJlc3VsdCIsInB1c2giXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7QUFFQTs7QUFFTyxTQUFTQSxzQkFBVCxDQUFnQ0MsUUFBaEMsRUFBMEM7QUFDL0MsTUFBTUMsVUFBVSxHQUFJLE9BQU9ELFFBQVAsS0FBb0IsUUFBckIsR0FDRUUsUUFBUSxDQUFDQyxhQUFULENBQXVCSCxRQUF2QixDQURGLEdBRUlBLFFBRnZCLENBRCtDLENBR2I7O0FBRWxDLFNBQU9DLFVBQVA7QUFDRDs7QUFFTSxTQUFTRyx1QkFBVCxDQUFpQ0MsV0FBakMsRUFBOEM7QUFDbkQsTUFBTUMsdUJBQXVCLEdBQUdDLGNBQWMsQ0FBQ0YsV0FBRCxFQUFjLFVBQVNKLFVBQVQsRUFBcUI7QUFDekUsV0FBUUEsVUFBVSxDQUFDTyxXQUFYLEtBQTJCQyxTQUFuQztBQUNELEdBRnVDLENBQTlDO0FBQUEsTUFHTUMsUUFBUSxHQUFHSix1QkFBdUIsQ0FBQ0ssR0FBeEIsQ0FBNEIsVUFBU1YsVUFBVCxFQUFxQjtBQUMxRCxXQUFPQSxVQUFVLENBQUNPLFdBQWxCO0FBQ0QsR0FGVSxDQUhqQjtBQU9BLFNBQU9FLFFBQVA7QUFDRDs7QUFFTSxTQUFTRSw2QkFBVCxDQUF1Q0MsT0FBdkMsRUFBeUU7QUFBQSxNQUF6QkMsa0JBQXlCLHVFQUFKLEVBQUk7QUFDOUUsTUFBTUMsS0FBSyxHQUFHLENBQUMsQ0FBZjtBQUFBLE1BQ01DLFdBQVcsR0FBRyxDQURwQjtBQUFBLE1BRU1DLGFBQWEsR0FBR0osT0FBTyxDQUFDSyxVQUY5QixDQUQ4RSxDQUduQzs7QUFFM0MscUJBQU9KLGtCQUFQLEVBQTJCQyxLQUEzQixFQUFrQ0MsV0FBbEMsRUFBK0NDLGFBQS9DO0FBRUFBLEVBQUFBLGFBQWEsQ0FBQ0UsT0FBZCxDQUFzQixVQUFTQyxZQUFULEVBQXVCO0FBQzNDUixJQUFBQSw2QkFBNkIsQ0FBQ1EsWUFBRCxFQUFlTixrQkFBZixDQUE3QjtBQUNELEdBRkQ7QUFJQSxTQUFPQSxrQkFBUDtBQUNEOztBQUVNLFNBQVNPLHdCQUFULENBQWtDQyxRQUFsQyxFQUE0Q3RCLFFBQTVDLEVBQXNEO0FBQzNELE1BQU11QixnQkFBZ0IsR0FBR2hCLGNBQWMsQ0FBQ2UsUUFBRCxFQUFXLFVBQVNULE9BQVQsRUFBa0I7QUFDbEUsV0FBT1csc0JBQXNCLENBQUNYLE9BQUQsRUFBVWIsUUFBVixDQUE3QjtBQUNELEdBRnNDLENBQXZDO0FBSUEsU0FBT3VCLGdCQUFQO0FBQ0Q7O0FBRU0sU0FBU0Msc0JBQVQsQ0FBZ0NYLE9BQWhDLEVBQXlDYixRQUF6QyxFQUFtRDtBQUN4RCxNQUFNeUIsV0FBVyxHQUFHWixPQUFPLENBQUNhLFFBQTVCOztBQUVBLFVBQVFELFdBQVI7QUFDRSxTQUFLRSxJQUFJLENBQUNDLFlBQVY7QUFBeUI7QUFDdkIsWUFBTTNCLFVBQVUsR0FBR1ksT0FBbkIsQ0FEdUIsQ0FDSzs7QUFFNUIsZUFBT1osVUFBVSxDQUFDNEIsT0FBWCxDQUFtQjdCLFFBQW5CLENBQVA7QUFDRDs7QUFFRCxTQUFLMkIsSUFBSSxDQUFDRyxTQUFWO0FBQXNCO0FBQ3BCLFlBQUk5QixRQUFRLEtBQUssR0FBakIsRUFBc0I7QUFDcEIsaUJBQU8sSUFBUDtBQUNEO0FBQ0Y7QUFYSDs7QUFjQSxTQUFPLEtBQVA7QUFDRDs7QUFFTSxTQUFTTyxjQUFULENBQXdCZSxRQUF4QixFQUFrQ1MsSUFBbEMsRUFBd0M7QUFDN0MsTUFBTVIsZ0JBQWdCLEdBQUcsRUFBekI7QUFBQSxNQUNNUyxjQUFjLEdBQUdWLFFBQVEsQ0FBQ1csTUFEaEM7O0FBR0EsT0FBSyxJQUFJQyxLQUFLLEdBQUcsQ0FBakIsRUFBb0JBLEtBQUssR0FBR0YsY0FBNUIsRUFBNENFLEtBQUssRUFBakQsRUFBcUQ7QUFDbkQsUUFBTXJCLE9BQU8sR0FBR1MsUUFBUSxDQUFDWSxLQUFELENBQXhCO0FBQUEsUUFDTUMsTUFBTSxHQUFHSixJQUFJLENBQUNsQixPQUFELENBRG5COztBQUdBLFFBQUlzQixNQUFKLEVBQVk7QUFDVlosTUFBQUEsZ0JBQWdCLENBQUNhLElBQWpCLENBQXNCdkIsT0FBdEI7QUFDRDtBQUNGOztBQUVELFNBQU9VLGdCQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgc3BsaWNlIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hcnJheVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gZG9tRWxlbWVudEZyb21TZWxlY3RvcihzZWxlY3Rvcikge1xuICBjb25zdCBkb21FbGVtZW50ID0gKHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIikgP1xuICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I7ICAvLy9cblxuICByZXR1cm4gZG9tRWxlbWVudDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVsZW1lbnRzRnJvbURPTUVsZW1lbnRzKGRvbUVsZW1lbnRzKSB7XG4gIGNvbnN0IGRvbUVsZW1lbnRzV2l0aEVsZW1lbnRzID0gZmlsdGVyRE9NTm9kZXMoZG9tRWxlbWVudHMsIGZ1bmN0aW9uKGRvbUVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gKGRvbUVsZW1lbnQuX19lbGVtZW50X18gIT09IHVuZGVmaW5lZCk7XG4gICAgICAgIH0pLFxuICAgICAgICBlbGVtZW50cyA9IGRvbUVsZW1lbnRzV2l0aEVsZW1lbnRzLm1hcChmdW5jdGlvbihkb21FbGVtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGRvbUVsZW1lbnQuX19lbGVtZW50X187XG4gICAgICAgIH0pO1xuXG4gIHJldHVybiBlbGVtZW50cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlc2NlbmRhbnRET01Ob2Rlc0Zyb21ET01Ob2RlKGRvbU5vZGUsIGRlc2NlbmRhbnRET01Ob2RlcyA9IFtdKSB7XG4gIGNvbnN0IHN0YXJ0ID0gLTEsXG4gICAgICAgIGRlbGV0ZUNvdW50ID0gMCxcbiAgICAgICAgY2hpbGRET01Ob2RlcyA9IGRvbU5vZGUuY2hpbGROb2RlczsgIC8vL1xuXG4gIHNwbGljZShkZXNjZW5kYW50RE9NTm9kZXMsIHN0YXJ0LCBkZWxldGVDb3VudCwgY2hpbGRET01Ob2Rlcyk7XG5cbiAgY2hpbGRET01Ob2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkRE9NTm9kZSkge1xuICAgIGRlc2NlbmRhbnRET01Ob2Rlc0Zyb21ET01Ob2RlKGNoaWxkRE9NTm9kZSwgZGVzY2VuZGFudERPTU5vZGVzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRlc2NlbmRhbnRET01Ob2Rlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlckRPTU5vZGVzQnlTZWxlY3Rvcihkb21Ob2Rlcywgc2VsZWN0b3IpIHtcbiAgY29uc3QgZmlsdGVyZWRET01Ob2RlcyA9IGZpbHRlckRPTU5vZGVzKGRvbU5vZGVzLCBmdW5jdGlvbihkb21Ob2RlKSB7XG4gICAgcmV0dXJuIGRvbU5vZGVNYXRjaGVzU2VsZWN0b3IoZG9tTm9kZSwgc2VsZWN0b3IpO1xuICB9KTtcblxuICByZXR1cm4gZmlsdGVyZWRET01Ob2Rlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRvbU5vZGVNYXRjaGVzU2VsZWN0b3IoZG9tTm9kZSwgc2VsZWN0b3IpIHtcbiAgY29uc3QgZG9tTm9kZVR5cGUgPSBkb21Ob2RlLm5vZGVUeXBlO1xuXG4gIHN3aXRjaCAoZG9tTm9kZVR5cGUpIHtcbiAgICBjYXNlIE5vZGUuRUxFTUVOVF9OT0RFIDoge1xuICAgICAgY29uc3QgZG9tRWxlbWVudCA9IGRvbU5vZGU7IC8vL1xuXG4gICAgICByZXR1cm4gZG9tRWxlbWVudC5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgICB9XG5cbiAgICBjYXNlIE5vZGUuVEVYVF9OT0RFIDoge1xuICAgICAgaWYgKHNlbGVjdG9yID09PSBcIipcIikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJET01Ob2Rlcyhkb21Ob2RlcywgdGVzdCkge1xuICBjb25zdCBmaWx0ZXJlZERPTU5vZGVzID0gW10sXG4gICAgICAgIGRvbU5vZGVzTGVuZ3RoID0gZG9tTm9kZXMubGVuZ3RoO1xuXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBkb21Ob2Rlc0xlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnN0IGRvbU5vZGUgPSBkb21Ob2Rlc1tpbmRleF0sXG4gICAgICAgICAgcmVzdWx0ID0gdGVzdChkb21Ob2RlKTtcblxuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIGZpbHRlcmVkRE9NTm9kZXMucHVzaChkb21Ob2RlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmlsdGVyZWRET01Ob2Rlcztcbn1cbiJdfQ==