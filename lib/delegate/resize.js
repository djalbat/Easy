'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var resize = function () {
  function resize() {
    _classCallCheck(this, resize);
  }

  _createClass(resize, null, [{
    key: 'initialise',
    value: function initialise(element) {
      var prototype = Object.getPrototypeOf(element);

      element.resizeHandlers = [];

      prototype.onResize = onResize;
      prototype.offResize = offResize;
    }
  }]);

  return resize;
}();

module.exports = resize;

function onResize(resizeHandler) {
  var resizeHandlers = hasResizeHandlers(this);

  if (!resizeHandlers) {
    appendResizeObject(this);
  }

  addResizeHandler(this, resizeHandler);
}

function offResize(resizeHandler) {
  removeResizeHandler(this, resizeHandler);

  var resizeHandlers = hasResizeHandlers(this);

  if (!resizeHandlers) {
    removeResizeObject(this);
  }
}

function hasResizeHandlers(element) {
  var resizeHandlersLength = element.resizeHandlers.length,
      resizeHandlers = resizeHandlersLength > 0;

  return resizeHandlers;
}

function addResizeHandler(element, resizeHandler) {
  element.resizeHandlers.push(resizeHandler);
}

function removeResizeHandler(element, resizeHandler) {
  var index = element.resizeHandlers.indexOf(resizeHandler); ///

  if (index > -1) {
    var deleteCount = 1;

    element.resizeHandlers.splice(index, deleteCount);
  }
}

function appendResizeObject(element) {
  var resizeObject = document.createElement('object'),
      domElement = element.$element[0],
      ///
  style = ' display: block; \n                  position: absolute; \n                  top: 0; \n                  left: 0; \n                  height: 100%; \n                  width: 100%; \n                  overflow: hidden; \n                  pointer-events: none; \n                  z-index: -1;';

  resizeObject.setAttribute('style', style);
  resizeObject.data = 'about:blank';
  resizeObject.type = 'text/html';

  domElement.__resizeObject__ = resizeObject;

  resizeObject.onload = function () {
    resizeObjectLoadHandler(resizeObject, element);
  };

  domElement.appendChild(resizeObject);
}

function removeResizeObject(element) {
  var domElement = element.$element[0],
      ///
  resizeObject = domElement.__resizeObject__,
      objectWindow = resizeObject.contentDocument.defaultView; ///

  objectWindow.removeEventListener('resize', resizeListener);

  domElement.removeChild(resizeObject);
}

function resizeObjectLoadHandler(resizeObject, element) {
  var resizeObjectWindow = resizeObject.contentDocument.defaultView; ///

  resizeObjectWindow.addEventListener('resize', function () {
    resizeListener(element);
  });
}

function resizeListener(element) {
  var width = element.getWidth(),
      height = element.getHeight();

  element.resizeHandlers.forEach(function (resizeHandler) {
    resizeHandler(width, height);
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9kZWxlZ2F0ZS9yZXNpemUuanMiXSwibmFtZXMiOlsicmVzaXplIiwiZWxlbWVudCIsInByb3RvdHlwZSIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwicmVzaXplSGFuZGxlcnMiLCJvblJlc2l6ZSIsIm9mZlJlc2l6ZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXNpemVIYW5kbGVyIiwiaGFzUmVzaXplSGFuZGxlcnMiLCJhcHBlbmRSZXNpemVPYmplY3QiLCJhZGRSZXNpemVIYW5kbGVyIiwicmVtb3ZlUmVzaXplSGFuZGxlciIsInJlbW92ZVJlc2l6ZU9iamVjdCIsInJlc2l6ZUhhbmRsZXJzTGVuZ3RoIiwibGVuZ3RoIiwicHVzaCIsImluZGV4IiwiaW5kZXhPZiIsImRlbGV0ZUNvdW50Iiwic3BsaWNlIiwicmVzaXplT2JqZWN0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZG9tRWxlbWVudCIsIiRlbGVtZW50Iiwic3R5bGUiLCJzZXRBdHRyaWJ1dGUiLCJkYXRhIiwidHlwZSIsIl9fcmVzaXplT2JqZWN0X18iLCJvbmxvYWQiLCJyZXNpemVPYmplY3RMb2FkSGFuZGxlciIsImFwcGVuZENoaWxkIiwib2JqZWN0V2luZG93IiwiY29udGVudERvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVzaXplTGlzdGVuZXIiLCJyZW1vdmVDaGlsZCIsInJlc2l6ZU9iamVjdFdpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJ3aWR0aCIsImdldFdpZHRoIiwiaGVpZ2h0IiwiZ2V0SGVpZ2h0IiwiZm9yRWFjaCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztJQUVNQSxNOzs7Ozs7OytCQUNjQyxPLEVBQVM7QUFDekIsVUFBSUMsWUFBWUMsT0FBT0MsY0FBUCxDQUFzQkgsT0FBdEIsQ0FBaEI7O0FBRUFBLGNBQVFJLGNBQVIsR0FBeUIsRUFBekI7O0FBRUFILGdCQUFVSSxRQUFWLEdBQXFCQSxRQUFy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LFFBQVIsRUFBWjtBQUFBLE1BQ0lDLFNBQVM3QyxRQUFROEMsU0FBUixFQURiOztBQUdBOUMsVUFBUUksY0FBUixDQUF1QjJDLE9BQXZCLENBQStCLFVBQVN0QyxhQUFULEVBQXVCO0FBQ3BEQSxrQkFBY2tDLEtBQWQsRUFBcUJFLE1BQXJCO0FBQ0QsR0FGRDtBQUdEIiwiZmlsZSI6InJlc2l6ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY2xhc3MgcmVzaXplIHtcbiAgc3RhdGljIGluaXRpYWxpc2UoZWxlbWVudCkge1xuICAgIHZhciBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZWxlbWVudCk7XG5cbiAgICBlbGVtZW50LnJlc2l6ZUhhbmRsZXJzID0gW107XG5cbiAgICBwcm90b3R5cGUub25SZXNpemUgPSBvblJlc2l6ZTtcbiAgICBwcm90b3R5cGUub2ZmUmVzaXplID0gb2ZmUmVzaXplO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVzaXplO1xuXG5mdW5jdGlvbiBvblJlc2l6ZShyZXNpemVIYW5kbGVyKSB7XG4gIHZhciByZXNpemVIYW5kbGVycyA9IGhhc1Jlc2l6ZUhhbmRsZXJzKHRoaXMpO1xuXG4gIGlmICghcmVzaXplSGFuZGxlcnMpIHtcbiAgICBhcHBlbmRSZXNpemVPYmplY3QodGhpcyk7XG4gIH1cblxuICBhZGRSZXNpemVIYW5kbGVyKHRoaXMsIHJlc2l6ZUhhbmRsZXIpO1xufVxuXG5mdW5jdGlvbiBvZmZSZXNpemUocmVzaXplSGFuZGxlcikge1xuICByZW1vdmVSZXNpemVIYW5kbGVyKHRoaXMsIHJlc2l6ZUhhbmRsZXIpO1xuXG4gIHZhciByZXNpemVIYW5kbGVycyA9IGhhc1Jlc2l6ZUhhbmRsZXJzKHRoaXMpO1xuXG4gIGlmICghcmVzaXplSGFuZGxlcnMpIHtcbiAgICByZW1vdmVSZXNpemVPYmplY3QodGhpcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzUmVzaXplSGFuZGxlcnMoZWxlbWVudCkge1xuICB2YXIgcmVzaXplSGFuZGxlcnNMZW5ndGggPSBlbGVtZW50LnJlc2l6ZUhhbmRsZXJzLmxlbmd0aCxcbiAgICAgIHJlc2l6ZUhhbmRsZXJzID0gKHJlc2l6ZUhhbmRsZXJzTGVuZ3RoID4gMCk7XG5cbiAgcmV0dXJuIHJlc2l6ZUhhbmRsZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRSZXNpemVIYW5kbGVyKGVsZW1lbnQsIHJlc2l6ZUhhbmRsZXIpIHtcbiAgZWxlbWVudC5yZXNpemVIYW5kbGVycy5wdXNoKHJlc2l6ZUhhbmRsZXIpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVSZXNpemVIYW5kbGVyKGVsZW1lbnQsIHJlc2l6ZUhhbmRsZXIpIHtcbiAgdmFyIGluZGV4ID0gZWxlbWVudC5yZXNpemVIYW5kbGVycy5pbmRleE9mKHJlc2l6ZUhhbmRsZXIpOyAvLy9cblxuICBpZiAoaW5kZXggPiAtMSkge1xuICAgIHZhciBkZWxldGVDb3VudCA9IDE7XG5cbiAgICBlbGVtZW50LnJlc2l6ZUhhbmRsZXJzLnNwbGljZShpbmRleCwgZGVsZXRlQ291bnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGVuZFJlc2l6ZU9iamVjdChlbGVtZW50KSB7XG4gIHZhciByZXNpemVPYmplY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvYmplY3QnKSxcbiAgICAgIGRvbUVsZW1lbnQgPSBlbGVtZW50LiRlbGVtZW50WzBdLCAgLy8vXG4gICAgICBzdHlsZSA9IGAgZGlzcGxheTogYmxvY2s7IFxuICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOyBcbiAgICAgICAgICAgICAgICAgIHRvcDogMDsgXG4gICAgICAgICAgICAgICAgICBsZWZ0OiAwOyBcbiAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTsgXG4gICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTsgXG4gICAgICAgICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuOyBcbiAgICAgICAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lOyBcbiAgICAgICAgICAgICAgICAgIHotaW5kZXg6IC0xO2A7XG5cbiAgcmVzaXplT2JqZWN0LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBzdHlsZSk7XG4gIHJlc2l6ZU9iamVjdC5kYXRhID0gJ2Fib3V0OmJsYW5rJztcbiAgcmVzaXplT2JqZWN0LnR5cGUgPSAndGV4dC9odG1sJztcblxuICBkb21FbGVtZW50Ll9fcmVzaXplT2JqZWN0X18gPSByZXNpemVPYmplY3Q7XG5cbiAgcmVzaXplT2JqZWN0Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJlc2l6ZU9iamVjdExvYWRIYW5kbGVyKHJlc2l6ZU9iamVjdCwgZWxlbWVudClcbiAgfTtcblxuICBkb21FbGVtZW50LmFwcGVuZENoaWxkKHJlc2l6ZU9iamVjdCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVJlc2l6ZU9iamVjdChlbGVtZW50KSB7XG4gIHZhciBkb21FbGVtZW50ID0gZWxlbWVudC4kZWxlbWVudFswXSwgIC8vL1xuICAgICAgcmVzaXplT2JqZWN0ID0gZG9tRWxlbWVudC5fX3Jlc2l6ZU9iamVjdF9fLFxuICAgICAgb2JqZWN0V2luZG93ID0gcmVzaXplT2JqZWN0LmNvbnRlbnREb2N1bWVudC5kZWZhdWx0VmlldzsgIC8vL1xuXG4gIG9iamVjdFdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVMaXN0ZW5lcik7XG5cbiAgZG9tRWxlbWVudC5yZW1vdmVDaGlsZChyZXNpemVPYmplY3QpO1xufVxuXG5mdW5jdGlvbiByZXNpemVPYmplY3RMb2FkSGFuZGxlcihyZXNpemVPYmplY3QsIGVsZW1lbnQpIHtcbiAgdmFyIHJlc2l6ZU9iamVjdFdpbmRvdyA9IHJlc2l6ZU9iamVjdC5jb250ZW50RG9jdW1lbnQuZGVmYXVsdFZpZXc7ICAvLy9cblxuICByZXNpemVPYmplY3RXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24oKSB7XG4gICAgcmVzaXplTGlzdGVuZXIoZWxlbWVudCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXNpemVMaXN0ZW5lcihlbGVtZW50KSB7XG4gIHZhciB3aWR0aCA9IGVsZW1lbnQuZ2V0V2lkdGgoKSxcbiAgICAgIGhlaWdodCA9IGVsZW1lbnQuZ2V0SGVpZ2h0KCk7XG5cbiAgZWxlbWVudC5yZXNpemVIYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uKHJlc2l6ZUhhbmRsZXIpe1xuICAgIHJlc2l6ZUhhbmRsZXIod2lkdGgsIGhlaWdodCk7XG4gIH0pO1xufVxuIl19