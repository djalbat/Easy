'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var util = require('./util');

var resize = function () {
  function resize() {
    _classCallCheck(this, resize);
  }

  _createClass(resize, null, [{
    key: 'delegateTo',
    value: function delegateTo(element, Class) {
      var prototype = util.findPrototype(element, Class);

      element.resizeHandlers = [];

      prototype.onResize = onResize;
      prototype.offResize = offResize;
    }
  }]);

  return resize;
}();

module.exports = resize;

function onResize(resizeHandler) {
  var resizeHandlers = hasResizeHandlers(this);

  if (!resizeHandlers) {
    appendResizeObject(this);
  }

  addResizeHandler(this, resizeHandler);
}

function offResize(resizeHandler) {
  removeResizeHandler(this, resizeHandler);

  var resizeHandlers = hasResizeHandlers(this);

  if (!resizeHandlers) {
    removeResizeObject(this);
  }
}

function hasResizeHandlers(element) {
  var resizeHandlersLength = element.resizeHandlers.length,
      resizeHandlers = resizeHandlersLength > 0;

  return resizeHandlers;
}

function addResizeHandler(element, resizeHandler) {
  element.resizeHandlers.push(resizeHandler);
}

function removeResizeHandler(element, resizeHandler) {
  var index = element.resizeHandlers.indexOf(resizeHandler); ///

  if (index > -1) {
    var deleteCount = 1;

    element.resizeHandlers.splice(index, deleteCount);
  }
}

function appendResizeObject(element) {
  var resizeObject = document.createElement('object'),
      domElement = element.$element[0],
      ///
  style = ' display: block; \n                  position: absolute; \n                  top: 0; \n                  left: 0; \n                  height: 100%; \n                  width: 100%; \n                  overflow: hidden; \n                  pointer-events: none; \n                  z-index: -1;';

  resizeObject.setAttribute('style', style);
  resizeObject.data = 'about:blank';
  resizeObject.type = 'text/html';

  domElement.__resizeObject__ = resizeObject;

  resizeObject.onload = function () {
    resizeObjectLoadHandler(resizeObject, element);
  };

  domElement.appendChild(resizeObject);
}

function removeResizeObject(element) {
  var domElement = element.$element[0],
      ///
  resizeObject = domElement.__resizeObject__,
      objectWindow = resizeObject.contentDocument.defaultView; ///

  objectWindow.removeEventListener('resize', resizeListener);

  domElement.removeChild(resizeObject);
}

function resizeObjectLoadHandler(resizeObject, element) {
  var resizeObjectWindow = resizeObject.contentDocument.defaultView; ///

  resizeObjectWindow.addEventListener('resize', function () {
    resizeListener(element);
  });
}

function resizeListener(element) {
  var width = element.getWidth(),
      height = element.getHeight();

  element.resizeHandlers.forEach(function (resizeHandler) {
    resizeHandler(width, height);
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9kZWxlZ2F0ZS9yZXNpemUuanMiXSwibmFtZXMiOlsidXRpbCIsInJlcXVpcmUiLCJyZXNpemUiLCJlbGVtZW50IiwiQ2xhc3MiLCJwcm90b3R5cGUiLCJmaW5kUHJvdG90eXBlIiwicmVzaXplSGFuZGxlcnMiLCJvblJlc2l6ZSIsIm9mZlJlc2l6ZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXNpemVIYW5kbGVyIiwiaGFzUmVzaXplSGFuZGxlcnMiLCJhcHBlbmRSZXNpemVPYmplY3QiLCJhZGRSZXNpemVIYW5kbGVyIiwicmVtb3ZlUmVzaXplSGFuZGxlciIsInJlbW92ZVJlc2l6ZU9iamVjdCIsInJlc2l6ZUhhbmRsZXJzTGVuZ3RoIiwibGVuZ3RoIiwicHVzaCIsImluZGV4IiwiaW5kZXhPZiIsImRlbGV0ZUNvdW50Iiwic3BsaWNlIiwicmVzaXplT2JqZWN0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZG9tRWxlbWVudCIsIiRlbGVtZW50Iiwic3R5bGUiLCJzZXRBdHRyaWJ1dGUiLCJkYXRhIiwidHlwZSIsIl9fcmVzaXplT2JqZWN0X18iLCJvbmxvYWQiLCJyZXNpemVPYmplY3RMb2FkSGFuZGxlciIsImFwcGVuZENoaWxkIiwib2JqZWN0V2luZG93IiwiY29udGVudERvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVzaXplTGlzdGVuZXIiLCJyZW1vdmVDaGlsZCIsInJlc2l6ZU9iamVjdFdpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJ3aWR0aCIsImdldFdpZHRoIiwiaGVpZ2h0IiwiZ2V0SGVpZ2h0IiwiZm9yRWFjaCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQUlBLE9BQU9DLFFBQVEsUUFBUixDQUFYOztJQUVNQyxNOzs7Ozs7OytCQUNjQyxPLEVBQVNDLEssRUFBTztBQUNoQyxVQUFJQyxZQUFZTCxLQUFLTSxhQUFMLENBQW1CSCxPQUFuQixFQUE0QkMsS0FB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QUFHRDs7QUFFRCxTQUFTdUMsY0FBVCxDQUF3QnZDLE9BQXhCLEVBQWlDO0FBQy9CLE1BQUkyQyxRQUFRM0MsUUFBUTRDLFFBQVIsRUFBWjtBQUFBLE1BQ0lDLFNBQVM3QyxRQUFROEMsU0FBUixFQURiOztBQUdBOUMsVUFBUUksY0FBUixDQUF1QjJDLE9BQXZCLENBQStCLFVBQVN0QyxhQUFULEVBQXVCO0FBQ3BEQSxrQkFBY2tDLEtBQWQsRUFBcUJFLE1BQXJCO0FBQ0QsR0FGRDtBQUdEIiwiZmlsZSI6InJlc2l6ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuY2xhc3MgcmVzaXplIHtcbiAgc3RhdGljIGRlbGVnYXRlVG8oZWxlbWVudCwgQ2xhc3MpIHtcbiAgICB2YXIgcHJvdG90eXBlID0gdXRpbC5maW5kUHJvdG90eXBlKGVsZW1lbnQsIENsYXNzKTtcblxuICAgIGVsZW1lbnQucmVzaXplSGFuZGxlcnMgPSBbXTtcblxuICAgIHByb3RvdHlwZS5vblJlc2l6ZSA9IG9uUmVzaXplO1xuICAgIHByb3RvdHlwZS5vZmZSZXNpemUgPSBvZmZSZXNpemU7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXNpemU7XG5cbmZ1bmN0aW9uIG9uUmVzaXplKHJlc2l6ZUhhbmRsZXIpIHtcbiAgdmFyIHJlc2l6ZUhhbmRsZXJzID0gaGFzUmVzaXplSGFuZGxlcnModGhpcyk7XG5cbiAgaWYgKCFyZXNpemVIYW5kbGVycykge1xuICAgIGFwcGVuZFJlc2l6ZU9iamVjdCh0aGlzKTtcbiAgfVxuXG4gIGFkZFJlc2l6ZUhhbmRsZXIodGhpcywgcmVzaXplSGFuZGxlcik7XG59XG5cbmZ1bmN0aW9uIG9mZlJlc2l6ZShyZXNpemVIYW5kbGVyKSB7XG4gIHJlbW92ZVJlc2l6ZUhhbmRsZXIodGhpcywgcmVzaXplSGFuZGxlcik7XG5cbiAgdmFyIHJlc2l6ZUhhbmRsZXJzID0gaGFzUmVzaXplSGFuZGxlcnModGhpcyk7XG5cbiAgaWYgKCFyZXNpemVIYW5kbGVycykge1xuICAgIHJlbW92ZVJlc2l6ZU9iamVjdCh0aGlzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNSZXNpemVIYW5kbGVycyhlbGVtZW50KSB7XG4gIHZhciByZXNpemVIYW5kbGVyc0xlbmd0aCA9IGVsZW1lbnQucmVzaXplSGFuZGxlcnMubGVuZ3RoLFxuICAgICAgcmVzaXplSGFuZGxlcnMgPSAocmVzaXplSGFuZGxlcnNMZW5ndGggPiAwKTtcblxuICByZXR1cm4gcmVzaXplSGFuZGxlcnM7XG59XG5cbmZ1bmN0aW9uIGFkZFJlc2l6ZUhhbmRsZXIoZWxlbWVudCwgcmVzaXplSGFuZGxlcikge1xuICBlbGVtZW50LnJlc2l6ZUhhbmRsZXJzLnB1c2gocmVzaXplSGFuZGxlcik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVJlc2l6ZUhhbmRsZXIoZWxlbWVudCwgcmVzaXplSGFuZGxlcikge1xuICB2YXIgaW5kZXggPSBlbGVtZW50LnJlc2l6ZUhhbmRsZXJzLmluZGV4T2YocmVzaXplSGFuZGxlcik7IC8vL1xuXG4gIGlmIChpbmRleCA+IC0xKSB7XG4gICAgdmFyIGRlbGV0ZUNvdW50ID0gMTtcblxuICAgIGVsZW1lbnQucmVzaXplSGFuZGxlcnMuc3BsaWNlKGluZGV4LCBkZWxldGVDb3VudCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwZW5kUmVzaXplT2JqZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHJlc2l6ZU9iamVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29iamVjdCcpLFxuICAgICAgZG9tRWxlbWVudCA9IGVsZW1lbnQuJGVsZW1lbnRbMF0sICAvLy9cbiAgICAgIHN0eWxlID0gYCBkaXNwbGF5OiBibG9jazsgXG4gICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7IFxuICAgICAgICAgICAgICAgICAgdG9wOiAwOyBcbiAgICAgICAgICAgICAgICAgIGxlZnQ6IDA7IFxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlOyBcbiAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOyBcbiAgICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47IFxuICAgICAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7IFxuICAgICAgICAgICAgICAgICAgei1pbmRleDogLTE7YDtcblxuICByZXNpemVPYmplY3Quc2V0QXR0cmlidXRlKCdzdHlsZScsIHN0eWxlKTtcbiAgcmVzaXplT2JqZWN0LmRhdGEgPSAnYWJvdXQ6YmxhbmsnO1xuICByZXNpemVPYmplY3QudHlwZSA9ICd0ZXh0L2h0bWwnO1xuXG4gIGRvbUVsZW1lbnQuX19yZXNpemVPYmplY3RfXyA9IHJlc2l6ZU9iamVjdDtcblxuICByZXNpemVPYmplY3Qub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgcmVzaXplT2JqZWN0TG9hZEhhbmRsZXIocmVzaXplT2JqZWN0LCBlbGVtZW50KVxuICB9O1xuXG4gIGRvbUVsZW1lbnQuYXBwZW5kQ2hpbGQocmVzaXplT2JqZWN0KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlUmVzaXplT2JqZWN0KGVsZW1lbnQpIHtcbiAgdmFyIGRvbUVsZW1lbnQgPSBlbGVtZW50LiRlbGVtZW50WzBdLCAgLy8vXG4gICAgICByZXNpemVPYmplY3QgPSBkb21FbGVtZW50Ll9fcmVzaXplT2JqZWN0X18sXG4gICAgICBvYmplY3RXaW5kb3cgPSByZXNpemVPYmplY3QuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3OyAgLy8vXG5cbiAgb2JqZWN0V2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUxpc3RlbmVyKTtcblxuICBkb21FbGVtZW50LnJlbW92ZUNoaWxkKHJlc2l6ZU9iamVjdCk7XG59XG5cbmZ1bmN0aW9uIHJlc2l6ZU9iamVjdExvYWRIYW5kbGVyKHJlc2l6ZU9iamVjdCwgZWxlbWVudCkge1xuICB2YXIgcmVzaXplT2JqZWN0V2luZG93ID0gcmVzaXplT2JqZWN0LmNvbnRlbnREb2N1bWVudC5kZWZhdWx0VmlldzsgIC8vL1xuXG4gIHJlc2l6ZU9iamVjdFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmdW5jdGlvbigpIHtcbiAgICByZXNpemVMaXN0ZW5lcihlbGVtZW50KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlc2l6ZUxpc3RlbmVyKGVsZW1lbnQpIHtcbiAgdmFyIHdpZHRoID0gZWxlbWVudC5nZXRXaWR0aCgpLFxuICAgICAgaGVpZ2h0ID0gZWxlbWVudC5nZXRIZWlnaHQoKTtcblxuICBlbGVtZW50LnJlc2l6ZUhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24ocmVzaXplSGFuZGxlcil7XG4gICAgcmVzaXplSGFuZGxlcih3aWR0aCwgaGVpZ2h0KTtcbiAgfSk7XG59XG4iXX0=